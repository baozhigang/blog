{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/blog.png","path":"images/blog.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar-2021.jpeg","path":"images/avatar-2021.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/只读缓存.png","path":"images/只读缓存.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"378781564fbc9cebbd6c870d2f10e679a1143fee","modified":1635406492773},{"_id":"themes/next/.DS_Store","hash":"5294fc6ac587dd1875c3e43ff70c43a92034b594","modified":1635406492777},{"_id":"themes/next/.gitignore","hash":"d9021ac0041b511356fc7044cb02c6e0e567d706","modified":1579616251000},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1579616251000},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1579616251000},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1579616251000},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1579616251000},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1579616251000},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1579616251000},{"_id":"themes/next/README.md","hash":"cf80e405a426235ae6239d8370a841ff21b99d79","modified":1579616251000},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1579616251000},{"_id":"themes/next/package.json","hash":"e8703def66d244ef9c355f052e4e3968b1edef4f","modified":1579616251000},{"_id":"themes/next/gulpfile.js","hash":"c4cffe4df4ba406d9ab347bc52a0c8059c5050b1","modified":1579616251000},{"_id":"themes/next/_config.yml","hash":"9317ddf5b8f92a93275a1e22c81b1f12f4203572","modified":1635957070173},{"_id":"source/_posts/algorithm_八皇后问题.md","hash":"afc3c614900f3cba30f28a7ed744cc7f50798a8b","modified":1635952982064},{"_id":"source/_posts/algorithm_Prim算法解决修路问题.md","hash":"caa1c626a91edb5010b20a30670dfb80444d3628","modified":1635953279549},{"_id":"source/_posts/algorithm_二分查找.md","hash":"986e80cb4090a53c79778ba6bbe814aa1fd39708","modified":1635953146532},{"_id":"source/_posts/algorithm_BF算法.md","hash":"9bf09389504406fc1d092a723ab6580452a7a7ec","modified":1635953269101},{"_id":"source/_posts/algorithm_分治算法实例一.md","hash":"4fac4459ecd94bfe91012ca67307f7ae4d2f3f9b","modified":1635953153073},{"_id":"source/_posts/algorithm_动态规划实例一.md","hash":"cb38dd15eef3cb960ead9553eeec6910ff77ddce","modified":1635953128930},{"_id":"source/_posts/algorithm_图，深度优先和广度优先算法.md","hash":"e4657b2da5e7c51f1a61d1f38445197791d52ba7","modified":1635953214210},{"_id":"source/_posts/algorithm_动态规划实例二.md","hash":"ee3ee4b8545c0941a441130caf178ddd133130fd","modified":1635953122798},{"_id":"source/_posts/algorithm_基数排序.md","hash":"d3a7e7a9c608a74574efd7cffb013409dac940ce","modified":1635953171797},{"_id":"source/_posts/algorithm_希尔排序.md","hash":"989c7929906ea5878620e9c4b4b7db7e29451cd5","modified":1635953220617},{"_id":"source/_posts/algorithm_快速排序算法.md","hash":"8aa0a8ab3deb927d3391c6ea4f58a6777d4ad042","modified":1635953189294},{"_id":"source/_posts/algorithm_堆排序.md","hash":"a667386ee8944022c57a668f1fe7ab4f5614acac","modified":1635953135450},{"_id":"source/_posts/algorithm_插值查找.md","hash":"79afd96b4f26f97503a65b7abdf5dc24d31d85b4","modified":1635953099893},{"_id":"source/_posts/algorithm_归并排序.md","hash":"9370da61b99907561aa3798a6c0c37a124ccf7f8","modified":1635953159288},{"_id":"source/_posts/algorithm_插入排序二.md","hash":"ed7b7f172c839e68dcbe40eb4aa29d3b1bddfdb4","modified":1635953093724},{"_id":"source/_posts/algorithm_数组模拟环形队列.md","hash":"449a7c0245d1055d7f0d49da21f838f6dd2b980f","modified":1635953195394},{"_id":"source/_posts/algorithm_桶排序.md","hash":"2e594f06c8a37990b2ebd31d056d50d8925c66e6","modified":1635953206953},{"_id":"source/_posts/algorithm_环形链表解决约瑟夫问题.md","hash":"686873053c99ff2fff462449b174bab5c2584fb9","modified":1635953165723},{"_id":"source/_posts/algorithm_插入排序.md","hash":"7a6734b7b9d06bb9e66dc5ff40cbbba7dff3f9d5","modified":1635953076791},{"_id":"source/_posts/algorithm_计数排序二.md","hash":"9affea9015b7d78390d4408b083795e61ddb4c4e","modified":1635953183156},{"_id":"source/_posts/algorithm_贪心算法实例一.md","hash":"30529bf813fb17c96b39677249f22b6069efd4c2","modified":1635953201321},{"_id":"source/_posts/algorithm_递增顺序查找树.md","hash":"4b4a149cd6332a4f9c4c7a6783afaf9ba0556512","modified":1635953116087},{"_id":"source/_posts/algorithm_选择排序.md","hash":"1706ef99b117d34c876d5a117625be3db457089b","modified":1635953226482},{"_id":"source/_posts/algorithm_递归回溯解决迷宫问题.md","hash":"7a843aad6daa1c4542ee7e67f7ba2e078458241a","modified":1635953108375},{"_id":"source/_posts/algorithm_计数排序.md","hash":"9d701bb5d7659a453a5730385547eeba17c6d4b0","modified":1635953177222},{"_id":"source/_posts/algorithm_队列之单链表形式.md","hash":"a25b1fa59d624f512a5065d91203bb7646d99b66","modified":1635953141121},{"_id":"source/_posts/centOS_配置静态IP.md","hash":"0fd161a0cdd20348e738e5141102c2e678ab6fc7","modified":1640792702375},{"_id":"source/_posts/keyboard_快捷键总结之vscode篇.md","hash":"dc2159799a7f4f156667081933a2e43bf65d9171","modified":1641303040321},{"_id":"source/_posts/computer_进程线程协程对比.md","hash":"36f41b90c6bddfa03491b4f3775dd682576d5431","modified":1637247968662},{"_id":"source/_posts/computer_TCP和UDP对比.md","hash":"509e6e0b8392101233c5315673794240972694b8","modified":1638233699047},{"_id":"source/_posts/keyboard_快捷键总结之浏览器篇.md","hash":"268b6f26404282f1460e52c34ec88e23b7e86b4d","modified":1641183537360},{"_id":"source/_posts/keyboard_快捷键总结之Mac常用篇.md","hash":"fe91ec8939a601863f14a316553b478e39ce3d85","modified":1640881733674},{"_id":"source/_posts/redis_缓存和数据库双写一致性问题.md","hash":"f360ba4715fa4dfa9350db011d6022a66e7872ed","modified":1636636967590},{"_id":"source/_posts/redis_缓存满了怎么办.md","hash":"a7a7cdbb062ac898fa1db55cbcb835fe594a3cb7","modified":1637713683404},{"_id":"source/_posts/redis_缓存雪崩.md","hash":"e1b99a0c24a37d977768b8da4894360389dd33d7","modified":1635953243241},{"_id":"source/_posts/web_Hexo.md","hash":"f25626eb666abea371fcbae8bd21eef38187de48","modified":1635953305950},{"_id":"source/categories/index.md","hash":"fc1ba24285b967055840b262aa9393c76fd5582d","modified":1635353476000},{"_id":"source/links/index.md","hash":"3a58142f44b066759b0ed60ea80484317a7ab753","modified":1635388886000},{"_id":"source/about/index.md","hash":"2f0a98edbf6b0570dcde1815b001e276c585d5a0","modified":1635409362714},{"_id":"source/tags/index.md","hash":"8d411b723363f63dfb2c402430759675e0ec49fa","modified":1635354057000},{"_id":"themes/next/.git.bak/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1579616251000},{"_id":"themes/next/.git.bak/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1579616224000},{"_id":"themes/next/.git.bak/config","hash":"7f8b507977a695e25b27d4c2e8aaed71410536bf","modified":1579616251000},{"_id":"themes/next/.git.bak/packed-refs","hash":"498fb61957e18af57a7060976a684b985f78e141","modified":1579616251000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1579616251000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"ccfa6aa32847ce5d1f8262d563da04cd0fda25dc","modified":1579616251000},{"_id":"themes/next/.git.bak/index","hash":"552360c7dc0c06b765cd1060f1fb0431c587977e","modified":1635410278620},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"f0f8ee38ebcf16122941d73b8fd23559fe39b9eb","modified":1579616251000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1579616251000},{"_id":"themes/next/.github/config.yml","hash":"d2f6c321fa0bff36b9c3c64e33ca6e4ccd186c50","modified":1579616251000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1579616251000},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1579616251000},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1579616251000},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1579616251000},{"_id":"themes/next/.github/stale.yml","hash":"b2b762645d3c3e373e0b2c861bf2ddf7f303c577","modified":1579616251000},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1579616251000},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1579616251000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"0b00116843669a162093591973f4099b50ba3f24","modified":1579616251000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5ace79ff1859d985339fdf6d74b779f60c91a27a","modified":1579616251000},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1579616251000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"f3f7ad28644b976fa513c1abd813f6ec66f0bff2","modified":1579616251000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1579616251000},{"_id":"themes/next/docs/MATH.md","hash":"6f6faf58f86b03b9344ef857ae34de97fc336590","modified":1579616251000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"356ada9837300bcdd1711321dabc309887e23730","modified":1579616251000},{"_id":"themes/next/languages/en.yml","hash":"388fb5186919ac20c493628fbaa5cc635780a7d4","modified":1579616251000},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1579616251000},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1579616251000},{"_id":"themes/next/languages/de.yml","hash":"c8fee1aae903fe3c2b6b052a8c2f04c844a1bb4f","modified":1579616251000},{"_id":"themes/next/languages/es.yml","hash":"e7d1533fe1b2f5946896348b7347c056e9558ef4","modified":1579616251000},{"_id":"themes/next/languages/fa.yml","hash":"662f08d076e9bbe7bc67901b56716760211259c5","modified":1579616251000},{"_id":"themes/next/languages/hu.yml","hash":"96e7f749e88a2dde315b1421f4a121b73c71cea6","modified":1579616251000},{"_id":"themes/next/languages/fr.yml","hash":"7175a8c3ba83befef9620dfd22e40bb1cfcb9c9e","modified":1579616251000},{"_id":"themes/next/languages/id.yml","hash":"21278ebca6994cda2e9761a89af574b7511f7b5f","modified":1579616251000},{"_id":"themes/next/languages/it.yml","hash":"1ac08187ba87d34c367eb72f30517f4d25839fb9","modified":1579616251000},{"_id":"themes/next/languages/ko.yml","hash":"f6cd61bedfab340a322cacea8d112311f3ecf584","modified":1579616251000},{"_id":"themes/next/languages/ja.yml","hash":"7d1e73011143437376d09093b2118ef010930fc1","modified":1579616251000},{"_id":"themes/next/languages/nl.yml","hash":"4b8a884271ed2a85391306c827ca56837bb9bcbe","modified":1579616251000},{"_id":"themes/next/languages/ru.yml","hash":"8b73c200342ba9c4fe96540aceb5afe8d709f53e","modified":1579616251000},{"_id":"themes/next/languages/pt-BR.yml","hash":"1f1b81d27753381257c0b958053a9d510b4e31df","modified":1579616251000},{"_id":"themes/next/languages/pt.yml","hash":"376f87ef8b5c798176aba7571ff0588e35f8c825","modified":1579616251000},{"_id":"themes/next/languages/tr.yml","hash":"cedbbf336959a927bd7710f12504db90b63c81e0","modified":1579616251000},{"_id":"themes/next/languages/vi.yml","hash":"ce6acf1049d93cc73f5f77df2e1070420b4c2435","modified":1579616251000},{"_id":"themes/next/languages/uk.yml","hash":"f02c673d48e597894f155d0b85fc75e6ed4d1d31","modified":1579616251000},{"_id":"themes/next/languages/zh-HK.yml","hash":"759ea4759cc76a97cfec350ac2ceb53447fff76c","modified":1579616251000},{"_id":"themes/next/languages/zh-TW.yml","hash":"995c94e5be02b909476c3c41c18e66af7c0db02c","modified":1579616251000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"1b548fff04d2f4481e6dfc71270e34cab4096771","modified":1635392635000},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1579616251000},{"_id":"themes/next/layout/_layout.swig","hash":"d672c71eb13a8e6ed5cd4721fc8b4aa7fea9cdde","modified":1579616251000},{"_id":"themes/next/layout/category.swig","hash":"9febc49ff6f476fd0261c75aecbc67cc24c11667","modified":1579616251000},{"_id":"themes/next/layout/index.swig","hash":"014202a6e316096f85f8c1489568d31212c5f1b2","modified":1579616251000},{"_id":"themes/next/layout/post.swig","hash":"d75078e7acd9ead60dee9bec05b2b4f60e121177","modified":1579616251000},{"_id":"themes/next/layout/page.swig","hash":"8322d902a8d870e6d0b0bc25750141c51749bf8b","modified":1579616251000},{"_id":"themes/next/layout/tag.swig","hash":"eedd3a19aa5222184ea6ee628fa46dfa0654ece8","modified":1579616251000},{"_id":"themes/next/layout/archive.swig","hash":"607d27c867a35dee55b4b49baae366a63f418688","modified":1579616251000},{"_id":"themes/next/.git.bak/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1579616224000},{"_id":"themes/next/.git.bak/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1579616224000},{"_id":"themes/next/.git.bak/logs/HEAD","hash":"e0838c79abe1f5adca1b0193f7e2101ed8c156d7","modified":1579616251000},{"_id":"themes/next/.git.bak/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1579616224000},{"_id":"themes/next/.git.bak/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1579616224000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"474a00d9cdb3bd9e8cfb0578aa45f1ae222a98a9","modified":1579616251000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"51997fd06bb9dd4904421c66f651c0cf22a9fd78","modified":1579616251000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"12a2bc8c3f6c68f0517971167d2da37c66555fef","modified":1579616251000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"3a9c971a5afaf92dbfb78579e3be8ac44b5d2dae","modified":1579616251000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1579616251000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1579616251000},{"_id":"themes/next/docs/ru/README.md","hash":"3a1ee172d10547d235ff28e8d3599504663bd53b","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"fcbe8e8d7ad39028936ba341f4154e4f9234d8b2","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"2897d970d90f299818b9c1492741724883edd60f","modified":1579616251000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"510cfd27e37e3a611649a3d1a84cc52fd4da5936","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"a23e9466edb1b5fed54d86a353ebb490967b5cc4","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"db6c6b5af8423c8134ed1cc689f61a10bdb240f0","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b1fddd9a1561ad5d2dee882ce2d229b2aa8b4684","modified":1579616251000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"801da9bbe7122423994d8601fc62ad184a8ce9ed","modified":1579616251000},{"_id":"themes/next/scripts/events/index.js","hash":"d263d0814d65ec38eec56ae004b6506533bd936d","modified":1579616251000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1579616251000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1579616251000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b1d33e92b2baaf83ebd3985e42ad767c1a0565c1","modified":1579616251000},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1579616251000},{"_id":"themes/next/scripts/filters/post.js","hash":"fcf1217ded1be1c9cabf0909c6a938ab546cbad2","modified":1579616251000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"a4031bea9d7fd0a25a37e1204733e392e67f8749","modified":1579616251000},{"_id":"themes/next/scripts/helpers/font.js","hash":"20317a314d2283e4f87c8c8d247422f33427ebbe","modified":1579616251000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"301c8061c17aa3394b726dc8f6a2863c176a03a6","modified":1579616251000},{"_id":"themes/next/scripts/tags/button.js","hash":"39156bf735c1d1ebd0d418c411f14ff4f0acdd75","modified":1579616251000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"6fbc5764dddca114667f1487120a9ed32519857b","modified":1579616251000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1579616251000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1579616251000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1579616251000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1579616251000},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1579616251000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1579616251000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1579616251000},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1579616251000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"ed7b2574d1fa57611dc887124a4df273b8d3d71c","modified":1579616251000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"fc6e2d193fea16d1cf7cd5c83b2c294491d19d31","modified":1579616251000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"db25de9ceaa1ec5650ff15cf4aee4399ed8f9c42","modified":1579616251000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1579616251000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"be603e35bea3431b133fcd4b9626993dcfb85c06","modified":1579616251000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f4c4b687341dc14bbc3afcdc80bc04ee0fb8699c","modified":1579616251000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1579616251000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1579616251000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1579616251000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"43f2eda9ebb620dc32194d434c35dc8c19bdc762","modified":1579616251000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1579616251000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1579616251000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"bd9ba0bf60cc3008ee14339fa395ee6af188e879","modified":1579616251000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"206644ff2c769226a58a9039eda9206302460626","modified":1579616251000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1579616251000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"fef4bfec70cb877c23c7a6b096d35b1579d0e2b2","modified":1579616251000},{"_id":"themes/next/source/css/main.styl","hash":"ee7c731c03d724827d9324d08be701c9d2f04c60","modified":1579616251000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1579616251000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1579616251000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1579616251000},{"_id":"themes/next/source/images/blog.png","hash":"485507ce621faefe74caa75a8df20195cedffb4f","modified":1635345581000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1579616251000},{"_id":"themes/next/source/images/avatar-2021.jpeg","hash":"15323661df36d50a7b391bd0ae5e5238d13becb6","modified":1635389297000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1579616251000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1579616251000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1579616251000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1579616251000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1579616251000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1579616251000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1579616251000},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1579616251000},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1579616251000},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1579616251000},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1579616251000},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1579616251000},{"_id":"themes/next/source/js/algolia-search.js","hash":"f632ff7a404ac4fb04313bc554815406ebcb2a0b","modified":1579616251000},{"_id":"themes/next/source/js/bookmark.js","hash":"2268bfcab8cf9019e590e2d356b08a3d4a0cf791","modified":1579616251000},{"_id":"themes/next/source/js/local-search.js","hash":"1623d2be3c0cd7114ed89762c70367eb48d0587e","modified":1579616251000},{"_id":"themes/next/source/js/motion.js","hash":"5729d1ec6617ee4ee091a60a3bf843879b207a37","modified":1579616251000},{"_id":"themes/next/source/js/next-boot.js","hash":"81454487703958e2ce06965fd3879c1d859b6f36","modified":1579616251000},{"_id":"themes/next/source/js/utils.js","hash":"067a0407f614d0fb6efe8afb55c54fe6606cf49e","modified":1579616251000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579616251000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1579616251000},{"_id":"themes/next/.git.bak/refs/heads/master","hash":"cda4214c24e89e7617968634072fe56e0574cccf","modified":1579616251000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"913154f487b0e49c5a7fb0f462ec7fa4c90e87cb","modified":1579616251000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1579616251000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1579616251000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"d002c9eea7e7dd31b64a4172012d4294489974d5","modified":1579616251000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"31a6c8fbdfa16112b0b099727437b9df7641d421","modified":1579616251000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1579616251000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"a7a768edc8f9c739c0b4f799ae0e78e3270830f7","modified":1579616251000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1579616251000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1579616251000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1579616251000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"dd6c95d27e5846cb785909bc86228f376aedff45","modified":1579616251000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"aa03613a0474dcaaf96ee2d9e644bcad9add13a7","modified":1579616251000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"94edc28022325ba21b4e23bb13e1fac337223adc","modified":1579616251000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"36d64a542b709490489c8c61269216f47241793a","modified":1579616251000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"c75eb3039f91076a2971fa0e027707b8e0779f35","modified":1579616251000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"6535777dc8ca267a12339235d89dfc79364d4b71","modified":1579616251000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"34a845987f536ffed8d6a9efc46306c26f84e3d7","modified":1579616251000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"2c8f6fa26ffa7ffb7c18bbc2832b79eac298128a","modified":1579616251000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1579616251000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"b3b4ffcbda422d7fc21ee43fec7d2a5056b2f381","modified":1579616251000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1579616251000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"5fd5ba53962aefccb43b1d2b306a534add2373e1","modified":1579616251000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"e0bc42c0918bd411f3eebd42e5e22383170db1c6","modified":1579616251000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1579616251000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f1107c28661370e10e1940bff856f22f14f08518","modified":1579616251000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"98453ac4a520b2600181fc0331f0067125d0ed4f","modified":1579616251000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"f9017a2deb2f262912476e94822081bb10ee43af","modified":1579616251000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"1c8cd2ba261ac47b8e5e470309a5afb661318ff5","modified":1579616251000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"d0f18a88fb33b3341c0f5c81d7905deef934b9c2","modified":1579616251000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1579616251000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1579616251000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1579616251000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1579616251000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1579616251000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1579616251000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1579616251000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1579616251000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1579616251000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1579616251000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"e8aa0ba146b658ae3b73efc4ca63325886bbaa2d","modified":1579616251000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1579616251000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d67369b3216ab63b5596a867fde209232afe9408","modified":1579616251000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1579616251000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c608507fa2f6a0994764336383e394c31219b1f2","modified":1579616251000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1d6f87818ebedc3a1af691e33ab50b84dee74646","modified":1579616251000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1579616251000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1579616251000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1a8bdd6fa16f609872c8f92b546e29a16031b1f5","modified":1579616251000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"35fb1f6438111451ccfbb8ba4a6a8424259c0149","modified":1579616251000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1579616251000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1579616251000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1579616251000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"5b5618c2f6ad1d7971e6db257222fce89aa56565","modified":1579616251000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"15942931806bea463225c87aa3c8fb64a1073da9","modified":1579616251000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"db17f093ecf23e960a32af661c6b9a0651281a6b","modified":1579616251000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"e742d3064862c0513a2b884b3d4f1c1a2b9d35b2","modified":1579616251000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1579616251000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"42e7beed8c7583e0c0612692eebfa5743cc4d006","modified":1579616251000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1619130f81e091bb9ac43f93814f594dd1739255","modified":1579616251000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"a0e0628fc958dfe794e2c073301f7c2ba00e20f1","modified":1579616251000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"b58ed9dabc5be0090647d9a0afc43359e1e0e14c","modified":1579616251000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f6517f04ee9c8d93d1667c5617116f03ce1942a2","modified":1579616251000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5832f04fab4e4224bca6dc31a3d94da034a20861","modified":1579616251000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1ff4303ad83f96b152be571d4df07969199d5930","modified":1579616251000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"0bccf86c88e4d27b41f75bf166e66480c7bf919c","modified":1579616251000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"7d407136d23a61dd14410553932b75cbaf3f5bdf","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1579616251000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"c6a58c17807f3a1569e520b45521ad6b60229950","modified":1579616251000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1579616251000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"83d429e693e4b81c08d374fb87f303219efe5af9","modified":1579616251000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1579616251000},{"_id":"themes/next/source/images/只读缓存.png","hash":"a106e4749dfb3d0bbd752cc6c94733c572c9b5aa","modified":1635955378038},{"_id":"themes/next/.git.bak/logs/refs/heads/master","hash":"e0838c79abe1f5adca1b0193f7e2101ed8c156d7","modified":1579616251000},{"_id":"themes/next/.git.bak/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"6f15953b53774126c0bf829dcff351f096c65ba8","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bf86c81c57db3ed8fbb67df44fc2c0a79cd6ffd6","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"672866ede12bc2dd0835858f2697703fbc9dacb2","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"4052c6c598a9dc443ffac171cc6cb31e981c5e5d","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"daf188e77bd9d9fcff74c5659e875ebdd2010f08","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"ca1da6314c123f1bf0a95feefb073f08bb8c256a","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"78406dfb644b0e516f697aead3ed5d545c5b8144","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"5c27faaaf5a201d1c41c08ad5bfe1757a894fd69","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"5772ee6cdc50a9e1a4425d79114d46065babe217","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"59c6e4e222cbee13a53f2d73ba16953af2cda82d","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"20a720aefaee16b91ac94022551321492c8c525d","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"335e587a783c875f7768edeb02e325f9ce7e164d","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a8346f78d69ad108c31dd858a1e934d5107c43e1","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5ae9f601b4c85afe33c5fe338b371b507d6f351c","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"7199707befa5469f2a3fb18ca49c2e0ff2c62ee0","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"68f4854a327a51c2092c6d605ed195dfaf413823","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"9a7d7502ce394ddeba1773f90bbe19016b0cf0f6","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"8273ab4d88d7f9b5c2d558570cba84a51d15ab35","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"a9409c56cd54327a5c95b5c8923439d082694182","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"55a1e7deda42cb3318d1e19b904c9c91891659f3","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"94e6b2b33c942f1a32a4e412de1f6d7f5ae24a4c","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f8aba268e35f2279ee5d16d0f95b1944604ac813","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"111766f2494ae2b7d6f432c9eb3bda4793e47f9a","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"48b876f0942618a734eb1debf4a01e01745ce099","modified":1579616251000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1579616251000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1579616251000},{"_id":"themes/next/.git.bak/logs/refs/remotes/origin/HEAD","hash":"e0838c79abe1f5adca1b0193f7e2101ed8c156d7","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"a22c639cdf1073c9d060af62233125991ddf4dd5","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"686c780e6a483a2e494d9aab682803666ef63b3b","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"38079c4d45cdaa869718ec2eacde15e991f095c7","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"37701d40233a587401bcfc5ede056d8d1a8ba006","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"724ca213d15ae27158c2cddf9c26d3dba3582283","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"2bfe115c2fc68f4dfce4afc4a001a2db81edd83b","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"ebf85cfe2d8536e0867ceea4e31f2d52a7bd7728","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a98bbc014a55962e9c0f2d8b5af5e274d2fdd698","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"82a275ca74086a46b8e82d5ebf78c7a807cd9c8b","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e32d7654972c61979999b7bca3e85a603ab2a2f7","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"7fed3ce2a5fba7a816d55dfb0ad5fb22069c0a7e","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"296ce792c7e506b2c4b6dc234fa9591bb32a1081","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"f7977cfacaca9db6fab4d154486ad57ec4b0fde9","modified":1579616251000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0bd0f4a28b3362898f4d9061b307b12bd128f6b0","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"459a39c54e4a16db287f390160fc06a829d64160","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3e6287e2241eac9a4090b452cd270c37dc240ed2","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"de55bc28b9ecbc5fb66a177c2db735223e04e54c","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"4f60b754b1286ade81e2d92a0f6e04af203729d3","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"00b2055f170e54267321d27118e0a7f07d10890b","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"bfbb2b8dfceb79c5adcc31338f9cc8efdd3c1bc6","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"0812ae7ecd1d8c60ec4290f506ec10881ed0fca8","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"b477e45e948c0016a78cc79290151655d248a7bd","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5aa757f72e7495e93b528c64176d92f212af4be9","modified":1579616251000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"a782cd5ceee062fdfb91a9732017d19672973784","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"156f6c3d6b51bd573c3c50b04440555cc68fd28d","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"091331f7ef970f291f085453e470639aa1010be8","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"77d4f332cf805aa7d294346c99e2d72afe2e82a4","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"8c318a485c56dbdcdb22fd00781484ecc151bf8a","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"d1b26ec30cd0eb84738ea6ce927fd82b35c094c3","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"c9337e837f10c5f40c27a0c0a012f39dfadc7572","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1579616251000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"0a7a107936250d70268db4a19276667440e91ada","modified":1579616251000},{"_id":"themes/next/.git.bak/objects/pack/pack-2e617d8bdd3290a743f80be6a552c92beb044ecf.idx","hash":"24f9ec7ea0d6dafb5b78e5f4731e0f7912be5fe1","modified":1579616250000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1579616251000},{"_id":"themes/next/.git.bak/objects/pack/pack-2e617d8bdd3290a743f80be6a552c92beb044ecf.pack","hash":"7723db588eb83c7ad1509002fcd3623a257f989c","modified":1579616250000},{"_id":"public/search.xml","hash":"1f6cdebd08b9c6883dd6ffeeb75a9289d1da683a","modified":1641912397629},{"_id":"public/categories/index.html","hash":"8b41ab64b76a75753c4c4df2c9964e0f5325f3c2","modified":1641912233912},{"_id":"public/tags/index.html","hash":"88e48cdd8cd8f8742990507fc6587d36e1d92b69","modified":1641912233912},{"_id":"public/about/index.html","hash":"5d5323ce344f99fbb7fa2a1d60aaacbef3a47151","modified":1641912233912},{"_id":"public/2021/12/29/centOS_配置静态IP/index.html","hash":"4abf27e8bec4ab2bd43b81266af9f273f938479b","modified":1641912233912},{"_id":"public/2021/10/28/web_Hexo/index.html","hash":"15c5a9d75d88f1b933afc190887e77e3cb9aaab4","modified":1641912233912},{"_id":"public/2020/04/03/algorithm_计数排序/index.html","hash":"1976fd25e035c299b464cc71cb784a9c6dcda587","modified":1641912233912},{"_id":"public/categories/algorithm/page/3/index.html","hash":"0e7ff2a6bfd8d6c1298c50a8b1151a42b4e3e12e","modified":1641912233912},{"_id":"public/categories/CentOS/index.html","hash":"216c5d35c5f64d1820101984c7aa994a4728b60d","modified":1641912233912},{"_id":"public/categories/skill/index.html","hash":"5e5580780243510e608733c72a44a433c4ee5baf","modified":1641912233912},{"_id":"public/categories/computer/index.html","hash":"e9387eea240ed95284980c6e51bf39337c3a6432","modified":1641912233912},{"_id":"public/categories/redis/index.html","hash":"fe6767d6808e4b09fab2521bc0540c96ed73dc63","modified":1641912233912},{"_id":"public/categories/web/index.html","hash":"673c5ebcdf410ec3e403841c18836e89c0226ace","modified":1641912233912},{"_id":"public/archives/page/4/index.html","hash":"d69569a115d1fd7520fc55068b1cf6ce5d0881f4","modified":1641912233912},{"_id":"public/archives/2020/03/index.html","hash":"77d5e725ed491558fecdcc3c5cc2b22bbd12d2c1","modified":1641912233912},{"_id":"public/archives/2020/page/3/index.html","hash":"1744ad15345c0c9f6ffdd864fd8b564d874c2835","modified":1641912233912},{"_id":"public/archives/2020/04/page/2/index.html","hash":"fa1413d54e42e0bf88b78b77815f97a60a55a3b3","modified":1641912233912},{"_id":"public/archives/2021/index.html","hash":"82d157c6f383f3c2b9cc00bfe429240d9e003243","modified":1641912233912},{"_id":"public/archives/2021/10/index.html","hash":"0f1cdcf44e87322b6e2aeb274005f68ba618973b","modified":1641912233912},{"_id":"public/archives/2021/11/index.html","hash":"33786980fb7c9a32b3ec660e917811f438f1301e","modified":1641912233912},{"_id":"public/archives/2021/12/index.html","hash":"5f71f407129c2879e765711cf2b949e9c36f44b5","modified":1641912233912},{"_id":"public/archives/2022/01/index.html","hash":"c04da002559523093d21bcba031f2dd42b43b4e2","modified":1641912233912},{"_id":"public/archives/2022/index.html","hash":"36fe12d043d3d5fb5f6fdc6cd6571775feec26ae","modified":1641912233912},{"_id":"public/page/8/index.html","hash":"2c5cf7b14c79c7c97e53b4d7eefb97be877941c0","modified":1641912233912},{"_id":"public/tags/java/page/3/index.html","hash":"9c8da317b7556ff55912e70b289ff098fc0db81b","modified":1641912233912},{"_id":"public/tags/algorithm/page/3/index.html","hash":"56bf24d13f520a32afee568094b683b05b198640","modified":1641912233912},{"_id":"public/tags/php/index.html","hash":"e7f9562bda0a7d2517e430fec689ee233cf5da87","modified":1641912233912},{"_id":"public/tags/CentOS/index.html","hash":"ce224b9547be66f75ee69d7c5d2f44e042bc48e2","modified":1641912233912},{"_id":"public/tags/network/index.html","hash":"f3b43b2bd7b8722284eaa76dca8312716b9cdde6","modified":1641912233912},{"_id":"public/tags/skill/index.html","hash":"af6d1e4392732695ea390c787e76f596240db362","modified":1641912233912},{"_id":"public/tags/keyboard/index.html","hash":"3bc0f4424a6a48da58a8fe93855813acbd907b27","modified":1641912233912},{"_id":"public/tags/vscode/index.html","hash":"8b0b7017037736548f765f2e4d7b443ab349174a","modified":1641912233912},{"_id":"public/tags/computer/index.html","hash":"45a2a57f357a52749bbc95bf3f855b1653c214cd","modified":1641912233912},{"_id":"public/tags/tcp/index.html","hash":"d30e3b6fe3f3ce6ec73089647b8f1e6210cc1494","modified":1641912233912},{"_id":"public/tags/udp/index.html","hash":"31460c81c7b583ebb4186475c6839a87ff823573","modified":1641912233912},{"_id":"public/tags/Google/index.html","hash":"2f21779eab62e4d8614e0849cc63fde448db1530","modified":1641912233912},{"_id":"public/tags/Mac/index.html","hash":"b3ee740a339ee4fb9b91bf2d1a8e1fee2d4afffb","modified":1641912233912},{"_id":"public/tags/redis/index.html","hash":"41d99fa995165a386a5805e5618f89ddafe2afcb","modified":1641912233912},{"_id":"public/tags/mysql/index.html","hash":"75bc85c178cefd327cff79a12e1d1e34835563f4","modified":1641912233912},{"_id":"public/tags/hexo/index.html","hash":"dd02a8307a8c5a43e9e28eba99297c427b9b6719","modified":1641912233912},{"_id":"public/tags/nodejs/index.html","hash":"b8563ff69e64a8ee97e6d26d885a78964af15eff","modified":1641912233912},{"_id":"public/links/index.html","hash":"717924b9a7edf71212dd5d6daa14700411d5cabf","modified":1641912233912},{"_id":"public/2022/01/02/keyboard_快捷键总结之vscode篇/index.html","hash":"d8ce0dfd06933c99c35deb31de7a16932a25104f","modified":1641912233912},{"_id":"public/2021/12/29/keyboard_快捷键总结之浏览器篇/index.html","hash":"5bd24d7c653811c8011c2f2e7b0cb4baaec91fc2","modified":1641912233912},{"_id":"public/2021/12/27/keyboard_快捷键总结之Mac常用篇/index.html","hash":"d4b9e1a767a0e6a27b335cac88d415baa8afda2f","modified":1641912233912},{"_id":"public/2021/11/14/redis_缓存满了怎么办/index.html","hash":"8826b32a7c6159f19649d6f9ddaa980fadebe408","modified":1641912233912},{"_id":"public/2021/11/11/computer_进程线程协程对比/index.html","hash":"d07e928d8937cf7b678a68bbe99661ae0a2edcea","modified":1641912233912},{"_id":"public/2021/11/11/computer_TCP和UDP对比/index.html","hash":"ef6be7b3e6ba9bc17af03c51a96a95bbc0966654","modified":1641912233912},{"_id":"public/2021/11/02/redis_缓存雪崩/index.html","hash":"1eccb282862c74a2094acf40ed4807d28f422b83","modified":1641912233912},{"_id":"public/2021/11/03/redis_缓存和数据库双写一致性问题/index.html","hash":"0d623f0d7b883c501133fa5fc94455aa0263b6ce","modified":1641912233912},{"_id":"public/2020/04/20/algorithm_Prim算法解决修路问题/index.html","hash":"1cd281d8912af13caade18645bf991f1dd172b33","modified":1641912233912},{"_id":"public/2020/04/19/algorithm_BF算法/index.html","hash":"24331250c18069666f986af4d8f39989ce541a26","modified":1641912233912},{"_id":"public/2020/04/18/algorithm_选择排序/index.html","hash":"c1bf6e312af72d7a408fb305f7edca625666ca55","modified":1641912233912},{"_id":"public/2020/04/17/algorithm_桶排序/index.html","hash":"74454ffb5bbd05a579ca77b7b68422530546f3f8","modified":1641912233912},{"_id":"public/2020/04/16/algorithm_环形链表解决约瑟夫问题/index.html","hash":"7db9014fe97d7a7358d33611f6dbef789fefdd80","modified":1641912233912},{"_id":"public/2020/04/15/algorithm_归并排序/index.html","hash":"48b45c2d2c97ad55a1d7bbd27c1a1ae207cd5c8b","modified":1641912233912},{"_id":"public/2020/04/14/algorithm_分治算法实例一/index.html","hash":"71a33fb097f9bb57dd61ab7e26c5f73c95833ac1","modified":1641912233912},{"_id":"public/2020/04/12/algorithm_队列之单链表形式/index.html","hash":"5b4331e4b66945035efd3c3c1a59fe92f5d60bda","modified":1641912233912},{"_id":"public/2020/04/13/algorithm_二分查找/index.html","hash":"02edb6913a061d56e2b624d8b51aea9d7dc83ec2","modified":1641912233912},{"_id":"public/2020/04/11/algorithm_堆排序/index.html","hash":"47d1ccb2a86a2d185783e9a891429100bf51fe3a","modified":1641912233912},{"_id":"public/2020/04/09/algorithm_动态规划实例一/index.html","hash":"cbd46a1ca997f3c433e2b7b049fc3984c13cf280","modified":1641912233912},{"_id":"public/2020/04/08/algorithm_动态规划实例二/index.html","hash":"426b4cd8bd78d6479175c7486e97d44e06896dc5","modified":1641912233912},{"_id":"public/2020/04/07/algorithm_递增顺序查找树/index.html","hash":"7cf2ea48c1e3abbb30e21d8659b966733311235b","modified":1641912233912},{"_id":"public/2020/04/06/algorithm_递归回溯解决迷宫问题/index.html","hash":"679a3ade3bba0ee2dc063b8c4e8c58cba93af484","modified":1641912233912},{"_id":"public/2020/04/05/algorithm_插值查找/index.html","hash":"ce6f871a61326cc7c7baa74ee405d6eca93d7498","modified":1641912233912},{"_id":"public/2020/04/04/algorithm_基数排序/index.html","hash":"3f7684b3b2bff0203d83cbfb04118b187bff25ad","modified":1641912233912},{"_id":"public/2020/04/04/algorithm_插入排序二/index.html","hash":"f774017e163afc56f20016b4a780552c5d4e0ea7","modified":1641912233912},{"_id":"public/2020/03/27/algorithm_计数排序二/index.html","hash":"a0853878371dc3a7e644398e8407d5a3e51ed215","modified":1641912233912},{"_id":"public/2020/03/26/algorithm_快速排序算法/index.html","hash":"1d90c79ce93f1cae845714073c2ce94cc8d9e2e8","modified":1641912233912},{"_id":"public/2020/03/25/algorithm_数组模拟环形队列/index.html","hash":"6857024781c3bc77d32ad21e21c13ca469604008","modified":1641912233912},{"_id":"public/2020/03/24/algorithm_贪心算法实例一/index.html","hash":"76b5a24dd9c112bcb6d7a8200cf0fe828a9ddf2d","modified":1641912233912},{"_id":"public/2020/03/22/algorithm_图，深度优先和广度优先算法/index.html","hash":"b651cac6e1f039371f8cc6c1a8dafd76d9eb070f","modified":1641912233912},{"_id":"public/2020/03/21/algorithm_希尔排序/index.html","hash":"e899bbe1dd31d257f7c513d250d65c246185cd9a","modified":1641912233912},{"_id":"public/2020/03/20/algorithm_插入排序/index.html","hash":"27e244e2517fa0717115ef865478a789a313a636","modified":1641912233912},{"_id":"public/2020/03/19/algorithm_八皇后问题/index.html","hash":"01cd2fad5cbd5fd1a4bd59ab818051d20f9c330f","modified":1641912233912},{"_id":"public/categories/algorithm/index.html","hash":"91c4820a83a3ef79079c90b6a77f2e48b0a3f0ec","modified":1641912233912},{"_id":"public/categories/algorithm/page/2/index.html","hash":"3b7c8bc2a933c2054f3d3b0fd1f39305ec15a448","modified":1641912233912},{"_id":"public/archives/index.html","hash":"b426286f67eb81ed7c17e1825a94bdb496a0d890","modified":1641912233912},{"_id":"public/archives/page/3/index.html","hash":"19f3db05ead0da4d4fcfcd881707996138d7ba07","modified":1641912233912},{"_id":"public/archives/page/2/index.html","hash":"04b64f7e5be3e4ec57eac74bc7e1686b5a1f46b1","modified":1641912233912},{"_id":"public/archives/2020/index.html","hash":"57ef7ebad29a840fb484ad0c4f4ae51c056ccac5","modified":1641912233912},{"_id":"public/archives/2020/page/2/index.html","hash":"b55f75f575577a236562194235cf62355faf8691","modified":1641912233912},{"_id":"public/archives/2020/04/index.html","hash":"cf807dc5d436f34735ba386eb20187a096e90205","modified":1641912233912},{"_id":"public/index.html","hash":"2927853bdf0551d1ac24ab7e01fded4bb2ebf754","modified":1641912397629},{"_id":"public/page/3/index.html","hash":"a5ecf810eacf1919c847989032696bcb0e83b1d8","modified":1641912233912},{"_id":"public/page/4/index.html","hash":"20bb51b3711c968f33b4552cea8cca83f6063121","modified":1641912233912},{"_id":"public/page/2/index.html","hash":"b6bb1110ac6a06a1068761a3bcac323fb2e3763b","modified":1641912233912},{"_id":"public/page/5/index.html","hash":"96f929332056382307f7c23a7851e2cc88e44d7e","modified":1641912233912},{"_id":"public/page/6/index.html","hash":"38bb4029d8a11e4a760aa7c5b5e2a3f11b73537f","modified":1641912233912},{"_id":"public/page/7/index.html","hash":"aab2355f38c3eb2d36031e8a243c807d922da40c","modified":1641912233912},{"_id":"public/tags/java/index.html","hash":"93e10c06ec09f3966fff330eb9fa61634a2db6bf","modified":1641912233912},{"_id":"public/tags/java/page/2/index.html","hash":"3dfc880ebfc0c26aeee5af103f4f0ca62bffc25b","modified":1641912233912},{"_id":"public/tags/algorithm/index.html","hash":"fb915df9782f2093e1806bbfea04afec8a4bf024","modified":1641912233912},{"_id":"public/tags/algorithm/page/2/index.html","hash":"d91ecbc1e1e39d6856a134d9ff86b5aef4efd494","modified":1641912233912},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1641181546074},{"_id":"public/images/blog.png","hash":"485507ce621faefe74caa75a8df20195cedffb4f","modified":1641181546074},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1641181546074},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1641181546074},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1641181546074},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1641181546074},{"_id":"public/images/avatar-2021.jpeg","hash":"15323661df36d50a7b391bd0ae5e5238d13becb6","modified":1641181546074},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1641181546074},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1641181546074},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1641181546074},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1641181546074},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1641181546074},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1641181546074},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1641181546074},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1641181546074},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1641181546074},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1641181546074},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1641181546074},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1641181546074},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1641181546074},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1641181546074},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1641181546074},{"_id":"public/js/local-search.js","hash":"9f3d3ddff86e7b2828772aba915a5ebfd7d9f55f","modified":1641181546074},{"_id":"public/js/motion.js","hash":"26c6170bc861f33030084e15f9bd31e7e9050b0e","modified":1641181546074},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1641181546074},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1641181546074},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1641181546074},{"_id":"public/js/utils.js","hash":"6ef79d54e71d7ddbb2e7ffa5aa9bbd28c543c835","modified":1641181546074},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1641181546074},{"_id":"public/js/schemes/muse.js","hash":"ae2a2502b77203e83f75a040c43e86a7ecb4873c","modified":1641181546074},{"_id":"public/js/schemes/pisces.js","hash":"f068b46f8c305c7436c2767492a6bed42dcd764c","modified":1641181546074},{"_id":"public/css/main.css","hash":"bca847e4a1fc430036b5f6a791b850d59fb79b85","modified":1641181546074},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1641181546074},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1641181546074},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1641181546074},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1641181546074},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1641181546074},{"_id":"public/images/只读缓存.png","hash":"a106e4749dfb3d0bbd752cc6c94733c572c9b5aa","modified":1641181546074},{"_id":"source/_posts/superset_安装使用.md","hash":"a85b81d951f59b0552a41bbdf6a94726053e29ea","modified":1641479105598},{"_id":"public/tags/superset/index.html","hash":"e0ea18ca8bff0da20a11e35b752c42c883bb6083","modified":1641912233912},{"_id":"public/tags/bi/index.html","hash":"cb1ce4d9a72ef1bfdef77937f04158e08f317ca8","modified":1641912233912},{"_id":"public/2022/01/06/superset_安装使用/index.html","hash":"12461460b762fbeb6833c92ed80dbdd9d5c61566","modified":1641912233912},{"_id":"source/_posts/errorlog_202112.md","hash":"447ee109698ef331ad04be99c7b8c1fb0c8cf423","modified":1641912389463},{"_id":"public/categories/error/index.html","hash":"a03af6ade770b947e2e0e27b8133cd5abb2bfa3c","modified":1641912233912},{"_id":"public/tags/error/index.html","hash":"371568a088b378481801b053d5a423e90d5abc23","modified":1641912233912},{"_id":"public/2022/01/11/errorlog_202112/index.html","hash":"adc608d927ef65a85fbca630d297c768fb095314","modified":1641912397629}],"Category":[{"name":"algorithm","_id":"ckxy549vl00040w8n1yfd5ftw"},{"name":"CentOS","_id":"ckxy549wg002e0w8n8fg1azo2"},{"name":"skill","_id":"ckxy549wj002o0w8n9hv283qo"},{"name":"computer","_id":"ckxy549wk002x0w8nbrq3dwd1"},{"name":"redis","_id":"ckxy549wo003f0w8n34ah661g"},{"name":"web","_id":"ckxy549wq003u0w8nedgeayny"},{"name":"error","_id":"ckya85gfd0001uzs65oqbhefw"}],"Data":[],"Page":[{"title":"文章分类","date":"2021-10-27T16:50:29.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2021-10-28 00:50:29\ntype: \"categories\"\n---\n","updated":"2021-10-27T16:51:16.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckxy549vi00010w8n8bkb6oaj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2021-10-27T15:29:46.000Z","type":"links","_content":"\n<div class=\"post-body\" style=\"opacity: 1; display: block; transform: translateY(0px);\">\n<div id=\"links\">\n<style>.links-content{margin-top:1rem}.link-navigation::after{content:\" \";display:block;clear:both}.card{width:45%;font-size:1rem;padding:10px 20px;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:flex}@media (max-width:1400px){.card{width:40%!important}}.card:nth-child(odd){float:left}.card:nth-child(even){float:right}.card:hover{transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)}.card a{border:none}.card .ava{width:3rem!important;height:3rem!important;margin:0!important;margin-right:1em!important;border-radius:4px}.card .card-header{font-style:italic;overflow:hidden;width:100%}.card .card-header a{font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none}.card .card-header a:hover{color:#d480aa;text-decoration:none}.card .card-header .info{font-style:normal;color:#a3a3a3;font-size:14px;min-width:0;overflow:hidden;white-space:nowrap}span.focus-links{font-style:normal;margin-left:10px;position:unset;left:0;padding:0 7px 0 5px;font-size:11px;border-color:#42c02e;border-radius:40px;line-height:24px;height:22px;color:#fff!important;background-color:#42c02e;display:inline-block}span.focus-links:hover{background-color:#318024}.friends-btn{text-align:center;color:#555!important;background-color:#fff;border-radius:3px;font-size:15px;box-shadow:inset 0 0 10px 0 rgba(0,0,0,.35);border:none!important;transition-property:unset;padding:0 15px;margin:inherit}.friends-btn:hover{color:#fff!important;border-radius:3px;font-size:15px;box-shadow:inset 0 0 10px 0 rgba(0,0,0,.35);background-image:linear-gradient(90deg,#a166ab 0,#ef4e7b 25%,#f37055 50%,#ef4e7b 75%,#a166ab 100%);margin:inherit}\n.post-body .note.success {\n    background: #eff8f0;\n    border-left-color: #5cb85c;\n}\n.post-body .note {\n    border-radius: 3px;\n    margin-bottom: 20px;\n    padding: 1em;\n    position: relative;\n    background: #f9f9f9;\n    border: initial;\n    border-left: 3px solid #eee;\n}\n.note.success {\n    background: #eff8f0;\n    border-left-color: #5cb85c;\n}\n</style>\n<div class=\"links-content\">\n    <div class=\"link-navigation\">\n    <div class=\"note success\">\n    三人行，必有我师焉。——《论语》\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://avatars.githubusercontent.com/u/396972?v=4\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://github.com/xushiwei\" target=\"_blank\">许式伟</a>\n        <a href=\"https://github.com/xushiwei\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🍀 连接数据，重塑价值。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://coolshell.cn/wp-content/uploads/2011/03/me.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://coolshell.cn/\" target=\"_blank\">陈皓 - 左耳朵耗子</a>\n        <a href=\"https://coolshell.cn/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🌲 享受编程和技术所带来的快乐。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://www.laruence.com/images/logo.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://www.laruence.com/\" target=\"_blank\">惠新宸 - 鸟哥</a>\n        <a href=\"https://www.laruence.com/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🍂 左手代码右手诗。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\">\n    <img class=\"ava\" src=\"https://inotes.oss-cn-beijing.aliyuncs.com/common/201812/avatar.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://imajinyun.xyz/\" target=\"_blank\">Jinyun</a>\n        <a href=\"https://imajinyun.xyz/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🌻 进一寸自有一寸的欢喜。\n    </div>\n    </div>\n    </div>\n    </div>\n</div>\n</div>\n<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">var randnum=function(n){return Math.round(Math.random()*n)},hexify=function(n){return(\"0\"+parseInt(n).toString(16)).slice(-2)},randex=function(){return\"#\"+hexify(randnum(255))+hexify(randnum(255))+hexify(randnum(255))},blender=function(){return Math.round(Math.random())?\"radial-gradient(circle at \"+randnum(100)+\"% \"+randnum(100)+\"%, \"+randex()+\", \"+randex()+\")\":\"linear-gradient(\"+randnum(360)+\"deg, \"+randex()+\", \"+randex()+\")\"};$(\".card\").each((function(){var n=blender();$(this).hover((function(){$(this).css(\"background-image\",n)}),(function(){$(this).css(\"background-image\",\"none\")}))})),$(\".card\").click((function(){var n=$(this).children(\".card-header\").children(\"div\").children(\"a\").attr(\"href\");window.location.href=n}))</script>\n</div>","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2021-10-27 23:29:46\ntype: \"links\"\n---\n\n<div class=\"post-body\" style=\"opacity: 1; display: block; transform: translateY(0px);\">\n<div id=\"links\">\n<style>.links-content{margin-top:1rem}.link-navigation::after{content:\" \";display:block;clear:both}.card{width:45%;font-size:1rem;padding:10px 20px;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:flex}@media (max-width:1400px){.card{width:40%!important}}.card:nth-child(odd){float:left}.card:nth-child(even){float:right}.card:hover{transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)}.card a{border:none}.card .ava{width:3rem!important;height:3rem!important;margin:0!important;margin-right:1em!important;border-radius:4px}.card .card-header{font-style:italic;overflow:hidden;width:100%}.card .card-header a{font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none}.card .card-header a:hover{color:#d480aa;text-decoration:none}.card .card-header .info{font-style:normal;color:#a3a3a3;font-size:14px;min-width:0;overflow:hidden;white-space:nowrap}span.focus-links{font-style:normal;margin-left:10px;position:unset;left:0;padding:0 7px 0 5px;font-size:11px;border-color:#42c02e;border-radius:40px;line-height:24px;height:22px;color:#fff!important;background-color:#42c02e;display:inline-block}span.focus-links:hover{background-color:#318024}.friends-btn{text-align:center;color:#555!important;background-color:#fff;border-radius:3px;font-size:15px;box-shadow:inset 0 0 10px 0 rgba(0,0,0,.35);border:none!important;transition-property:unset;padding:0 15px;margin:inherit}.friends-btn:hover{color:#fff!important;border-radius:3px;font-size:15px;box-shadow:inset 0 0 10px 0 rgba(0,0,0,.35);background-image:linear-gradient(90deg,#a166ab 0,#ef4e7b 25%,#f37055 50%,#ef4e7b 75%,#a166ab 100%);margin:inherit}\n.post-body .note.success {\n    background: #eff8f0;\n    border-left-color: #5cb85c;\n}\n.post-body .note {\n    border-radius: 3px;\n    margin-bottom: 20px;\n    padding: 1em;\n    position: relative;\n    background: #f9f9f9;\n    border: initial;\n    border-left: 3px solid #eee;\n}\n.note.success {\n    background: #eff8f0;\n    border-left-color: #5cb85c;\n}\n</style>\n<div class=\"links-content\">\n    <div class=\"link-navigation\">\n    <div class=\"note success\">\n    三人行，必有我师焉。——《论语》\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://avatars.githubusercontent.com/u/396972?v=4\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://github.com/xushiwei\" target=\"_blank\">许式伟</a>\n        <a href=\"https://github.com/xushiwei\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🍀 连接数据，重塑价值。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://coolshell.cn/wp-content/uploads/2011/03/me.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://coolshell.cn/\" target=\"_blank\">陈皓 - 左耳朵耗子</a>\n        <a href=\"https://coolshell.cn/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🌲 享受编程和技术所带来的快乐。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://www.laruence.com/images/logo.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://www.laruence.com/\" target=\"_blank\">惠新宸 - 鸟哥</a>\n        <a href=\"https://www.laruence.com/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🍂 左手代码右手诗。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\">\n    <img class=\"ava\" src=\"https://inotes.oss-cn-beijing.aliyuncs.com/common/201812/avatar.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://imajinyun.xyz/\" target=\"_blank\">Jinyun</a>\n        <a href=\"https://imajinyun.xyz/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🌻 进一寸自有一寸的欢喜。\n    </div>\n    </div>\n    </div>\n    </div>\n</div>\n</div>\n<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">var randnum=function(n){return Math.round(Math.random()*n)},hexify=function(n){return(\"0\"+parseInt(n).toString(16)).slice(-2)},randex=function(){return\"#\"+hexify(randnum(255))+hexify(randnum(255))+hexify(randnum(255))},blender=function(){return Math.round(Math.random())?\"radial-gradient(circle at \"+randnum(100)+\"% \"+randnum(100)+\"%, \"+randex()+\", \"+randex()+\")\":\"linear-gradient(\"+randnum(360)+\"deg, \"+randex()+\", \"+randex()+\")\"};$(\".card\").each((function(){var n=blender();$(this).hover((function(){$(this).css(\"background-image\",n)}),(function(){$(this).css(\"background-image\",\"none\")}))})),$(\".card\").click((function(){var n=$(this).children(\".card-header\").children(\"div\").children(\"a\").attr(\"href\");window.location.href=n}))</script>\n</div>","updated":"2021-10-28T02:41:26.000Z","path":"links/index.html","comments":1,"layout":"page","_id":"ckxy549vk00030w8nbonk4msr","content":"<div class=\"post-body\" style=\"opacity: 1; display: block; transform: translateY(0px);\">\n<div id=\"links\">\n<style>.links-content{margin-top:1rem}.link-navigation::after{content:\" \";display:block;clear:both}.card{width:45%;font-size:1rem;padding:10px 20px;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:flex}@media (max-width:1400px){.card{width:40%!important}}.card:nth-child(odd){float:left}.card:nth-child(even){float:right}.card:hover{transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)}.card a{border:none}.card .ava{width:3rem!important;height:3rem!important;margin:0!important;margin-right:1em!important;border-radius:4px}.card .card-header{font-style:italic;overflow:hidden;width:100%}.card .card-header a{font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none}.card .card-header a:hover{color:#d480aa;text-decoration:none}.card .card-header .info{font-style:normal;color:#a3a3a3;font-size:14px;min-width:0;overflow:hidden;white-space:nowrap}span.focus-links{font-style:normal;margin-left:10px;position:unset;left:0;padding:0 7px 0 5px;font-size:11px;border-color:#42c02e;border-radius:40px;line-height:24px;height:22px;color:#fff!important;background-color:#42c02e;display:inline-block}span.focus-links:hover{background-color:#318024}.friends-btn{text-align:center;color:#555!important;background-color:#fff;border-radius:3px;font-size:15px;box-shadow:inset 0 0 10px 0 rgba(0,0,0,.35);border:none!important;transition-property:unset;padding:0 15px;margin:inherit}.friends-btn:hover{color:#fff!important;border-radius:3px;font-size:15px;box-shadow:inset 0 0 10px 0 rgba(0,0,0,.35);background-image:linear-gradient(90deg,#a166ab 0,#ef4e7b 25%,#f37055 50%,#ef4e7b 75%,#a166ab 100%);margin:inherit}\n.post-body .note.success {\n    background: #eff8f0;\n    border-left-color: #5cb85c;\n}\n.post-body .note {\n    border-radius: 3px;\n    margin-bottom: 20px;\n    padding: 1em;\n    position: relative;\n    background: #f9f9f9;\n    border: initial;\n    border-left: 3px solid #eee;\n}\n.note.success {\n    background: #eff8f0;\n    border-left-color: #5cb85c;\n}\n</style>\n<div class=\"links-content\">\n    <div class=\"link-navigation\">\n    <div class=\"note success\">\n    三人行，必有我师焉。——《论语》\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://avatars.githubusercontent.com/u/396972?v=4\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://github.com/xushiwei\" target=\"_blank\">许式伟</a>\n        <a href=\"https://github.com/xushiwei\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🍀 连接数据，重塑价值。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://coolshell.cn/wp-content/uploads/2011/03/me.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://coolshell.cn/\" target=\"_blank\">陈皓 - 左耳朵耗子</a>\n        <a href=\"https://coolshell.cn/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🌲 享受编程和技术所带来的快乐。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://www.laruence.com/images/logo.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://www.laruence.com/\" target=\"_blank\">惠新宸 - 鸟哥</a>\n        <a href=\"https://www.laruence.com/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🍂 左手代码右手诗。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\">\n    <img class=\"ava\" src=\"https://inotes.oss-cn-beijing.aliyuncs.com/common/201812/avatar.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://imajinyun.xyz/\" target=\"_blank\">Jinyun</a>\n        <a href=\"https://imajinyun.xyz/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🌻 进一寸自有一寸的欢喜。\n    </div>\n    </div>\n    </div>\n    </div>\n</div>\n</div>\n<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">var randnum=function(n){return Math.round(Math.random()*n)},hexify=function(n){return(\"0\"+parseInt(n).toString(16)).slice(-2)},randex=function(){return\"#\"+hexify(randnum(255))+hexify(randnum(255))+hexify(randnum(255))},blender=function(){return Math.round(Math.random())?\"radial-gradient(circle at \"+randnum(100)+\"% \"+randnum(100)+\"%, \"+randex()+\", \"+randex()+\")\":\"linear-gradient(\"+randnum(360)+\"deg, \"+randex()+\", \"+randex()+\")\"};$(\".card\").each((function(){var n=blender();$(this).hover((function(){$(this).css(\"background-image\",n)}),(function(){$(this).css(\"background-image\",\"none\")}))})),$(\".card\").click((function(){var n=$(this).children(\".card-header\").children(\"div\").children(\"a\").attr(\"href\");window.location.href=n}))</script>\n</div>","site":{"data":{}},"excerpt":"","more":"<div class=\"post-body\" style=\"opacity: 1; display: block; transform: translateY(0px);\">\n<div id=\"links\">\n<style>.links-content{margin-top:1rem}.link-navigation::after{content:\" \";display:block;clear:both}.card{width:45%;font-size:1rem;padding:10px 20px;border-radius:4px;transition-duration:.15s;margin-bottom:1rem;display:flex}@media (max-width:1400px){.card{width:40%!important}}.card:nth-child(odd){float:left}.card:nth-child(even){float:right}.card:hover{transform:scale(1.1);box-shadow:0 2px 6px 0 rgba(0,0,0,.12),0 0 6px 0 rgba(0,0,0,.04)}.card a{border:none}.card .ava{width:3rem!important;height:3rem!important;margin:0!important;margin-right:1em!important;border-radius:4px}.card .card-header{font-style:italic;overflow:hidden;width:100%}.card .card-header a{font-style:normal;color:#2bbc8a;font-weight:700;text-decoration:none}.card .card-header a:hover{color:#d480aa;text-decoration:none}.card .card-header .info{font-style:normal;color:#a3a3a3;font-size:14px;min-width:0;overflow:hidden;white-space:nowrap}span.focus-links{font-style:normal;margin-left:10px;position:unset;left:0;padding:0 7px 0 5px;font-size:11px;border-color:#42c02e;border-radius:40px;line-height:24px;height:22px;color:#fff!important;background-color:#42c02e;display:inline-block}span.focus-links:hover{background-color:#318024}.friends-btn{text-align:center;color:#555!important;background-color:#fff;border-radius:3px;font-size:15px;box-shadow:inset 0 0 10px 0 rgba(0,0,0,.35);border:none!important;transition-property:unset;padding:0 15px;margin:inherit}.friends-btn:hover{color:#fff!important;border-radius:3px;font-size:15px;box-shadow:inset 0 0 10px 0 rgba(0,0,0,.35);background-image:linear-gradient(90deg,#a166ab 0,#ef4e7b 25%,#f37055 50%,#ef4e7b 75%,#a166ab 100%);margin:inherit}\n.post-body .note.success {\n    background: #eff8f0;\n    border-left-color: #5cb85c;\n}\n.post-body .note {\n    border-radius: 3px;\n    margin-bottom: 20px;\n    padding: 1em;\n    position: relative;\n    background: #f9f9f9;\n    border: initial;\n    border-left: 3px solid #eee;\n}\n.note.success {\n    background: #eff8f0;\n    border-left-color: #5cb85c;\n}\n</style>\n<div class=\"links-content\">\n    <div class=\"link-navigation\">\n    <div class=\"note success\">\n    三人行，必有我师焉。——《论语》\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://avatars.githubusercontent.com/u/396972?v=4\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://github.com/xushiwei\" target=\"_blank\">许式伟</a>\n        <a href=\"https://github.com/xushiwei\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🍀 连接数据，重塑价值。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://coolshell.cn/wp-content/uploads/2011/03/me.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://coolshell.cn/\" target=\"_blank\">陈皓 - 左耳朵耗子</a>\n        <a href=\"https://coolshell.cn/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🌲 享受编程和技术所带来的快乐。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\" style=\"background-image: none;\">\n    <img class=\"ava\" src=\"https://www.laruence.com/images/logo.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://www.laruence.com/\" target=\"_blank\">惠新宸 - 鸟哥</a>\n        <a href=\"https://www.laruence.com/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🍂 左手代码右手诗。\n    </div>\n    </div>\n    </div>\n    <div class=\"card\">\n    <img class=\"ava\" src=\"https://inotes.oss-cn-beijing.aliyuncs.com/common/201812/avatar.jpg\" />\n    <div class=\"card-header\">\n    <div>\n        <a href=\"https://imajinyun.xyz/\" target=\"_blank\">Jinyun</a>\n        <a href=\"https://imajinyun.xyz/\" target=\"_blank\"><span class=\"focus-links\">关注</span></a>\n    </div>\n    <div class=\"info\">\n    🌻 进一寸自有一寸的欢喜。\n    </div>\n    </div>\n    </div>\n    </div>\n</div>\n</div>\n<script src=\"https://code.jquery.com/jquery-3.1.1.min.js\"></script>\n<script type=\"text/javascript\">var randnum=function(n){return Math.round(Math.random()*n)},hexify=function(n){return(\"0\"+parseInt(n).toString(16)).slice(-2)},randex=function(){return\"#\"+hexify(randnum(255))+hexify(randnum(255))+hexify(randnum(255))},blender=function(){return Math.round(Math.random())?\"radial-gradient(circle at \"+randnum(100)+\"% \"+randnum(100)+\"%, \"+randex()+\", \"+randex()+\")\":\"linear-gradient(\"+randnum(360)+\"deg, \"+randex()+\", \"+randex()+\")\"};$(\".card\").each((function(){var n=blender();$(this).hover((function(){$(this).css(\"background-image\",n)}),(function(){$(this).css(\"background-image\",\"none\")}))})),$(\".card\").click((function(){var n=$(this).children(\".card-header\").children(\"div\").children(\"a\").attr(\"href\");window.location.href=n}))</script>\n</div>"},{"title":"关于","date":"2021-10-27T16:07:13.000Z","_content":"\n> 声明：本站文章为本人学习整理所得，仅代表个人观点。\n\n## 个人介绍\n\n一个有代码洁癖症的服务端开发者，主开发语言PHP。\n\n## 个人简历\n\n    {\n        name: 'baozhigang',\n        age: '30+',\n        gender: 'M',\n        profession: 'Web Developer',\n        address: 'Beijing',\n        education: 'He Bei University',\n        github: 'https://github.com/baozhigang/',\n        blog: 'https://baozhigang.github.io/',\n        email: 'salmon201601@gmail.com',\n        description: 'Love learning, Love investing',\n        skills: {\n            language: ['HTML+CSS+JavaScript', 'PHP', 'Java', 'Go'],\n            kitchain: {\n                os: ['Mac', 'Linux', 'Windows'],\n                vcs: ['Git', 'GitHub', 'GitLab'],\n                server: ['Apache', 'Nginx'],\n                store: ['MySQL', 'Redis', 'MongoDB'],\n                platform: ['Docker', 'VirtualBox'],\n                cloudservice: ['Aliyun', 'AWS'],\n            },\n            devtools: ['Visual Studio Code', 'PhpStorm', 'Vim'],\n        }\n    }","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-10-28 00:07:13\n---\n\n> 声明：本站文章为本人学习整理所得，仅代表个人观点。\n\n## 个人介绍\n\n一个有代码洁癖症的服务端开发者，主开发语言PHP。\n\n## 个人简历\n\n    {\n        name: 'baozhigang',\n        age: '30+',\n        gender: 'M',\n        profession: 'Web Developer',\n        address: 'Beijing',\n        education: 'He Bei University',\n        github: 'https://github.com/baozhigang/',\n        blog: 'https://baozhigang.github.io/',\n        email: 'salmon201601@gmail.com',\n        description: 'Love learning, Love investing',\n        skills: {\n            language: ['HTML+CSS+JavaScript', 'PHP', 'Java', 'Go'],\n            kitchain: {\n                os: ['Mac', 'Linux', 'Windows'],\n                vcs: ['Git', 'GitHub', 'GitLab'],\n                server: ['Apache', 'Nginx'],\n                store: ['MySQL', 'Redis', 'MongoDB'],\n                platform: ['Docker', 'VirtualBox'],\n                cloudservice: ['Aliyun', 'AWS'],\n            },\n            devtools: ['Visual Studio Code', 'PhpStorm', 'Vim'],\n        }\n    }","updated":"2021-10-28T08:22:42.714Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckxy549vo00070w8nb48i1f0c","content":"<blockquote>\n<p>声明：本站文章为本人学习整理所得，仅代表个人观点。</p>\n</blockquote>\n<h2 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h2><p>一个有代码洁癖症的服务端开发者，主开发语言PHP。</p>\n<h2 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h2><pre><code>{\n    name: &apos;baozhigang&apos;,\n    age: &apos;30+&apos;,\n    gender: &apos;M&apos;,\n    profession: &apos;Web Developer&apos;,\n    address: &apos;Beijing&apos;,\n    education: &apos;He Bei University&apos;,\n    github: &apos;https://github.com/baozhigang/&apos;,\n    blog: &apos;https://baozhigang.github.io/&apos;,\n    email: &apos;salmon201601@gmail.com&apos;,\n    description: &apos;Love learning, Love investing&apos;,\n    skills: {\n        language: [&apos;HTML+CSS+JavaScript&apos;, &apos;PHP&apos;, &apos;Java&apos;, &apos;Go&apos;],\n        kitchain: {\n            os: [&apos;Mac&apos;, &apos;Linux&apos;, &apos;Windows&apos;],\n            vcs: [&apos;Git&apos;, &apos;GitHub&apos;, &apos;GitLab&apos;],\n            server: [&apos;Apache&apos;, &apos;Nginx&apos;],\n            store: [&apos;MySQL&apos;, &apos;Redis&apos;, &apos;MongoDB&apos;],\n            platform: [&apos;Docker&apos;, &apos;VirtualBox&apos;],\n            cloudservice: [&apos;Aliyun&apos;, &apos;AWS&apos;],\n        },\n        devtools: [&apos;Visual Studio Code&apos;, &apos;PhpStorm&apos;, &apos;Vim&apos;],\n    }\n}</code></pre>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>声明：本站文章为本人学习整理所得，仅代表个人观点。</p>\n</blockquote>\n<h2 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h2><p>一个有代码洁癖症的服务端开发者，主开发语言PHP。</p>\n<h2 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h2><pre><code>{\n    name: &apos;baozhigang&apos;,\n    age: &apos;30+&apos;,\n    gender: &apos;M&apos;,\n    profession: &apos;Web Developer&apos;,\n    address: &apos;Beijing&apos;,\n    education: &apos;He Bei University&apos;,\n    github: &apos;https://github.com/baozhigang/&apos;,\n    blog: &apos;https://baozhigang.github.io/&apos;,\n    email: &apos;salmon201601@gmail.com&apos;,\n    description: &apos;Love learning, Love investing&apos;,\n    skills: {\n        language: [&apos;HTML+CSS+JavaScript&apos;, &apos;PHP&apos;, &apos;Java&apos;, &apos;Go&apos;],\n        kitchain: {\n            os: [&apos;Mac&apos;, &apos;Linux&apos;, &apos;Windows&apos;],\n            vcs: [&apos;Git&apos;, &apos;GitHub&apos;, &apos;GitLab&apos;],\n            server: [&apos;Apache&apos;, &apos;Nginx&apos;],\n            store: [&apos;MySQL&apos;, &apos;Redis&apos;, &apos;MongoDB&apos;],\n            platform: [&apos;Docker&apos;, &apos;VirtualBox&apos;],\n            cloudservice: [&apos;Aliyun&apos;, &apos;AWS&apos;],\n        },\n        devtools: [&apos;Visual Studio Code&apos;, &apos;PhpStorm&apos;, &apos;Vim&apos;],\n    }\n}</code></pre>"},{"title":"标签","date":"2021-10-27T16:59:32.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-10-28 00:59:32\ntype: \"tags\"\n---\n","updated":"2021-10-27T17:00:57.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckxy549xl005a0w8na7cw67hx","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Java语言解决八皇后问题","date":"2020-03-18T16:00:00.000Z","_content":"\n``` bash\n八皇后问题有92种解法，判断次数15720次。\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class Queue8 {\n    int max = 8;\n    static int judgeCount = 0;\n    static int count = 0;\n    int[] arr = new int[max];\n\n    public static void main(String[] args) {\n        Queue8 q8 = new Queue8();\n        q8.check(0);\n        System.out.printf(\"算法有%d种\", count);\n        System.out.println();\n        System.out.println(\"判断次数：\" + judgeCount);\n    }\n\n    // 放置皇后\n    public void check(int n) {\n        if (n == max) { // 放完了\n            print();\n            count++;\n            return;\n        }\n        // 循环放置到每一列\n        for (int i = 0; i < max; i++) {\n            arr[n] = i;\n            if (judge(n)) { // 不冲突则递归放置下一个皇后\n                check(n+1);\n            }\n        }\n    }\n\n    // 判断是否冲突\n    private boolean judge(int n) {\n        judgeCount++;\n        for (int i = 0; i < n; i++) {\n            // 在同一列或者行数差等于列数差，则为冲突\n            if (arr[i] == arr[n] || Math.abs(n-i) == Math.abs(arr[n] - arr[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void print() {\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}\n\n```\n","source":"_posts/algorithm_八皇后问题.md","raw":"---\ntitle: Java语言解决八皇后问题\ndate: 2020-03-19\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n八皇后问题有92种解法，判断次数15720次。\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class Queue8 {\n    int max = 8;\n    static int judgeCount = 0;\n    static int count = 0;\n    int[] arr = new int[max];\n\n    public static void main(String[] args) {\n        Queue8 q8 = new Queue8();\n        q8.check(0);\n        System.out.printf(\"算法有%d种\", count);\n        System.out.println();\n        System.out.println(\"判断次数：\" + judgeCount);\n    }\n\n    // 放置皇后\n    public void check(int n) {\n        if (n == max) { // 放完了\n            print();\n            count++;\n            return;\n        }\n        // 循环放置到每一列\n        for (int i = 0; i < max; i++) {\n            arr[n] = i;\n            if (judge(n)) { // 不冲突则递归放置下一个皇后\n                check(n+1);\n            }\n        }\n    }\n\n    // 判断是否冲突\n    private boolean judge(int n) {\n        judgeCount++;\n        for (int i = 0; i < n; i++) {\n            // 在同一列或者行数差等于列数差，则为冲突\n            if (arr[i] == arr[n] || Math.abs(n-i) == Math.abs(arr[n] - arr[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void print() {\n        for (int i = 0; i < arr.length; i++) {\n            System.out.print(arr[i] + \" \");\n        }\n        System.out.println();\n    }\n}\n\n```\n","slug":"algorithm_八皇后问题","published":1,"updated":"2021-11-03T15:23:02.064Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vc00000w8ne0ny9gwj","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">八皇后问题有92种解法，判断次数15720次。</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Queue8 &#123;</span><br><span class=\"line\">    int max = 8;</span><br><span class=\"line\">    static int judgeCount = 0;</span><br><span class=\"line\">    static int count = 0;</span><br><span class=\"line\">    int[] arr = new int[max];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Queue8 q8 = new Queue8();</span><br><span class=\"line\">        q8.check(0);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"算法有%d种\"</span>, count);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"判断次数：\"</span> + judgeCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 放置皇后</span><br><span class=\"line\">    public void check(int n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == max) &#123; // 放完了</span><br><span class=\"line\">            <span class=\"built_in\">print</span>();</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 循环放置到每一列</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; max; i++) &#123;</span><br><span class=\"line\">            arr[n] = i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (judge(n)) &#123; // 不冲突则递归放置下一个皇后</span><br><span class=\"line\">                check(n+1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 判断是否冲突</span><br><span class=\"line\">    private boolean judge(int n) &#123;</span><br><span class=\"line\">        judgeCount++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">            // 在同一列或者行数差等于列数差，则为冲突</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] == arr[n] || Math.abs(n-i) == Math.abs(arr[n] - arr[i])) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void <span class=\"function\"><span class=\"title\">print</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">八皇后问题有92种解法，判断次数15720次。</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Queue8 &#123;</span><br><span class=\"line\">    int max = 8;</span><br><span class=\"line\">    static int judgeCount = 0;</span><br><span class=\"line\">    static int count = 0;</span><br><span class=\"line\">    int[] arr = new int[max];</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Queue8 q8 = new Queue8();</span><br><span class=\"line\">        q8.check(0);</span><br><span class=\"line\">        System.out.printf(<span class=\"string\">\"算法有%d种\"</span>, count);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"判断次数：\"</span> + judgeCount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 放置皇后</span><br><span class=\"line\">    public void check(int n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == max) &#123; // 放完了</span><br><span class=\"line\">            <span class=\"built_in\">print</span>();</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 循环放置到每一列</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; max; i++) &#123;</span><br><span class=\"line\">            arr[n] = i;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (judge(n)) &#123; // 不冲突则递归放置下一个皇后</span><br><span class=\"line\">                check(n+1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 判断是否冲突</span><br><span class=\"line\">    private boolean judge(int n) &#123;</span><br><span class=\"line\">        judgeCount++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">            // 在同一列或者行数差等于列数差，则为冲突</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] == arr[n] || Math.abs(n-i) == Math.abs(arr[n] - arr[i])) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void <span class=\"function\"><span class=\"title\">print</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            System.out.print(arr[i] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java语言实现二分查找","date":"2020-04-12T16:00:00.000Z","_content":"\n\n``` bash\n/**\n * 循环实现\n * 注意：1.low<=high，而不是 low<high\n *      2.low和high更新 low=mid+1，high=mid-1 如果写成 low=mid 或者 high=mid，就可能会发生死循环\n */\n```\n\n<!--more-->\n\n\n``` bash\n\npublic static int bsearch(int[] arr, int n, int value) {\n    int low = 0;\n    int high = n-1;\n\n    while (low <= high) {\n        int mid = low + (high-low)/2;\n\n        if (arr[mid] == value) {\n            return mid;\n        } else if (arr[mid] < value) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\n\n\n// 递归实现\npublic static int bsearch(int[] arr, int low, int high, int value) {\n    if (low > high) return -1;\n\n    int mid = low + (high-low)/2;\n    if (arr[mid] == value) {\n        return mid;\n    } else if (arr[mid] > value) {\n        return bsearch(arr, low, mid-1, value);\n    } else {\n        return bsearch(arr, mid+1, high, value);\n    }\n}\n\n```\n","source":"_posts/algorithm_二分查找.md","raw":"---\ntitle: Java语言实现二分查找\ndate: 2020-04-13\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n\n``` bash\n/**\n * 循环实现\n * 注意：1.low<=high，而不是 low<high\n *      2.low和high更新 low=mid+1，high=mid-1 如果写成 low=mid 或者 high=mid，就可能会发生死循环\n */\n```\n\n<!--more-->\n\n\n``` bash\n\npublic static int bsearch(int[] arr, int n, int value) {\n    int low = 0;\n    int high = n-1;\n\n    while (low <= high) {\n        int mid = low + (high-low)/2;\n\n        if (arr[mid] == value) {\n            return mid;\n        } else if (arr[mid] < value) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\n\n\n// 递归实现\npublic static int bsearch(int[] arr, int low, int high, int value) {\n    if (low > high) return -1;\n\n    int mid = low + (high-low)/2;\n    if (arr[mid] == value) {\n        return mid;\n    } else if (arr[mid] > value) {\n        return bsearch(arr, low, mid-1, value);\n    } else {\n        return bsearch(arr, mid+1, high, value);\n    }\n}\n\n```\n","slug":"algorithm_二分查找","published":1,"updated":"2021-11-03T15:25:46.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vj00020w8nhrgr8368","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 循环实现</span><br><span class=\"line\"> * 注意：1.low&lt;=high，而不是 low&lt;high</span><br><span class=\"line\"> *      2.low和high更新 low=mid+1，high=mid-1 如果写成 low=mid 或者 high=mid，就可能会发生死循环</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static int bsearch(int[] arr, int n, int value) &#123;</span><br><span class=\"line\">    int low = 0;</span><br><span class=\"line\">    int high = n-1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        int mid = low + (high-low)/2;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[mid] == value) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; value) &#123;</span><br><span class=\"line\">            low = mid + 1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            high = mid - 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 递归实现</span><br><span class=\"line\">public static int bsearch(int[] arr, int low, int high, int value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt; high) <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\"></span><br><span class=\"line\">    int mid = low + (high-low)/2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] == value) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; value) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> bsearch(arr, low, mid-1, value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> bsearch(arr, mid+1, high, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 循环实现</span><br><span class=\"line\"> * 注意：1.low&lt;=high，而不是 low&lt;high</span><br><span class=\"line\"> *      2.low和high更新 low=mid+1，high=mid-1 如果写成 low=mid 或者 high=mid，就可能会发生死循环</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static int bsearch(int[] arr, int n, int value) &#123;</span><br><span class=\"line\">    int low = 0;</span><br><span class=\"line\">    int high = n-1;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">        int mid = low + (high-low)/2;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[mid] == value) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; value) &#123;</span><br><span class=\"line\">            low = mid + 1;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            high = mid - 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 递归实现</span><br><span class=\"line\">public static int bsearch(int[] arr, int low, int high, int value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt; high) <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\"></span><br><span class=\"line\">    int mid = low + (high-low)/2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[mid] == value) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; value) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> bsearch(arr, low, mid-1, value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> bsearch(arr, mid+1, high, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java语言实现暴力匹配算法","date":"2020-04-18T16:00:00.000Z","_content":"\n``` bash\n时间复杂度最坏O(n*m) 。\n\n应用广泛原因有二：\n1）实际开发中效率要比最坏情况高很多\n2）算法简单，简单是首选\n\n代码如下：\n\n```\n\n<!--more-->\n\n``` bash\n\npublic static int BruteForce(String str1, String str2) {\n    char[] s1 = str1.toCharArray();\n    char[] s2 = str2.toCharArray();\n\n    int s1len = s1.length;\n    int s2len = s2.length;\n    int i = 0;\n    int j = 0;\n    while(i < s1len && j < s2len) {\n        if (s1[i] == s2[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - (j-1);  // i-j即回到上一次的初始位置 +1后移一位\n            j = 0;\n        }\n    }\n\n    if (j == s2.length) {\n        return i-j;\n    } else {\n        return -1;\n    }\n}\n\n```\n","source":"_posts/algorithm_BF算法.md","raw":"---\ntitle: Java语言实现暴力匹配算法\ndate: 2020-04-19\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n时间复杂度最坏O(n*m) 。\n\n应用广泛原因有二：\n1）实际开发中效率要比最坏情况高很多\n2）算法简单，简单是首选\n\n代码如下：\n\n```\n\n<!--more-->\n\n``` bash\n\npublic static int BruteForce(String str1, String str2) {\n    char[] s1 = str1.toCharArray();\n    char[] s2 = str2.toCharArray();\n\n    int s1len = s1.length;\n    int s2len = s2.length;\n    int i = 0;\n    int j = 0;\n    while(i < s1len && j < s2len) {\n        if (s1[i] == s2[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - (j-1);  // i-j即回到上一次的初始位置 +1后移一位\n            j = 0;\n        }\n    }\n\n    if (j == s2.length) {\n        return i-j;\n    } else {\n        return -1;\n    }\n}\n\n```\n","slug":"algorithm_BF算法","published":1,"updated":"2021-11-03T15:27:49.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vn00060w8nbkwvfmsn","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">时间复杂度最坏O(n*m) 。</span><br><span class=\"line\"></span><br><span class=\"line\">应用广泛原因有二：</span><br><span class=\"line\">1）实际开发中效率要比最坏情况高很多</span><br><span class=\"line\">2）算法简单，简单是首选</span><br><span class=\"line\"></span><br><span class=\"line\">代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static int BruteForce(String str1, String str2) &#123;</span><br><span class=\"line\">    char[] s1 = str1.toCharArray();</span><br><span class=\"line\">    char[] s2 = str2.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    int s1len = s1.length;</span><br><span class=\"line\">    int s2len = s2.length;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    int j = 0;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; s1len &amp;&amp; j &lt; s2len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s1[i] == s2[j]) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i = i - (j-1);  // i-j即回到上一次的初始位置 +1后移一位</span><br><span class=\"line\">            j = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == s2.length) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> i-j;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">时间复杂度最坏O(n*m) 。</span><br><span class=\"line\"></span><br><span class=\"line\">应用广泛原因有二：</span><br><span class=\"line\">1）实际开发中效率要比最坏情况高很多</span><br><span class=\"line\">2）算法简单，简单是首选</span><br><span class=\"line\"></span><br><span class=\"line\">代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public static int BruteForce(String str1, String str2) &#123;</span><br><span class=\"line\">    char[] s1 = str1.toCharArray();</span><br><span class=\"line\">    char[] s2 = str2.toCharArray();</span><br><span class=\"line\"></span><br><span class=\"line\">    int s1len = s1.length;</span><br><span class=\"line\">    int s2len = s2.length;</span><br><span class=\"line\">    int i = 0;</span><br><span class=\"line\">    int j = 0;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; s1len &amp;&amp; j &lt; s2len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s1[i] == s2[j]) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i = i - (j-1);  // i-j即回到上一次的初始位置 +1后移一位</span><br><span class=\"line\">            j = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == s2.length) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> i-j;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Prim算法解决修路问题","date":"2020-04-19T16:00:00.000Z","_content":"\n``` bash\n/**\n * 普利姆算法\n * 思路：尽可能选择少的路线，并且每条路线最小，保证总里程数最少\n * 最小生成树：\n * 修路的问题本质是最小生成树的问题，N个顶点，N-1条边，包含全部顶点\n * 步骤：\n * 1.循环访问过的节点，和没访问过的节点，找到一条最小权重的边\n * 2.循环N-1次，找到N-1条边\n */\n```\n\n<!--more-->\n\n``` bash\npublic class PrimAlgorithm {\n    public static void main(String[] args) {\n        // 图创建是否成功\n        char[] data = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n        int verxs = data.length;\n        int[][] weight = new int[][] {\n                {100000,5,7,100000,100000,100000,2},\n                {5,100000,100000,9,100000,100000,3},\n                {7,100000,100000,100000,8,100000,100000},\n                {100000,9,100000,100000,100000,4,100000},\n                {100000,100000,8,100000,100000,5,4},\n                {100000,100000,100000,4,5,100000,6},\n                {2,3,100000,100000,4,6,100000}\n        };\n        // 创建图对象\n        MGraph graph = new MGraph(verxs);\n        // 创建最小生成树\n        MinTree minTree = new MinTree();\n        minTree.createGraph(graph, verxs, data, weight);\n        // 展示\n        minTree.showGraph(graph);\n        // prim 算法\n        minTree.prim(graph, 1);\n    }\n}\n// 创建最小的生成树\nclass MinTree {\n    // 创建图的邻接矩阵\n    public void createGraph(MGraph graph, int verxs, char[] data, int[][] weight) {\n        int i, j;\n        for (i = 0;  i < verxs; i++) {\n            graph.data[i] = data[i];  // 顶点\n            for (j = 0; j < verxs; j++) {\n                graph.weight[i][j] = weight[i][j];\n            }\n        }\n    }\n    // 展示\n    public void showGraph(MGraph graph) {\n        for (int[] link : graph.weight) {\n            System.out.println(Arrays.toString(link));\n        }\n    }\n    /**\n     * prim算法，得到最小生成树\n     *\n     * @param graph 图\n     * @param v 当前顶点的下标\n     */\n    public void prim(MGraph graph, int v) {\n        int visited[] = new int[graph.verxs];\n        visited[v] = 1;\n        // 初始化找到的边的两个顶点的下标\n        int h1 = -1;\n        int h2 = -1;\n        int minWeight = 100000;\n        // 循环verxs-1次，找到verxs条边\n        for (int k = 1; k < graph.verxs; k++) {\n            // 找到一条最小边\n            for (int i = 0; i < graph.verxs; i++) { // 已访问过的节点\n                for (int j = 0; j < graph.verxs; j++) { // 未访问过的节点\n                    if (visited[i] == 1 && visited[j] == 0 && graph.weight[i][j] < minWeight) {\n                        minWeight = graph.weight[i][j];\n                        h1 = i;\n                        h2 = j;\n                    }\n                }\n            }\n            // 找到一条最小边\n            System.out.println(\"边<\" + graph.data[h1] + \",\" + graph.data[h2] + \">权值：\" + graph.weight[h1][h2]);\n            visited[h2] = 1;\n            minWeight = 100000;\n        }\n    }\n}\n// 构造图\nclass MGraph {\n    int verxs; //图的节点\n    char[] data; // 存放节点数据\n    int[][] weight; //存放边，邻接矩阵\n\n    public MGraph(int verxs) {\n        this.verxs = verxs;\n        data = new char[verxs];\n        weight = new int[verxs][verxs];\n    }\n}\n```\n","source":"_posts/algorithm_Prim算法解决修路问题.md","raw":"---\ntitle: Prim算法解决修路问题\ndate: 2020-04-20\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n/**\n * 普利姆算法\n * 思路：尽可能选择少的路线，并且每条路线最小，保证总里程数最少\n * 最小生成树：\n * 修路的问题本质是最小生成树的问题，N个顶点，N-1条边，包含全部顶点\n * 步骤：\n * 1.循环访问过的节点，和没访问过的节点，找到一条最小权重的边\n * 2.循环N-1次，找到N-1条边\n */\n```\n\n<!--more-->\n\n``` bash\npublic class PrimAlgorithm {\n    public static void main(String[] args) {\n        // 图创建是否成功\n        char[] data = {'A', 'B', 'C', 'D', 'E', 'F', 'G'};\n        int verxs = data.length;\n        int[][] weight = new int[][] {\n                {100000,5,7,100000,100000,100000,2},\n                {5,100000,100000,9,100000,100000,3},\n                {7,100000,100000,100000,8,100000,100000},\n                {100000,9,100000,100000,100000,4,100000},\n                {100000,100000,8,100000,100000,5,4},\n                {100000,100000,100000,4,5,100000,6},\n                {2,3,100000,100000,4,6,100000}\n        };\n        // 创建图对象\n        MGraph graph = new MGraph(verxs);\n        // 创建最小生成树\n        MinTree minTree = new MinTree();\n        minTree.createGraph(graph, verxs, data, weight);\n        // 展示\n        minTree.showGraph(graph);\n        // prim 算法\n        minTree.prim(graph, 1);\n    }\n}\n// 创建最小的生成树\nclass MinTree {\n    // 创建图的邻接矩阵\n    public void createGraph(MGraph graph, int verxs, char[] data, int[][] weight) {\n        int i, j;\n        for (i = 0;  i < verxs; i++) {\n            graph.data[i] = data[i];  // 顶点\n            for (j = 0; j < verxs; j++) {\n                graph.weight[i][j] = weight[i][j];\n            }\n        }\n    }\n    // 展示\n    public void showGraph(MGraph graph) {\n        for (int[] link : graph.weight) {\n            System.out.println(Arrays.toString(link));\n        }\n    }\n    /**\n     * prim算法，得到最小生成树\n     *\n     * @param graph 图\n     * @param v 当前顶点的下标\n     */\n    public void prim(MGraph graph, int v) {\n        int visited[] = new int[graph.verxs];\n        visited[v] = 1;\n        // 初始化找到的边的两个顶点的下标\n        int h1 = -1;\n        int h2 = -1;\n        int minWeight = 100000;\n        // 循环verxs-1次，找到verxs条边\n        for (int k = 1; k < graph.verxs; k++) {\n            // 找到一条最小边\n            for (int i = 0; i < graph.verxs; i++) { // 已访问过的节点\n                for (int j = 0; j < graph.verxs; j++) { // 未访问过的节点\n                    if (visited[i] == 1 && visited[j] == 0 && graph.weight[i][j] < minWeight) {\n                        minWeight = graph.weight[i][j];\n                        h1 = i;\n                        h2 = j;\n                    }\n                }\n            }\n            // 找到一条最小边\n            System.out.println(\"边<\" + graph.data[h1] + \",\" + graph.data[h2] + \">权值：\" + graph.weight[h1][h2]);\n            visited[h2] = 1;\n            minWeight = 100000;\n        }\n    }\n}\n// 构造图\nclass MGraph {\n    int verxs; //图的节点\n    char[] data; // 存放节点数据\n    int[][] weight; //存放边，邻接矩阵\n\n    public MGraph(int verxs) {\n        this.verxs = verxs;\n        data = new char[verxs];\n        weight = new int[verxs][verxs];\n    }\n}\n```\n","slug":"algorithm_Prim算法解决修路问题","published":1,"updated":"2021-11-03T15:27:59.549Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vo00080w8n53lo5ppd","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 普利姆算法</span><br><span class=\"line\"> * 思路：尽可能选择少的路线，并且每条路线最小，保证总里程数最少</span><br><span class=\"line\"> * 最小生成树：</span><br><span class=\"line\"> * 修路的问题本质是最小生成树的问题，N个顶点，N-1条边，包含全部顶点</span><br><span class=\"line\"> * 步骤：</span><br><span class=\"line\"> * 1.循环访问过的节点，和没访问过的节点，找到一条最小权重的边</span><br><span class=\"line\"> * 2.循环N-1次，找到N-1条边</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PrimAlgorithm &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 图创建是否成功</span><br><span class=\"line\">        char[] data = &#123;<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>&#125;;</span><br><span class=\"line\">        int verxs = data.length;</span><br><span class=\"line\">        int[][] weight = new int[][] &#123;</span><br><span class=\"line\">                &#123;100000,5,7,100000,100000,100000,2&#125;,</span><br><span class=\"line\">                &#123;5,100000,100000,9,100000,100000,3&#125;,</span><br><span class=\"line\">                &#123;7,100000,100000,100000,8,100000,100000&#125;,</span><br><span class=\"line\">                &#123;100000,9,100000,100000,100000,4,100000&#125;,</span><br><span class=\"line\">                &#123;100000,100000,8,100000,100000,5,4&#125;,</span><br><span class=\"line\">                &#123;100000,100000,100000,4,5,100000,6&#125;,</span><br><span class=\"line\">                &#123;2,3,100000,100000,4,6,100000&#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 创建图对象</span><br><span class=\"line\">        MGraph graph = new MGraph(verxs);</span><br><span class=\"line\">        // 创建最小生成树</span><br><span class=\"line\">        MinTree minTree = new MinTree();</span><br><span class=\"line\">        minTree.createGraph(graph, verxs, data, weight);</span><br><span class=\"line\">        // 展示</span><br><span class=\"line\">        minTree.showGraph(graph);</span><br><span class=\"line\">        // prim 算法</span><br><span class=\"line\">        minTree.prim(graph, 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 创建最小的生成树</span><br><span class=\"line\">class MinTree &#123;</span><br><span class=\"line\">    // 创建图的邻接矩阵</span><br><span class=\"line\">    public void createGraph(MGraph graph, int verxs, char[] data, int[][] weight) &#123;</span><br><span class=\"line\">        int i, j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = 0;  i &lt; verxs; i++) &#123;</span><br><span class=\"line\">            graph.data[i] = data[i];  // 顶点</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = 0; j &lt; verxs; j++) &#123;</span><br><span class=\"line\">                graph.weight[i][j] = weight[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 展示</span><br><span class=\"line\">    public void showGraph(MGraph graph) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int[] link : graph.weight) &#123;</span><br><span class=\"line\">            System.out.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * prim算法，得到最小生成树</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param graph 图</span><br><span class=\"line\">     * @param v 当前顶点的下标</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void prim(MGraph graph, int v) &#123;</span><br><span class=\"line\">        int visited[] = new int[graph.verxs];</span><br><span class=\"line\">        visited[v] = 1;</span><br><span class=\"line\">        // 初始化找到的边的两个顶点的下标</span><br><span class=\"line\">        int h1 = -1;</span><br><span class=\"line\">        int h2 = -1;</span><br><span class=\"line\">        int minWeight = 100000;</span><br><span class=\"line\">        // 循环verxs-1次，找到verxs条边</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int k = 1; k &lt; graph.verxs; k++) &#123;</span><br><span class=\"line\">            // 找到一条最小边</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = 0; i &lt; graph.verxs; i++) &#123; // 已访问过的节点</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (int j = 0; j &lt; graph.verxs; j++) &#123; // 未访问过的节点</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (visited[i] == 1 &amp;&amp; visited[j] == 0 &amp;&amp; graph.weight[i][j] &lt; minWeight) &#123;</span><br><span class=\"line\">                        minWeight = graph.weight[i][j];</span><br><span class=\"line\">                        h1 = i;</span><br><span class=\"line\">                        h2 = j;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 找到一条最小边</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"边&lt;\"</span> + graph.data[h1] + <span class=\"string\">\",\"</span> + graph.data[h2] + <span class=\"string\">\"&gt;权值：\"</span> + graph.weight[h1][h2]);</span><br><span class=\"line\">            visited[h2] = 1;</span><br><span class=\"line\">            minWeight = 100000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 构造图</span><br><span class=\"line\">class MGraph &#123;</span><br><span class=\"line\">    int verxs; //图的节点</span><br><span class=\"line\">    char[] data; // 存放节点数据</span><br><span class=\"line\">    int[][] weight; //存放边，邻接矩阵</span><br><span class=\"line\"></span><br><span class=\"line\">    public MGraph(int verxs) &#123;</span><br><span class=\"line\">        this.verxs = verxs;</span><br><span class=\"line\">        data = new char[verxs];</span><br><span class=\"line\">        weight = new int[verxs][verxs];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 普利姆算法</span><br><span class=\"line\"> * 思路：尽可能选择少的路线，并且每条路线最小，保证总里程数最少</span><br><span class=\"line\"> * 最小生成树：</span><br><span class=\"line\"> * 修路的问题本质是最小生成树的问题，N个顶点，N-1条边，包含全部顶点</span><br><span class=\"line\"> * 步骤：</span><br><span class=\"line\"> * 1.循环访问过的节点，和没访问过的节点，找到一条最小权重的边</span><br><span class=\"line\"> * 2.循环N-1次，找到N-1条边</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class PrimAlgorithm &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 图创建是否成功</span><br><span class=\"line\">        char[] data = &#123;<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>, <span class=\"string\">'E'</span>, <span class=\"string\">'F'</span>, <span class=\"string\">'G'</span>&#125;;</span><br><span class=\"line\">        int verxs = data.length;</span><br><span class=\"line\">        int[][] weight = new int[][] &#123;</span><br><span class=\"line\">                &#123;100000,5,7,100000,100000,100000,2&#125;,</span><br><span class=\"line\">                &#123;5,100000,100000,9,100000,100000,3&#125;,</span><br><span class=\"line\">                &#123;7,100000,100000,100000,8,100000,100000&#125;,</span><br><span class=\"line\">                &#123;100000,9,100000,100000,100000,4,100000&#125;,</span><br><span class=\"line\">                &#123;100000,100000,8,100000,100000,5,4&#125;,</span><br><span class=\"line\">                &#123;100000,100000,100000,4,5,100000,6&#125;,</span><br><span class=\"line\">                &#123;2,3,100000,100000,4,6,100000&#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        // 创建图对象</span><br><span class=\"line\">        MGraph graph = new MGraph(verxs);</span><br><span class=\"line\">        // 创建最小生成树</span><br><span class=\"line\">        MinTree minTree = new MinTree();</span><br><span class=\"line\">        minTree.createGraph(graph, verxs, data, weight);</span><br><span class=\"line\">        // 展示</span><br><span class=\"line\">        minTree.showGraph(graph);</span><br><span class=\"line\">        // prim 算法</span><br><span class=\"line\">        minTree.prim(graph, 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 创建最小的生成树</span><br><span class=\"line\">class MinTree &#123;</span><br><span class=\"line\">    // 创建图的邻接矩阵</span><br><span class=\"line\">    public void createGraph(MGraph graph, int verxs, char[] data, int[][] weight) &#123;</span><br><span class=\"line\">        int i, j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = 0;  i &lt; verxs; i++) &#123;</span><br><span class=\"line\">            graph.data[i] = data[i];  // 顶点</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = 0; j &lt; verxs; j++) &#123;</span><br><span class=\"line\">                graph.weight[i][j] = weight[i][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 展示</span><br><span class=\"line\">    public void showGraph(MGraph graph) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int[] link : graph.weight) &#123;</span><br><span class=\"line\">            System.out.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * prim算法，得到最小生成树</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param graph 图</span><br><span class=\"line\">     * @param v 当前顶点的下标</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void prim(MGraph graph, int v) &#123;</span><br><span class=\"line\">        int visited[] = new int[graph.verxs];</span><br><span class=\"line\">        visited[v] = 1;</span><br><span class=\"line\">        // 初始化找到的边的两个顶点的下标</span><br><span class=\"line\">        int h1 = -1;</span><br><span class=\"line\">        int h2 = -1;</span><br><span class=\"line\">        int minWeight = 100000;</span><br><span class=\"line\">        // 循环verxs-1次，找到verxs条边</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int k = 1; k &lt; graph.verxs; k++) &#123;</span><br><span class=\"line\">            // 找到一条最小边</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = 0; i &lt; graph.verxs; i++) &#123; // 已访问过的节点</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (int j = 0; j &lt; graph.verxs; j++) &#123; // 未访问过的节点</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (visited[i] == 1 &amp;&amp; visited[j] == 0 &amp;&amp; graph.weight[i][j] &lt; minWeight) &#123;</span><br><span class=\"line\">                        minWeight = graph.weight[i][j];</span><br><span class=\"line\">                        h1 = i;</span><br><span class=\"line\">                        h2 = j;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 找到一条最小边</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"边&lt;\"</span> + graph.data[h1] + <span class=\"string\">\",\"</span> + graph.data[h2] + <span class=\"string\">\"&gt;权值：\"</span> + graph.weight[h1][h2]);</span><br><span class=\"line\">            visited[h2] = 1;</span><br><span class=\"line\">            minWeight = 100000;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 构造图</span><br><span class=\"line\">class MGraph &#123;</span><br><span class=\"line\">    int verxs; //图的节点</span><br><span class=\"line\">    char[] data; // 存放节点数据</span><br><span class=\"line\">    int[][] weight; //存放边，邻接矩阵</span><br><span class=\"line\"></span><br><span class=\"line\">    public MGraph(int verxs) &#123;</span><br><span class=\"line\">        this.verxs = verxs;</span><br><span class=\"line\">        data = new char[verxs];</span><br><span class=\"line\">        weight = new int[verxs][verxs];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"分治算法解决汉诺塔问题","date":"2020-04-13T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class Hanoitower {\n    public static void main(String[] args) {\n        hanoiTower(5, 'A', 'B', 'C');\n    }\n\n    public static void hanoiTower(int num, char a, char b, char c) {\n        // 如果只有一个盘\n        if (num == 1) {\n            System.out.println(\"第1个盘从 \" + a + \"->\" + c);\n        } else {\n            // 如果有n>=2情况，我们总是可以看做2个盘，最下面是一个盘，其余的是一个盘\n            // 1.先把上面所有的盘A->B，借助C\n            hanoiTower(num-1, a, c, b);\n            // 2.最下面的盘A->C\n            System.out.println(\"第\" + num + \"个盘从 \" + a + \"->\" + c);\n            // 3.把B塔所有的盘从B->C，借助A\n            hanoiTower(num-1, b, a, c);\n        }\n    }\n}\n\n```\n","source":"_posts/algorithm_分治算法实例一.md","raw":"---\ntitle: 分治算法解决汉诺塔问题\ndate: 2020-04-14\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class Hanoitower {\n    public static void main(String[] args) {\n        hanoiTower(5, 'A', 'B', 'C');\n    }\n\n    public static void hanoiTower(int num, char a, char b, char c) {\n        // 如果只有一个盘\n        if (num == 1) {\n            System.out.println(\"第1个盘从 \" + a + \"->\" + c);\n        } else {\n            // 如果有n>=2情况，我们总是可以看做2个盘，最下面是一个盘，其余的是一个盘\n            // 1.先把上面所有的盘A->B，借助C\n            hanoiTower(num-1, a, c, b);\n            // 2.最下面的盘A->C\n            System.out.println(\"第\" + num + \"个盘从 \" + a + \"->\" + c);\n            // 3.把B塔所有的盘从B->C，借助A\n            hanoiTower(num-1, b, a, c);\n        }\n    }\n}\n\n```\n","slug":"algorithm_分治算法实例一","published":1,"updated":"2021-11-03T15:25:53.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vp00090w8n4obm4qbq","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Hanoitower &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        hanoiTower(5, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void hanoiTower(int num, char a, char b, char c) &#123;</span><br><span class=\"line\">        // 如果只有一个盘</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == 1) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"第1个盘从 \"</span> + a + <span class=\"string\">\"-&gt;\"</span> + c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            // 如果有n&gt;=2情况，我们总是可以看做2个盘，最下面是一个盘，其余的是一个盘</span><br><span class=\"line\">            // 1.先把上面所有的盘A-&gt;B，借助C</span><br><span class=\"line\">            hanoiTower(num-1, a, c, b);</span><br><span class=\"line\">            // 2.最下面的盘A-&gt;C</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"第\"</span> + num + <span class=\"string\">\"个盘从 \"</span> + a + <span class=\"string\">\"-&gt;\"</span> + c);</span><br><span class=\"line\">            // 3.把B塔所有的盘从B-&gt;C，借助A</span><br><span class=\"line\">            hanoiTower(num-1, b, a, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Hanoitower &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        hanoiTower(5, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void hanoiTower(int num, char a, char b, char c) &#123;</span><br><span class=\"line\">        // 如果只有一个盘</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num == 1) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"第1个盘从 \"</span> + a + <span class=\"string\">\"-&gt;\"</span> + c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            // 如果有n&gt;=2情况，我们总是可以看做2个盘，最下面是一个盘，其余的是一个盘</span><br><span class=\"line\">            // 1.先把上面所有的盘A-&gt;B，借助C</span><br><span class=\"line\">            hanoiTower(num-1, a, c, b);</span><br><span class=\"line\">            // 2.最下面的盘A-&gt;C</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"第\"</span> + num + <span class=\"string\">\"个盘从 \"</span> + a + <span class=\"string\">\"-&gt;\"</span> + c);</span><br><span class=\"line\">            // 3.把B塔所有的盘从B-&gt;C，借助A</span><br><span class=\"line\">            hanoiTower(num-1, b, a, c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"动态规划实例","date":"2020-04-08T16:00:00.000Z","_content":"\n``` bash\n对一个整数数组，求不相邻的数相加的最大值\n分别用递归和动态规划求解：\n递归的代码更简洁，但是时间复杂度为O(n2)，\n动态规划是把前面计算的结果存储在内存中（数组），避免了重复计算，\n时间复杂度是O(n)，执行效率大大提高。\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class DynamicProgram {\n    public static void main(String[] args) {\n        int[] arr = {1,2,4,1,7,8,3};\n        int dp = dp_opt(arr);\n        System.out.println(dp);\n        System.out.println(\"=============\");\n        int rec = rec_opt(arr, arr.length-1);\n        System.out.println(rec);\n    }\n\n    // 递归\n    public static int rec_opt(int[] arr, int i) {\n        if (i == 0) {\n            return arr[0];\n        } else if (i == 1) {\n            return Math.max(arr[0], arr[1]);\n        } else {\n            int a = rec_opt(arr, i-2) + arr[i];\n            int b = rec_opt(arr, i-1);\n            return Math.max(a, b);\n        }\n    }\n\n    // 动态规划\n    public static int dp_opt(int[] arr) {\n        int[] opt = new int[arr.length];\n        opt[0] = arr[0];\n        opt[1] = Math.max(arr[0], arr[1]);\n        for (int i=2; i<arr.length; i++) {\n            int a = opt[i-2] + arr[i];\n            int b = opt[i-1];\n            opt[i] = Math.max(a, b);\n        }\n        return opt[arr.length-1];\n    }\n}\n\n```\n","source":"_posts/algorithm_动态规划实例一.md","raw":"---\ntitle: 动态规划实例\ndate: 2020-04-09\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n对一个整数数组，求不相邻的数相加的最大值\n分别用递归和动态规划求解：\n递归的代码更简洁，但是时间复杂度为O(n2)，\n动态规划是把前面计算的结果存储在内存中（数组），避免了重复计算，\n时间复杂度是O(n)，执行效率大大提高。\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class DynamicProgram {\n    public static void main(String[] args) {\n        int[] arr = {1,2,4,1,7,8,3};\n        int dp = dp_opt(arr);\n        System.out.println(dp);\n        System.out.println(\"=============\");\n        int rec = rec_opt(arr, arr.length-1);\n        System.out.println(rec);\n    }\n\n    // 递归\n    public static int rec_opt(int[] arr, int i) {\n        if (i == 0) {\n            return arr[0];\n        } else if (i == 1) {\n            return Math.max(arr[0], arr[1]);\n        } else {\n            int a = rec_opt(arr, i-2) + arr[i];\n            int b = rec_opt(arr, i-1);\n            return Math.max(a, b);\n        }\n    }\n\n    // 动态规划\n    public static int dp_opt(int[] arr) {\n        int[] opt = new int[arr.length];\n        opt[0] = arr[0];\n        opt[1] = Math.max(arr[0], arr[1]);\n        for (int i=2; i<arr.length; i++) {\n            int a = opt[i-2] + arr[i];\n            int b = opt[i-1];\n            opt[i] = Math.max(a, b);\n        }\n        return opt[arr.length-1];\n    }\n}\n\n```\n","slug":"algorithm_动态规划实例一","published":1,"updated":"2021-11-03T15:25:28.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vr000c0w8n0myoh69d","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对一个整数数组，求不相邻的数相加的最大值</span><br><span class=\"line\">分别用递归和动态规划求解：</span><br><span class=\"line\">递归的代码更简洁，但是时间复杂度为O(n2)，</span><br><span class=\"line\">动态规划是把前面计算的结果存储在内存中（数组），避免了重复计算，</span><br><span class=\"line\">时间复杂度是O(n)，执行效率大大提高。</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DynamicProgram &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;1,2,4,1,7,8,3&#125;;</span><br><span class=\"line\">        int dp = dp_opt(arr);</span><br><span class=\"line\">        System.out.println(dp);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=============\"</span>);</span><br><span class=\"line\">        int rec = rec_opt(arr, arr.length-1);</span><br><span class=\"line\">        System.out.println(rec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 递归</span><br><span class=\"line\">    public static int rec_opt(int[] arr, int i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == 0) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> arr[0];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == 1) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> Math.max(arr[0], arr[1]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            int a = rec_opt(arr, i-2) + arr[i];</span><br><span class=\"line\">            int b = rec_opt(arr, i-1);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> Math.max(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 动态规划</span><br><span class=\"line\">    public static int dp_opt(int[] arr) &#123;</span><br><span class=\"line\">        int[] opt = new int[arr.length];</span><br><span class=\"line\">        opt[0] = arr[0];</span><br><span class=\"line\">        opt[1] = Math.max(arr[0], arr[1]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i=2; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">            int a = opt[i-2] + arr[i];</span><br><span class=\"line\">            int b = opt[i-1];</span><br><span class=\"line\">            opt[i] = Math.max(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> opt[arr.length-1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">对一个整数数组，求不相邻的数相加的最大值</span><br><span class=\"line\">分别用递归和动态规划求解：</span><br><span class=\"line\">递归的代码更简洁，但是时间复杂度为O(n2)，</span><br><span class=\"line\">动态规划是把前面计算的结果存储在内存中（数组），避免了重复计算，</span><br><span class=\"line\">时间复杂度是O(n)，执行效率大大提高。</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DynamicProgram &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;1,2,4,1,7,8,3&#125;;</span><br><span class=\"line\">        int dp = dp_opt(arr);</span><br><span class=\"line\">        System.out.println(dp);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"=============\"</span>);</span><br><span class=\"line\">        int rec = rec_opt(arr, arr.length-1);</span><br><span class=\"line\">        System.out.println(rec);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 递归</span><br><span class=\"line\">    public static int rec_opt(int[] arr, int i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == 0) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> arr[0];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == 1) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> Math.max(arr[0], arr[1]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            int a = rec_opt(arr, i-2) + arr[i];</span><br><span class=\"line\">            int b = rec_opt(arr, i-1);</span><br><span class=\"line\">            <span class=\"built_in\">return</span> Math.max(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 动态规划</span><br><span class=\"line\">    public static int dp_opt(int[] arr) &#123;</span><br><span class=\"line\">        int[] opt = new int[arr.length];</span><br><span class=\"line\">        opt[0] = arr[0];</span><br><span class=\"line\">        opt[1] = Math.max(arr[0], arr[1]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i=2; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">            int a = opt[i-2] + arr[i];</span><br><span class=\"line\">            int b = opt[i-1];</span><br><span class=\"line\">            opt[i] = Math.max(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> opt[arr.length-1];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"图，深度优先和广度优先算法","date":"2020-03-21T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n\nimport javax.swing.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Graph {\n    private ArrayList<String> vertexList;\n    private int[][] edges;\n    private int numOfEdges;\n    private boolean[] isVisited;\n\n    public static void main(String[] args) {\n        int n = 5;\n        String[] vertexs = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n        Graph graph = new Graph(n);\n        for (String vertex : vertexs) {\n            graph.insertVertex(vertex);\n        }\n        graph.insertEdge(0, 1, 1);\n        graph.insertEdge(0, 2, 1);\n        graph.insertEdge(1, 2, 1);\n        graph.insertEdge(1, 3, 1);\n        graph.insertEdge(1, 4, 1);\n\n        // 显示一把邻接矩阵\n        graph.showGraph();\n\n//        System.out.println(\"深度遍历\");\n//        graph.dfs();\n\n        System.out.println();\n        System.out.println(\"广度遍历\");\n        graph.bfs();\n    }\n\n    public Graph(int n) {\n        edges = new int[n][n];\n        vertexList = new ArrayList<String>(n);\n        numOfEdges = 0;\n        isVisited = new boolean[n];\n    }\n\n    // 深度优先遍历算法\n    private void dfs(boolean[] isVisited, int i) {\n        System.out.print(getValueByIndex(i) + \"->\");\n        isVisited[i] = true;\n        int w = getFirstNeighbor(i);\n        while (w != -1) {\n            if (!isVisited[w]) {\n                dfs(isVisited, w);\n            }\n            // 根据前一个邻接节点，获取下一个邻接节点\n            w = getNextNeighbor(i, w);\n        }\n    }\n\n    // 对dfs进行重载，遍历所有结点，进行dfs\n    public void dfs() {\n        for (int i=0; i < getNumOfVertex(); i++) {\n            if (isVisited[i]) {\n                continue;\n            }\n            dfs(isVisited, i);\n        }\n    }\n\n    // 广度优先遍历算法\n    private void bfs(boolean[] isVisited, int i) {\n        int u;\n        int w;\n        LinkedList queue = new LinkedList();\n        System.out.print(getValueByIndex(i) + \"=>\");\n        isVisited[i] = true;\n        queue.addLast(i);\n\n        while ( !queue.isEmpty()) {\n            u = (Integer) queue.removeFirst();\n            w = getFirstNeighbor(u);\n            while (w != -1) {\n                if (!isVisited[w]) {\n                    System.out.print(getValueByIndex(w) + \"=>\");\n                    isVisited[w] = true;\n                    queue.addLast(w);\n                }\n                // 根据结点u，查找w后面的一个邻结点，递归查找\n                w = getNextNeighbor(u, w);\n            }\n        }\n    }\n\n    // 对bfs进行重载，遍历所有结点\n    public void bfs() {\n        for (int i = 0; i < getNumOfVertex(); i++) {\n            if (isVisited[i]) {\n                continue;\n            }\n            bfs(isVisited, i);\n        }\n    }\n\n    // 获取第一个邻接节点的下标w\n    public int getFirstNeighbor(int index) {\n        for (int j = 0; j < vertexList.size(); j++) {\n            if (edges[index][j] > 0) {\n                return j;\n            }\n        }\n        return -1;\n    }\n\n    // 根据前一个邻接节点，获取下一个邻接节点\n    public int getNextNeighbor(int v1, int v2) {\n        for (int j = v2 + 1; j < vertexList.size(); j++) {\n            if(edges[v1][j] > 0) {\n                return j;\n            }\n        }\n        return -1;\n    }\n\n    public void insertVertex(String vertex) {\n        vertexList.add(vertex);\n    }\n\n    public void insertEdge(int v1, int v2, int weight) {\n        edges[v1][v2] = weight;\n        edges[v2][v1] = weight;\n        numOfEdges++;\n    }\n\n    public String getValueByIndex(int i) {\n        return vertexList.get(i);\n    }\n\n    public int getNumOfVertex() {\n        return vertexList.size();\n    }\n\n    public int getNumOfEdges() {\n        return numOfEdges;\n    }\n\n    public void showGraph() {\n        for (int[] link : edges) {\n            System.err.println(Arrays.toString(link));\n        }\n    }\n}\n\n```\n","source":"_posts/algorithm_图，深度优先和广度优先算法.md","raw":"---\ntitle: 图，深度优先和广度优先算法\ndate: 2020-03-22\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n\nimport javax.swing.*;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\n\npublic class Graph {\n    private ArrayList<String> vertexList;\n    private int[][] edges;\n    private int numOfEdges;\n    private boolean[] isVisited;\n\n    public static void main(String[] args) {\n        int n = 5;\n        String[] vertexs = {\"A\", \"B\", \"C\", \"D\", \"E\"};\n        Graph graph = new Graph(n);\n        for (String vertex : vertexs) {\n            graph.insertVertex(vertex);\n        }\n        graph.insertEdge(0, 1, 1);\n        graph.insertEdge(0, 2, 1);\n        graph.insertEdge(1, 2, 1);\n        graph.insertEdge(1, 3, 1);\n        graph.insertEdge(1, 4, 1);\n\n        // 显示一把邻接矩阵\n        graph.showGraph();\n\n//        System.out.println(\"深度遍历\");\n//        graph.dfs();\n\n        System.out.println();\n        System.out.println(\"广度遍历\");\n        graph.bfs();\n    }\n\n    public Graph(int n) {\n        edges = new int[n][n];\n        vertexList = new ArrayList<String>(n);\n        numOfEdges = 0;\n        isVisited = new boolean[n];\n    }\n\n    // 深度优先遍历算法\n    private void dfs(boolean[] isVisited, int i) {\n        System.out.print(getValueByIndex(i) + \"->\");\n        isVisited[i] = true;\n        int w = getFirstNeighbor(i);\n        while (w != -1) {\n            if (!isVisited[w]) {\n                dfs(isVisited, w);\n            }\n            // 根据前一个邻接节点，获取下一个邻接节点\n            w = getNextNeighbor(i, w);\n        }\n    }\n\n    // 对dfs进行重载，遍历所有结点，进行dfs\n    public void dfs() {\n        for (int i=0; i < getNumOfVertex(); i++) {\n            if (isVisited[i]) {\n                continue;\n            }\n            dfs(isVisited, i);\n        }\n    }\n\n    // 广度优先遍历算法\n    private void bfs(boolean[] isVisited, int i) {\n        int u;\n        int w;\n        LinkedList queue = new LinkedList();\n        System.out.print(getValueByIndex(i) + \"=>\");\n        isVisited[i] = true;\n        queue.addLast(i);\n\n        while ( !queue.isEmpty()) {\n            u = (Integer) queue.removeFirst();\n            w = getFirstNeighbor(u);\n            while (w != -1) {\n                if (!isVisited[w]) {\n                    System.out.print(getValueByIndex(w) + \"=>\");\n                    isVisited[w] = true;\n                    queue.addLast(w);\n                }\n                // 根据结点u，查找w后面的一个邻结点，递归查找\n                w = getNextNeighbor(u, w);\n            }\n        }\n    }\n\n    // 对bfs进行重载，遍历所有结点\n    public void bfs() {\n        for (int i = 0; i < getNumOfVertex(); i++) {\n            if (isVisited[i]) {\n                continue;\n            }\n            bfs(isVisited, i);\n        }\n    }\n\n    // 获取第一个邻接节点的下标w\n    public int getFirstNeighbor(int index) {\n        for (int j = 0; j < vertexList.size(); j++) {\n            if (edges[index][j] > 0) {\n                return j;\n            }\n        }\n        return -1;\n    }\n\n    // 根据前一个邻接节点，获取下一个邻接节点\n    public int getNextNeighbor(int v1, int v2) {\n        for (int j = v2 + 1; j < vertexList.size(); j++) {\n            if(edges[v1][j] > 0) {\n                return j;\n            }\n        }\n        return -1;\n    }\n\n    public void insertVertex(String vertex) {\n        vertexList.add(vertex);\n    }\n\n    public void insertEdge(int v1, int v2, int weight) {\n        edges[v1][v2] = weight;\n        edges[v2][v1] = weight;\n        numOfEdges++;\n    }\n\n    public String getValueByIndex(int i) {\n        return vertexList.get(i);\n    }\n\n    public int getNumOfVertex() {\n        return vertexList.size();\n    }\n\n    public int getNumOfEdges() {\n        return numOfEdges;\n    }\n\n    public void showGraph() {\n        for (int[] link : edges) {\n            System.err.println(Arrays.toString(link));\n        }\n    }\n}\n\n```\n","slug":"algorithm_图，深度优先和广度优先算法","published":1,"updated":"2021-11-03T15:26:54.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vs000d0w8n26hthiqr","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import javax.swing.*;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Graph &#123;</span><br><span class=\"line\">    private ArrayList&lt;String&gt; vertexList;</span><br><span class=\"line\">    private int[][] edges;</span><br><span class=\"line\">    private int numOfEdges;</span><br><span class=\"line\">    private boolean[] isVisited;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int n = 5;</span><br><span class=\"line\">        String[] vertexs = &#123;<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"E\"</span>&#125;;</span><br><span class=\"line\">        Graph graph = new Graph(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String vertex : vertexs) &#123;</span><br><span class=\"line\">            graph.insertVertex(vertex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        graph.insertEdge(0, 1, 1);</span><br><span class=\"line\">        graph.insertEdge(0, 2, 1);</span><br><span class=\"line\">        graph.insertEdge(1, 2, 1);</span><br><span class=\"line\">        graph.insertEdge(1, 3, 1);</span><br><span class=\"line\">        graph.insertEdge(1, 4, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 显示一把邻接矩阵</span><br><span class=\"line\">        graph.showGraph();</span><br><span class=\"line\"></span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"深度遍历\"</span>);</span><br><span class=\"line\">//        graph.dfs();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"广度遍历\"</span>);</span><br><span class=\"line\">        graph.bfs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Graph(int n) &#123;</span><br><span class=\"line\">        edges = new int[n][n];</span><br><span class=\"line\">        vertexList = new ArrayList&lt;String&gt;(n);</span><br><span class=\"line\">        numOfEdges = 0;</span><br><span class=\"line\">        isVisited = new boolean[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 深度优先遍历算法</span><br><span class=\"line\">    private void dfs(boolean[] isVisited, int i) &#123;</span><br><span class=\"line\">        System.out.print(getValueByIndex(i) + <span class=\"string\">\"-&gt;\"</span>);</span><br><span class=\"line\">        isVisited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        int w = getFirstNeighbor(i);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (w != -1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isVisited[w]) &#123;</span><br><span class=\"line\">                dfs(isVisited, w);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 根据前一个邻接节点，获取下一个邻接节点</span><br><span class=\"line\">            w = getNextNeighbor(i, w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对dfs进行重载，遍历所有结点，进行dfs</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">dfs</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i=0; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isVisited[i]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dfs(isVisited, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 广度优先遍历算法</span><br><span class=\"line\">    private void bfs(boolean[] isVisited, int i) &#123;</span><br><span class=\"line\">        int u;</span><br><span class=\"line\">        int w;</span><br><span class=\"line\">        LinkedList queue = new LinkedList();</span><br><span class=\"line\">        System.out.print(getValueByIndex(i) + <span class=\"string\">\"=&gt;\"</span>);</span><br><span class=\"line\">        isVisited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        queue.addLast(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( !queue.isEmpty()) &#123;</span><br><span class=\"line\">            u = (Integer) queue.removeFirst();</span><br><span class=\"line\">            w = getFirstNeighbor(u);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (w != -1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isVisited[w]) &#123;</span><br><span class=\"line\">                    System.out.print(getValueByIndex(w) + <span class=\"string\">\"=&gt;\"</span>);</span><br><span class=\"line\">                    isVisited[w] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    queue.addLast(w);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 根据结点u，查找w后面的一个邻结点，递归查找</span><br><span class=\"line\">                w = getNextNeighbor(u, w);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对bfs进行重载，遍历所有结点</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">bfs</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isVisited[i]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bfs(isVisited, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 获取第一个邻接节点的下标w</span><br><span class=\"line\">    public int getFirstNeighbor(int index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = 0; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edges[index][j] &gt; 0) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 根据前一个邻接节点，获取下一个邻接节点</span><br><span class=\"line\">    public int getNextNeighbor(int v1, int v2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = v2 + 1; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edges[v1][j] &gt; 0) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void insertVertex(String vertex) &#123;</span><br><span class=\"line\">        vertexList.add(vertex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void insertEdge(int v1, int v2, int weight) &#123;</span><br><span class=\"line\">        edges[v1][v2] = weight;</span><br><span class=\"line\">        edges[v2][v1] = weight;</span><br><span class=\"line\">        numOfEdges++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getValueByIndex(int i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> vertexList.get(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">getNumOfVertex</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> vertexList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">getNumOfEdges</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> numOfEdges;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">showGraph</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int[] link : edges) &#123;</span><br><span class=\"line\">            System.err.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">import javax.swing.*;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.Arrays;</span><br><span class=\"line\">import java.util.LinkedList;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Graph &#123;</span><br><span class=\"line\">    private ArrayList&lt;String&gt; vertexList;</span><br><span class=\"line\">    private int[][] edges;</span><br><span class=\"line\">    private int numOfEdges;</span><br><span class=\"line\">    private boolean[] isVisited;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int n = 5;</span><br><span class=\"line\">        String[] vertexs = &#123;<span class=\"string\">\"A\"</span>, <span class=\"string\">\"B\"</span>, <span class=\"string\">\"C\"</span>, <span class=\"string\">\"D\"</span>, <span class=\"string\">\"E\"</span>&#125;;</span><br><span class=\"line\">        Graph graph = new Graph(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String vertex : vertexs) &#123;</span><br><span class=\"line\">            graph.insertVertex(vertex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        graph.insertEdge(0, 1, 1);</span><br><span class=\"line\">        graph.insertEdge(0, 2, 1);</span><br><span class=\"line\">        graph.insertEdge(1, 2, 1);</span><br><span class=\"line\">        graph.insertEdge(1, 3, 1);</span><br><span class=\"line\">        graph.insertEdge(1, 4, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 显示一把邻接矩阵</span><br><span class=\"line\">        graph.showGraph();</span><br><span class=\"line\"></span><br><span class=\"line\">//        System.out.println(<span class=\"string\">\"深度遍历\"</span>);</span><br><span class=\"line\">//        graph.dfs();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"广度遍历\"</span>);</span><br><span class=\"line\">        graph.bfs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Graph(int n) &#123;</span><br><span class=\"line\">        edges = new int[n][n];</span><br><span class=\"line\">        vertexList = new ArrayList&lt;String&gt;(n);</span><br><span class=\"line\">        numOfEdges = 0;</span><br><span class=\"line\">        isVisited = new boolean[n];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 深度优先遍历算法</span><br><span class=\"line\">    private void dfs(boolean[] isVisited, int i) &#123;</span><br><span class=\"line\">        System.out.print(getValueByIndex(i) + <span class=\"string\">\"-&gt;\"</span>);</span><br><span class=\"line\">        isVisited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        int w = getFirstNeighbor(i);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (w != -1) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isVisited[w]) &#123;</span><br><span class=\"line\">                dfs(isVisited, w);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 根据前一个邻接节点，获取下一个邻接节点</span><br><span class=\"line\">            w = getNextNeighbor(i, w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对dfs进行重载，遍历所有结点，进行dfs</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">dfs</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i=0; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isVisited[i]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dfs(isVisited, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 广度优先遍历算法</span><br><span class=\"line\">    private void bfs(boolean[] isVisited, int i) &#123;</span><br><span class=\"line\">        int u;</span><br><span class=\"line\">        int w;</span><br><span class=\"line\">        LinkedList queue = new LinkedList();</span><br><span class=\"line\">        System.out.print(getValueByIndex(i) + <span class=\"string\">\"=&gt;\"</span>);</span><br><span class=\"line\">        isVisited[i] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        queue.addLast(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( !queue.isEmpty()) &#123;</span><br><span class=\"line\">            u = (Integer) queue.removeFirst();</span><br><span class=\"line\">            w = getFirstNeighbor(u);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (w != -1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!isVisited[w]) &#123;</span><br><span class=\"line\">                    System.out.print(getValueByIndex(w) + <span class=\"string\">\"=&gt;\"</span>);</span><br><span class=\"line\">                    isVisited[w] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                    queue.addLast(w);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                // 根据结点u，查找w后面的一个邻结点，递归查找</span><br><span class=\"line\">                w = getNextNeighbor(u, w);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 对bfs进行重载，遍历所有结点</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">bfs</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; getNumOfVertex(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isVisited[i]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bfs(isVisited, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 获取第一个邻接节点的下标w</span><br><span class=\"line\">    public int getFirstNeighbor(int index) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = 0; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edges[index][j] &gt; 0) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 根据前一个邻接节点，获取下一个邻接节点</span><br><span class=\"line\">    public int getNextNeighbor(int v1, int v2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = v2 + 1; j &lt; vertexList.size(); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(edges[v1][j] &gt; 0) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void insertVertex(String vertex) &#123;</span><br><span class=\"line\">        vertexList.add(vertex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void insertEdge(int v1, int v2, int weight) &#123;</span><br><span class=\"line\">        edges[v1][v2] = weight;</span><br><span class=\"line\">        edges[v2][v1] = weight;</span><br><span class=\"line\">        numOfEdges++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public String getValueByIndex(int i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> vertexList.get(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">getNumOfVertex</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> vertexList.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">getNumOfEdges</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> numOfEdges;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">showGraph</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int[] link : edges) &#123;</span><br><span class=\"line\">            System.err.println(Arrays.toString(link));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"动态规划解决 0-1背包问题","date":"2020-04-07T16:00:00.000Z","_content":"\n``` bash\n 0-1背包问题算法的主要思想：\n 利用动态规划来解决，每次遍历到的第i个物品，利用w[i]和val[i]来确定是否需要将该物品放入背包中。\n 即对于给定的n个物品，设val[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量，再令v[i][j]\n 表示在前i个物品中能够装入容量为j的背包中的最大价值。\n 计算公式：\n  1）v[i][0]=v[0][i]=0; // 表示表格的第一行和第一列都是0\n  2）当w[i]>j时，v[i][j]=v[i-1][j] // 当准备加入新增的商品的容量大于当前背包的容量时，就直接使用上一个单元格的装入策略\n  3）当j>=w[i]时，v[i][j]=max{v[i-1][j], val[i]+v[i-1][j-w[i]]} // 当准备加入的新增商品容量小于等于当前背包剩余容量时\n     在两者之间取最大值。v[i-1][j-w[i]] 装入i-1个商品时背包剩余容量的最大值。\n\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class KnapsackProblem {\n    public static void main(String[] args) {\n        int[] w = {1, 4, 3};    // 物品的重量\n        int[] val = {1500, 3000, 2000};   // 物品的价值\n        int m = 4;              // 背包的重量\n        KnapsackProblem kp = new KnapsackProblem();\n        kp.knapsack(w, val, m);\n    }\n\n    /**\n     * @param w 物品的重量\n     * @param val 物品的价值\n     * @param m 背包的重量\n     * @return void\n     */\n    private void knapsack(int[] w, int[] val, int m) {\n        // 物品的个数\n        int n = val.length;\n        // v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值\n        int[][] v = new int[n+1][m+1];\n        // 定义一个二维数组记录放入商品的情况\n        int[][] path = new int[n+1][m+1];\n\n        // 初始化第一行和第一列\n        for(int i = 0; i < v.length; i++) {\n            v[i][0] = 0;\n        }\n        for(int i = 0; i < v[0].length; i++) {\n            v[0][i] = 0;\n        }\n\n        // 根据前面的公式来动态规划处理\n        for(int i=1; i<v.length; i++) {\n            for(int j=1; j<v[0].length; j++) {\n                if (w[i-1] > j) {\n                    v[i][j] = v[i-1][j];\n                } else {\n                    if (v[i-1][j] < val[i-1] + v[i-1][j-w[i-1]]) {\n                        v[i][j] = val[i-1] + v[i-1][j-w[i-1]];\n                        path[i][j] = 1;\n                    } else {\n                        v[i][j] = v[i-1][j];\n                    }\n                }\n            }\n        }\n\n        printArr(v);\n        System.out.println(\"==================\");\n\n        // 商品放入情况\n        int i = path.length - 1;    // 行的最大下标\n        int j = path[0].length - 1; // 列的最大下标\n        while (i > 0 && j > 0) {\n            if (path[i][j] == 1) {\n                System.out.printf(\"第%d个商品放入背包\\n\", i);\n                j -= w[i-1];\n            }\n            i--;\n        }\n    }\n\n    private void printArr(int[][] arr) {\n        for(int i=0; i<arr.length; i++) {\n            for (int j=0; j<arr[i].length; j++) {\n                System.out.print(arr[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```\n","source":"_posts/algorithm_动态规划实例二.md","raw":"---\ntitle: 动态规划解决 0-1背包问题\ndate: 2020-04-08\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n 0-1背包问题算法的主要思想：\n 利用动态规划来解决，每次遍历到的第i个物品，利用w[i]和val[i]来确定是否需要将该物品放入背包中。\n 即对于给定的n个物品，设val[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量，再令v[i][j]\n 表示在前i个物品中能够装入容量为j的背包中的最大价值。\n 计算公式：\n  1）v[i][0]=v[0][i]=0; // 表示表格的第一行和第一列都是0\n  2）当w[i]>j时，v[i][j]=v[i-1][j] // 当准备加入新增的商品的容量大于当前背包的容量时，就直接使用上一个单元格的装入策略\n  3）当j>=w[i]时，v[i][j]=max{v[i-1][j], val[i]+v[i-1][j-w[i]]} // 当准备加入的新增商品容量小于等于当前背包剩余容量时\n     在两者之间取最大值。v[i-1][j-w[i]] 装入i-1个商品时背包剩余容量的最大值。\n\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class KnapsackProblem {\n    public static void main(String[] args) {\n        int[] w = {1, 4, 3};    // 物品的重量\n        int[] val = {1500, 3000, 2000};   // 物品的价值\n        int m = 4;              // 背包的重量\n        KnapsackProblem kp = new KnapsackProblem();\n        kp.knapsack(w, val, m);\n    }\n\n    /**\n     * @param w 物品的重量\n     * @param val 物品的价值\n     * @param m 背包的重量\n     * @return void\n     */\n    private void knapsack(int[] w, int[] val, int m) {\n        // 物品的个数\n        int n = val.length;\n        // v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值\n        int[][] v = new int[n+1][m+1];\n        // 定义一个二维数组记录放入商品的情况\n        int[][] path = new int[n+1][m+1];\n\n        // 初始化第一行和第一列\n        for(int i = 0; i < v.length; i++) {\n            v[i][0] = 0;\n        }\n        for(int i = 0; i < v[0].length; i++) {\n            v[0][i] = 0;\n        }\n\n        // 根据前面的公式来动态规划处理\n        for(int i=1; i<v.length; i++) {\n            for(int j=1; j<v[0].length; j++) {\n                if (w[i-1] > j) {\n                    v[i][j] = v[i-1][j];\n                } else {\n                    if (v[i-1][j] < val[i-1] + v[i-1][j-w[i-1]]) {\n                        v[i][j] = val[i-1] + v[i-1][j-w[i-1]];\n                        path[i][j] = 1;\n                    } else {\n                        v[i][j] = v[i-1][j];\n                    }\n                }\n            }\n        }\n\n        printArr(v);\n        System.out.println(\"==================\");\n\n        // 商品放入情况\n        int i = path.length - 1;    // 行的最大下标\n        int j = path[0].length - 1; // 列的最大下标\n        while (i > 0 && j > 0) {\n            if (path[i][j] == 1) {\n                System.out.printf(\"第%d个商品放入背包\\n\", i);\n                j -= w[i-1];\n            }\n            i--;\n        }\n    }\n\n    private void printArr(int[][] arr) {\n        for(int i=0; i<arr.length; i++) {\n            for (int j=0; j<arr[i].length; j++) {\n                System.out.print(arr[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n\n```\n","slug":"algorithm_动态规划实例二","published":1,"updated":"2021-11-03T15:25:22.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vu000i0w8n71um5bl0","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 0-1背包问题算法的主要思想：</span><br><span class=\"line\"> 利用动态规划来解决，每次遍历到的第i个物品，利用w[i]和val[i]来确定是否需要将该物品放入背包中。</span><br><span class=\"line\"> 即对于给定的n个物品，设val[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量，再令v[i][j]</span><br><span class=\"line\"> 表示在前i个物品中能够装入容量为j的背包中的最大价值。</span><br><span class=\"line\"> 计算公式：</span><br><span class=\"line\">  1）v[i][0]=v[0][i]=0; // 表示表格的第一行和第一列都是0</span><br><span class=\"line\">  2）当w[i]&gt;j时，v[i][j]=v[i-1][j] // 当准备加入新增的商品的容量大于当前背包的容量时，就直接使用上一个单元格的装入策略</span><br><span class=\"line\">  3）当j&gt;=w[i]时，v[i][j]=max&#123;v[i-1][j], val[i]+v[i-1][j-w[i]]&#125; // 当准备加入的新增商品容量小于等于当前背包剩余容量时</span><br><span class=\"line\">     在两者之间取最大值。v[i-1][j-w[i]] 装入i-1个商品时背包剩余容量的最大值。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class KnapsackProblem &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] w = &#123;1, 4, 3&#125;;    // 物品的重量</span><br><span class=\"line\">        int[] val = &#123;1500, 3000, 2000&#125;;   // 物品的价值</span><br><span class=\"line\">        int m = 4;              // 背包的重量</span><br><span class=\"line\">        KnapsackProblem kp = new KnapsackProblem();</span><br><span class=\"line\">        kp.knapsack(w, val, m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param w 物品的重量</span><br><span class=\"line\">     * @param val 物品的价值</span><br><span class=\"line\">     * @param m 背包的重量</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span> void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void knapsack(int[] w, int[] val, int m) &#123;</span><br><span class=\"line\">        // 物品的个数</span><br><span class=\"line\">        int n = val.length;</span><br><span class=\"line\">        // v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值</span><br><span class=\"line\">        int[][] v = new int[n+1][m+1];</span><br><span class=\"line\">        // 定义一个二维数组记录放入商品的情况</span><br><span class=\"line\">        int[][] path = new int[n+1][m+1];</span><br><span class=\"line\"></span><br><span class=\"line\">        // 初始化第一行和第一列</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = 0; i &lt; v.length; i++) &#123;</span><br><span class=\"line\">            v[i][0] = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = 0; i &lt; v[0].length; i++) &#123;</span><br><span class=\"line\">            v[0][i] = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 根据前面的公式来动态规划处理</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i=1; i&lt;v.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int j=1; j&lt;v[0].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (w[i-1] &gt; j) &#123;</span><br><span class=\"line\">                    v[i][j] = v[i-1][j];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v[i-1][j] &lt; val[i-1] + v[i-1][j-w[i-1]]) &#123;</span><br><span class=\"line\">                        v[i][j] = val[i-1] + v[i-1][j-w[i-1]];</span><br><span class=\"line\">                        path[i][j] = 1;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        v[i][j] = v[i-1][j];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printArr(v);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 商品放入情况</span><br><span class=\"line\">        int i = path.length - 1;    // 行的最大下标</span><br><span class=\"line\">        int j = path[0].length - 1; // 列的最大下标</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; 0 &amp;&amp; j &gt; 0) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (path[i][j] == 1) &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"第%d个商品放入背包\\n\"</span>, i);</span><br><span class=\"line\">                j -= w[i-1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void printArr(int[][] arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i=0; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j=0; j&lt;arr[i].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(arr[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 0-1背包问题算法的主要思想：</span><br><span class=\"line\"> 利用动态规划来解决，每次遍历到的第i个物品，利用w[i]和val[i]来确定是否需要将该物品放入背包中。</span><br><span class=\"line\"> 即对于给定的n个物品，设val[i]、w[i]分别为第i个物品的价值和重量，C为背包的容量，再令v[i][j]</span><br><span class=\"line\"> 表示在前i个物品中能够装入容量为j的背包中的最大价值。</span><br><span class=\"line\"> 计算公式：</span><br><span class=\"line\">  1）v[i][0]=v[0][i]=0; // 表示表格的第一行和第一列都是0</span><br><span class=\"line\">  2）当w[i]&gt;j时，v[i][j]=v[i-1][j] // 当准备加入新增的商品的容量大于当前背包的容量时，就直接使用上一个单元格的装入策略</span><br><span class=\"line\">  3）当j&gt;=w[i]时，v[i][j]=max&#123;v[i-1][j], val[i]+v[i-1][j-w[i]]&#125; // 当准备加入的新增商品容量小于等于当前背包剩余容量时</span><br><span class=\"line\">     在两者之间取最大值。v[i-1][j-w[i]] 装入i-1个商品时背包剩余容量的最大值。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class KnapsackProblem &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] w = &#123;1, 4, 3&#125;;    // 物品的重量</span><br><span class=\"line\">        int[] val = &#123;1500, 3000, 2000&#125;;   // 物品的价值</span><br><span class=\"line\">        int m = 4;              // 背包的重量</span><br><span class=\"line\">        KnapsackProblem kp = new KnapsackProblem();</span><br><span class=\"line\">        kp.knapsack(w, val, m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param w 物品的重量</span><br><span class=\"line\">     * @param val 物品的价值</span><br><span class=\"line\">     * @param m 背包的重量</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span> void</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private void knapsack(int[] w, int[] val, int m) &#123;</span><br><span class=\"line\">        // 物品的个数</span><br><span class=\"line\">        int n = val.length;</span><br><span class=\"line\">        // v[i][j] 表示在前i个物品中能够装入容量为j的背包中的最大价值</span><br><span class=\"line\">        int[][] v = new int[n+1][m+1];</span><br><span class=\"line\">        // 定义一个二维数组记录放入商品的情况</span><br><span class=\"line\">        int[][] path = new int[n+1][m+1];</span><br><span class=\"line\"></span><br><span class=\"line\">        // 初始化第一行和第一列</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = 0; i &lt; v.length; i++) &#123;</span><br><span class=\"line\">            v[i][0] = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i = 0; i &lt; v[0].length; i++) &#123;</span><br><span class=\"line\">            v[0][i] = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 根据前面的公式来动态规划处理</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i=1; i&lt;v.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(int j=1; j&lt;v[0].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (w[i-1] &gt; j) &#123;</span><br><span class=\"line\">                    v[i][j] = v[i-1][j];</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (v[i-1][j] &lt; val[i-1] + v[i-1][j-w[i-1]]) &#123;</span><br><span class=\"line\">                        v[i][j] = val[i-1] + v[i-1][j-w[i-1]];</span><br><span class=\"line\">                        path[i][j] = 1;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        v[i][j] = v[i-1][j];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printArr(v);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"==================\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 商品放入情况</span><br><span class=\"line\">        int i = path.length - 1;    // 行的最大下标</span><br><span class=\"line\">        int j = path[0].length - 1; // 列的最大下标</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt; 0 &amp;&amp; j &gt; 0) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (path[i][j] == 1) &#123;</span><br><span class=\"line\">                System.out.printf(<span class=\"string\">\"第%d个商品放入背包\\n\"</span>, i);</span><br><span class=\"line\">                j -= w[i-1];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private void printArr(int[][] arr) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int i=0; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j=0; j&lt;arr[i].length; j++) &#123;</span><br><span class=\"line\">                System.out.print(arr[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"基数排序","date":"2020-04-03T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic static void radixSort(int[] arr) {\n    // 求最大元素的长度\n    int max = arr[0];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    int maxLength = (max + \"\").length();\n\n    // 设置10个桶\n    int[][] bucket = new int[10][arr.length];\n    // 用来记录每个桶中放入元素的个数\n    int[] bucketElementCount = new int[10];\n\n    // 从个位数，到十位数，至更高位数依次 开始循环比较\n    for (int i = 0, n=1; i < maxLength; i++, n *= 10) {\n        // 放入桶中\n        for (int j = 0; j < arr.length; j++) {\n            int digitOfElement = arr[j] / n % 10;\n            bucket[digitOfElement][bucketElementCount[digitOfElement]] = arr[j];\n            bucketElementCount[digitOfElement]++;\n        }\n\n        // 按顺序放回到原数组\n        int index = 0;\n        for (int k = 0; k < bucketElementCount.length; k++) {\n            if (bucketElementCount[k] > 0) {\n                for (int l = 0; l < bucketElementCount[k]; l++) {\n                    arr[index++] = bucket[k][l];\n                }\n            }\n            // 每次循环使用后要回复初始值\n            bucketElementCount[k] = 0;\n        }\n\n    }\n    System.out.println(Arrays.toString(arr));\n\n}\n\n```\n","source":"_posts/algorithm_基数排序.md","raw":"---\ntitle: 基数排序\ndate: 2020-04-04\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic static void radixSort(int[] arr) {\n    // 求最大元素的长度\n    int max = arr[0];\n    for (int i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    int maxLength = (max + \"\").length();\n\n    // 设置10个桶\n    int[][] bucket = new int[10][arr.length];\n    // 用来记录每个桶中放入元素的个数\n    int[] bucketElementCount = new int[10];\n\n    // 从个位数，到十位数，至更高位数依次 开始循环比较\n    for (int i = 0, n=1; i < maxLength; i++, n *= 10) {\n        // 放入桶中\n        for (int j = 0; j < arr.length; j++) {\n            int digitOfElement = arr[j] / n % 10;\n            bucket[digitOfElement][bucketElementCount[digitOfElement]] = arr[j];\n            bucketElementCount[digitOfElement]++;\n        }\n\n        // 按顺序放回到原数组\n        int index = 0;\n        for (int k = 0; k < bucketElementCount.length; k++) {\n            if (bucketElementCount[k] > 0) {\n                for (int l = 0; l < bucketElementCount[k]; l++) {\n                    arr[index++] = bucket[k][l];\n                }\n            }\n            // 每次循环使用后要回复初始值\n            bucketElementCount[k] = 0;\n        }\n\n    }\n    System.out.println(Arrays.toString(arr));\n\n}\n\n```\n","slug":"algorithm_基数排序","published":1,"updated":"2021-11-03T15:26:11.797Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vv000l0w8n91065mvw","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void radixSort(int[] arr) &#123;</span><br><span class=\"line\">    // 求最大元素的长度</span><br><span class=\"line\">    int max = arr[0];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &gt; max) &#123;</span><br><span class=\"line\">            max = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int maxLength = (max + <span class=\"string\">\"\"</span>).length();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 设置10个桶</span><br><span class=\"line\">    int[][] bucket = new int[10][arr.length];</span><br><span class=\"line\">    // 用来记录每个桶中放入元素的个数</span><br><span class=\"line\">    int[] bucketElementCount = new int[10];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从个位数，到十位数，至更高位数依次 开始循环比较</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = 0, n=1; i &lt; maxLength; i++, n *= 10) &#123;</span><br><span class=\"line\">        // 放入桶中</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = 0; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            int digitOfElement = arr[j] / n % 10;</span><br><span class=\"line\">            bucket[digitOfElement][bucketElementCount[digitOfElement]] = arr[j];</span><br><span class=\"line\">            bucketElementCount[digitOfElement]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 按顺序放回到原数组</span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int k = 0; k &lt; bucketElementCount.length; k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bucketElementCount[k] &gt; 0) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (int l = 0; l &lt; bucketElementCount[k]; l++) &#123;</span><br><span class=\"line\">                    arr[index++] = bucket[k][l];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 每次循环使用后要回复初始值</span><br><span class=\"line\">            bucketElementCount[k] = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void radixSort(int[] arr) &#123;</span><br><span class=\"line\">    // 求最大元素的长度</span><br><span class=\"line\">    int max = arr[0];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &gt; max) &#123;</span><br><span class=\"line\">            max = arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int maxLength = (max + <span class=\"string\">\"\"</span>).length();</span><br><span class=\"line\"></span><br><span class=\"line\">    // 设置10个桶</span><br><span class=\"line\">    int[][] bucket = new int[10][arr.length];</span><br><span class=\"line\">    // 用来记录每个桶中放入元素的个数</span><br><span class=\"line\">    int[] bucketElementCount = new int[10];</span><br><span class=\"line\"></span><br><span class=\"line\">    // 从个位数，到十位数，至更高位数依次 开始循环比较</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = 0, n=1; i &lt; maxLength; i++, n *= 10) &#123;</span><br><span class=\"line\">        // 放入桶中</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int j = 0; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">            int digitOfElement = arr[j] / n % 10;</span><br><span class=\"line\">            bucket[digitOfElement][bucketElementCount[digitOfElement]] = arr[j];</span><br><span class=\"line\">            bucketElementCount[digitOfElement]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 按顺序放回到原数组</span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int k = 0; k &lt; bucketElementCount.length; k++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (bucketElementCount[k] &gt; 0) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (int l = 0; l &lt; bucketElementCount[k]; l++) &#123;</span><br><span class=\"line\">                    arr[index++] = bucket[k][l];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 每次循环使用后要回复初始值</span><br><span class=\"line\">            bucketElementCount[k] = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(Arrays.toString(arr));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"希尔排序","date":"2020-03-20T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class ShellSort {\n    public static void main(String[] args) {\n        int[] arr = {4, 5, 1, 9, 6, 7, 2, 8, 3, 0};\n        shellSort(arr);\n        shellSort2(arr);\n    }\n\n    /**\n     * 交换排序\n     */\n    public static void shellSort(int[] arr) {\n        int temp = 0;\n        for (int gap = arr.length/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < arr.length; i++) {\n                for (int j = i-gap; j >=0 ; j -= gap) {\n                    if (arr[j] > arr[j+gap]) {\n                        temp    = arr[j];\n                        arr[j]  = arr[j+gap];\n                        arr[j+gap]= temp;\n                    }\n                }\n            }\n            System.out.println(Arrays.toString(arr));\n        }\n    }\n\n\n    /**\n     *  移位排序，减少交换次数，效率更高\n     */\n    public static void shellSort2(int[] arr) {\n        int temp = 0;\n        for (int gap = arr.length/2; gap >0 ; gap /= 2) {\n            for (int i = gap; i < arr.length; i++) {\n                int j = i;\n                temp = arr[j];\n                if (arr[j] < arr[j-gap]) {\n                    while(j-gap >= 0 && temp < arr[j-gap]) {\n                        arr[j] = arr[j-gap];\n                        j -= gap;\n                    }\n                    arr[j] = temp;\n                }\n            }\n        }\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n```\n","source":"_posts/algorithm_希尔排序.md","raw":"---\ntitle: 希尔排序\ndate: 2020-03-21\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class ShellSort {\n    public static void main(String[] args) {\n        int[] arr = {4, 5, 1, 9, 6, 7, 2, 8, 3, 0};\n        shellSort(arr);\n        shellSort2(arr);\n    }\n\n    /**\n     * 交换排序\n     */\n    public static void shellSort(int[] arr) {\n        int temp = 0;\n        for (int gap = arr.length/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < arr.length; i++) {\n                for (int j = i-gap; j >=0 ; j -= gap) {\n                    if (arr[j] > arr[j+gap]) {\n                        temp    = arr[j];\n                        arr[j]  = arr[j+gap];\n                        arr[j+gap]= temp;\n                    }\n                }\n            }\n            System.out.println(Arrays.toString(arr));\n        }\n    }\n\n\n    /**\n     *  移位排序，减少交换次数，效率更高\n     */\n    public static void shellSort2(int[] arr) {\n        int temp = 0;\n        for (int gap = arr.length/2; gap >0 ; gap /= 2) {\n            for (int i = gap; i < arr.length; i++) {\n                int j = i;\n                temp = arr[j];\n                if (arr[j] < arr[j-gap]) {\n                    while(j-gap >= 0 && temp < arr[j-gap]) {\n                        arr[j] = arr[j-gap];\n                        j -= gap;\n                    }\n                    arr[j] = temp;\n                }\n            }\n        }\n        System.out.println(Arrays.toString(arr));\n    }\n\n}\n\n```\n","slug":"algorithm_希尔排序","published":1,"updated":"2021-11-03T15:27:00.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vw000p0w8ngrq5fte6","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ShellSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;4, 5, 1, 9, 6, 7, 2, 8, 3, 0&#125;;</span><br><span class=\"line\">        shellSort(arr);</span><br><span class=\"line\">        shellSort2(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 交换排序</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void shellSort(int[] arr) &#123;</span><br><span class=\"line\">        int temp = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int gap = arr.length/2; gap &gt; 0; gap /= 2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (int j = i-gap; j &gt;=0 ; j -= gap) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+gap]) &#123;</span><br><span class=\"line\">                        temp    = arr[j];</span><br><span class=\"line\">                        arr[j]  = arr[j+gap];</span><br><span class=\"line\">                        arr[j+gap]= temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  移位排序，减少交换次数，效率更高</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void shellSort2(int[] arr) &#123;</span><br><span class=\"line\">        int temp = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int gap = arr.length/2; gap &gt;0 ; gap /= 2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                int j = i;</span><br><span class=\"line\">                temp = arr[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &lt; arr[j-gap]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(j-gap &gt;= 0 &amp;&amp; temp &lt; arr[j-gap]) &#123;</span><br><span class=\"line\">                        arr[j] = arr[j-gap];</span><br><span class=\"line\">                        j -= gap;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    arr[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ShellSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;4, 5, 1, 9, 6, 7, 2, 8, 3, 0&#125;;</span><br><span class=\"line\">        shellSort(arr);</span><br><span class=\"line\">        shellSort2(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 交换排序</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void shellSort(int[] arr) &#123;</span><br><span class=\"line\">        int temp = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int gap = arr.length/2; gap &gt; 0; gap /= 2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (int j = i-gap; j &gt;=0 ; j -= gap) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+gap]) &#123;</span><br><span class=\"line\">                        temp    = arr[j];</span><br><span class=\"line\">                        arr[j]  = arr[j+gap];</span><br><span class=\"line\">                        arr[j+gap]= temp;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     *  移位排序，减少交换次数，效率更高</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void shellSort2(int[] arr) &#123;</span><br><span class=\"line\">        int temp = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int gap = arr.length/2; gap &gt;0 ; gap /= 2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">                int j = i;</span><br><span class=\"line\">                temp = arr[j];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (arr[j] &lt; arr[j-gap]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span>(j-gap &gt;= 0 &amp;&amp; temp &lt; arr[j-gap]) &#123;</span><br><span class=\"line\">                        arr[j] = arr[j-gap];</span><br><span class=\"line\">                        j -= gap;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    arr[j] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java语言实现快排","date":"2020-03-25T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n快排算法：\npublic static void quickSort(int[] arr, int low, int high) {\n    // 递归设置终止条件，当只有一个元素时\n    if (low >= high) {\n        return;\n    }\n    int i, j, tmp, t;\n    i = low;\n    j = high;\n    // 设置基准位\n    tmp = arr[low];\n\n    while (i < j) {\n        // 先从右边比较，满足条件则向左移动\n        while (arr[j] >= tmp && i<j) {\n            j--;\n        }\n        // 从左边比较，满足条件则向右移动\n        while (arr[i] <= tmp && i<j) {\n            i++;\n        }\n        // 上面2个while条件都不满足时，交换左右数据\n        if (i<j) {\n            t = arr[j];\n            arr[j] = arr[i];\n            arr[i] = t;\n        }\n    }\n    // i==j时，和基准位交换位置\n    arr[low] = arr[i];\n    arr[i] = tmp;\n    quickSort(arr, low, i-1);\n    quickSort(arr,i+1, high);\n}\n\n```\n","source":"_posts/algorithm_快速排序算法.md","raw":"---\ntitle: Java语言实现快排\ndate: 2020-03-26\ncategories:\n- algorithm\ntags:\n- php\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n快排算法：\npublic static void quickSort(int[] arr, int low, int high) {\n    // 递归设置终止条件，当只有一个元素时\n    if (low >= high) {\n        return;\n    }\n    int i, j, tmp, t;\n    i = low;\n    j = high;\n    // 设置基准位\n    tmp = arr[low];\n\n    while (i < j) {\n        // 先从右边比较，满足条件则向左移动\n        while (arr[j] >= tmp && i<j) {\n            j--;\n        }\n        // 从左边比较，满足条件则向右移动\n        while (arr[i] <= tmp && i<j) {\n            i++;\n        }\n        // 上面2个while条件都不满足时，交换左右数据\n        if (i<j) {\n            t = arr[j];\n            arr[j] = arr[i];\n            arr[i] = t;\n        }\n    }\n    // i==j时，和基准位交换位置\n    arr[low] = arr[i];\n    arr[i] = tmp;\n    quickSort(arr, low, i-1);\n    quickSort(arr,i+1, high);\n}\n\n```\n","slug":"algorithm_快速排序算法","published":1,"updated":"2021-11-03T15:26:29.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vy000s0w8n6t24h4vn","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">快排算法：</span><br><span class=\"line\">public static void quickSort(int[] arr, int low, int high) &#123;</span><br><span class=\"line\">    // 递归设置终止条件，当只有一个元素时</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt;= high) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int i, j, tmp, t;</span><br><span class=\"line\">    i = low;</span><br><span class=\"line\">    j = high;</span><br><span class=\"line\">    // 设置基准位</span><br><span class=\"line\">    tmp = arr[low];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">        // 先从右边比较，满足条件则向左移动</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[j] &gt;= tmp &amp;&amp; i&lt;j) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 从左边比较，满足条件则向右移动</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[i] &lt;= tmp &amp;&amp; i&lt;j) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 上面2个<span class=\"keyword\">while</span>条件都不满足时，交换左右数据</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;j) &#123;</span><br><span class=\"line\">            t = arr[j];</span><br><span class=\"line\">            arr[j] = arr[i];</span><br><span class=\"line\">            arr[i] = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // i==j时，和基准位交换位置</span><br><span class=\"line\">    arr[low] = arr[i];</span><br><span class=\"line\">    arr[i] = tmp;</span><br><span class=\"line\">    quickSort(arr, low, i-1);</span><br><span class=\"line\">    quickSort(arr,i+1, high);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">快排算法：</span><br><span class=\"line\">public static void quickSort(int[] arr, int low, int high) &#123;</span><br><span class=\"line\">    // 递归设置终止条件，当只有一个元素时</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &gt;= high) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int i, j, tmp, t;</span><br><span class=\"line\">    i = low;</span><br><span class=\"line\">    j = high;</span><br><span class=\"line\">    // 设置基准位</span><br><span class=\"line\">    tmp = arr[low];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">        // 先从右边比较，满足条件则向左移动</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[j] &gt;= tmp &amp;&amp; i&lt;j) &#123;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 从左边比较，满足条件则向右移动</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (arr[i] &lt;= tmp &amp;&amp; i&lt;j) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 上面2个<span class=\"keyword\">while</span>条件都不满足时，交换左右数据</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i&lt;j) &#123;</span><br><span class=\"line\">            t = arr[j];</span><br><span class=\"line\">            arr[j] = arr[i];</span><br><span class=\"line\">            arr[i] = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // i==j时，和基准位交换位置</span><br><span class=\"line\">    arr[low] = arr[i];</span><br><span class=\"line\">    arr[i] = tmp;</span><br><span class=\"line\">    quickSort(arr, low, i-1);</span><br><span class=\"line\">    quickSort(arr,i+1, high);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java语言实现堆排序","date":"2020-04-10T16:00:00.000Z","_content":"\n\n``` bash\n堆排序步骤：\n1）将无序序列构建一个堆，升序则大顶堆，降序则小顶堆\n2）将堆顶元素与末尾元素交换，将最大元素沉到数组末尾\n3）重新调整结构，使其满足定义，反复执行调整+交换步骤，直到整个序列有序\n重点：\n要从最后一个非叶子节点开始排序\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n\n``` bash\npublic static void heapSort(int[] arr) {\n    int temp = 0;\n    // 循环调用，完成整个大顶堆\n    for (int i = arr.length/2 -1; i>=0; i--) {\n        adjustHeap(arr, i, arr.length);\n    }\n\n    // 交换顶端的值和最末端的值，然后排除最后一个值再次堆化处理，交换\n    for (int j = arr.length-1; j>0; j--) {\n        temp = arr[j];\n        arr[j] = arr[0];\n        arr[0] = temp;\n        adjustHeap(arr, 0,  j);\n    }\n}\n\n/**\n* 完成以i为父节点的局部大顶堆\n*  i对应的非叶子节点\n*/\npublic static void adjustHeap(int[] arr, int i, int length) {\n    int temp = arr[i];\n    for (int k = 2*i+1; k<length; k = 2*k+1) {\n        if (k+1 < length && arr[k] < arr[k+1]) { // 如果左节点小于右节点，则k指向右节点\n            k++;\n        }\n        if (arr[k] > temp) {\n            arr[i] = arr[k];  // 如果子节点大于父节点，则赋把子节点的值给到父节点\n            i = k;            // i指向k，再循环去处理\n        } else {\n            break;\n        }\n    }\n\n    arr[i] = temp;\n}\n\n```\n","source":"_posts/algorithm_堆排序.md","raw":"---\ntitle: Java语言实现堆排序\ndate: 2020-04-11\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n\n``` bash\n堆排序步骤：\n1）将无序序列构建一个堆，升序则大顶堆，降序则小顶堆\n2）将堆顶元素与末尾元素交换，将最大元素沉到数组末尾\n3）重新调整结构，使其满足定义，反复执行调整+交换步骤，直到整个序列有序\n重点：\n要从最后一个非叶子节点开始排序\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n\n``` bash\npublic static void heapSort(int[] arr) {\n    int temp = 0;\n    // 循环调用，完成整个大顶堆\n    for (int i = arr.length/2 -1; i>=0; i--) {\n        adjustHeap(arr, i, arr.length);\n    }\n\n    // 交换顶端的值和最末端的值，然后排除最后一个值再次堆化处理，交换\n    for (int j = arr.length-1; j>0; j--) {\n        temp = arr[j];\n        arr[j] = arr[0];\n        arr[0] = temp;\n        adjustHeap(arr, 0,  j);\n    }\n}\n\n/**\n* 完成以i为父节点的局部大顶堆\n*  i对应的非叶子节点\n*/\npublic static void adjustHeap(int[] arr, int i, int length) {\n    int temp = arr[i];\n    for (int k = 2*i+1; k<length; k = 2*k+1) {\n        if (k+1 < length && arr[k] < arr[k+1]) { // 如果左节点小于右节点，则k指向右节点\n            k++;\n        }\n        if (arr[k] > temp) {\n            arr[i] = arr[k];  // 如果子节点大于父节点，则赋把子节点的值给到父节点\n            i = k;            // i指向k，再循环去处理\n        } else {\n            break;\n        }\n    }\n\n    arr[i] = temp;\n}\n\n```\n","slug":"algorithm_堆排序","published":1,"updated":"2021-11-03T15:25:35.450Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549vz000w0w8nbzl766zl","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">堆排序步骤：</span><br><span class=\"line\">1）将无序序列构建一个堆，升序则大顶堆，降序则小顶堆</span><br><span class=\"line\">2）将堆顶元素与末尾元素交换，将最大元素沉到数组末尾</span><br><span class=\"line\">3）重新调整结构，使其满足定义，反复执行调整+交换步骤，直到整个序列有序</span><br><span class=\"line\">重点：</span><br><span class=\"line\">要从最后一个非叶子节点开始排序</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void heapSort(int[] arr) &#123;</span><br><span class=\"line\">    int temp = 0;</span><br><span class=\"line\">    // 循环调用，完成整个大顶堆</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = arr.length/2 -1; i&gt;=0; i--) &#123;</span><br><span class=\"line\">        adjustHeap(arr, i, arr.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换顶端的值和最末端的值，然后排除最后一个值再次堆化处理，交换</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = arr.length-1; j&gt;0; j--) &#123;</span><br><span class=\"line\">        temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[0];</span><br><span class=\"line\">        arr[0] = temp;</span><br><span class=\"line\">        adjustHeap(arr, 0,  j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 完成以i为父节点的局部大顶堆</span><br><span class=\"line\">*  i对应的非叶子节点</span><br><span class=\"line\">*/</span><br><span class=\"line\">public static void adjustHeap(int[] arr, int i, int length) &#123;</span><br><span class=\"line\">    int temp = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int k = 2*i+1; k&lt;length; k = 2*k+1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k+1 &lt; length &amp;&amp; arr[k] &lt; arr[k+1]) &#123; // 如果左节点小于右节点，则k指向右节点</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[k] &gt; temp) &#123;</span><br><span class=\"line\">            arr[i] = arr[k];  // 如果子节点大于父节点，则赋把子节点的值给到父节点</span><br><span class=\"line\">            i = k;            // i指向k，再循环去处理</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    arr[i] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">堆排序步骤：</span><br><span class=\"line\">1）将无序序列构建一个堆，升序则大顶堆，降序则小顶堆</span><br><span class=\"line\">2）将堆顶元素与末尾元素交换，将最大元素沉到数组末尾</span><br><span class=\"line\">3）重新调整结构，使其满足定义，反复执行调整+交换步骤，直到整个序列有序</span><br><span class=\"line\">重点：</span><br><span class=\"line\">要从最后一个非叶子节点开始排序</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void heapSort(int[] arr) &#123;</span><br><span class=\"line\">    int temp = 0;</span><br><span class=\"line\">    // 循环调用，完成整个大顶堆</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = arr.length/2 -1; i&gt;=0; i--) &#123;</span><br><span class=\"line\">        adjustHeap(arr, i, arr.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 交换顶端的值和最末端的值，然后排除最后一个值再次堆化处理，交换</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int j = arr.length-1; j&gt;0; j--) &#123;</span><br><span class=\"line\">        temp = arr[j];</span><br><span class=\"line\">        arr[j] = arr[0];</span><br><span class=\"line\">        arr[0] = temp;</span><br><span class=\"line\">        adjustHeap(arr, 0,  j);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\">* 完成以i为父节点的局部大顶堆</span><br><span class=\"line\">*  i对应的非叶子节点</span><br><span class=\"line\">*/</span><br><span class=\"line\">public static void adjustHeap(int[] arr, int i, int length) &#123;</span><br><span class=\"line\">    int temp = arr[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int k = 2*i+1; k&lt;length; k = 2*k+1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k+1 &lt; length &amp;&amp; arr[k] &lt; arr[k+1]) &#123; // 如果左节点小于右节点，则k指向右节点</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[k] &gt; temp) &#123;</span><br><span class=\"line\">            arr[i] = arr[k];  // 如果子节点大于父节点，则赋把子节点的值给到父节点</span><br><span class=\"line\">            i = k;            // i指向k，再循环去处理</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    arr[i] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"插入排序（易理解）","date":"2020-04-04T16:00:00.000Z","_content":"\n``` bash\n插入排序思路：\n1）把n个待排序的元素看成一个有序列表和一个无序列表\n2）开始时有序列表只有1个元素，无序列表有n-1个元素\n3）排序时每次从无序表中取出第一个元素，依次与有序表中的元素进行比较，并插入到适当的位置\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {13, 3, 303, 105};\n        InsertSort(arr);\n    }\n\n    public static void InsertSort(int[] arr) {\n        int insertValue = 0;\n        int inserIndex  = 0;\n\n        for (int i = 1; i < arr.length; i++) {\n            insertValue = arr[i];\n            inserIndex = i-1;\n\n            while (inserIndex >= 0 && insertValue < arr[inserIndex]) {\n                arr[inserIndex+1] = arr[inserIndex];\n                inserIndex --;\n            }\n\n            if (inserIndex+1 != i) {\n                arr[inserIndex+1] = insertValue;\n            }\n\n            System.out.println(Arrays.toString(arr));\n        }\n    }\n}\n\n```\n","source":"_posts/algorithm_插值查找.md","raw":"---\ntitle: 插入排序（易理解）\ndate: 2020-04-05\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n插入排序思路：\n1）把n个待排序的元素看成一个有序列表和一个无序列表\n2）开始时有序列表只有1个元素，无序列表有n-1个元素\n3）排序时每次从无序表中取出第一个元素，依次与有序表中的元素进行比较，并插入到适当的位置\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {13, 3, 303, 105};\n        InsertSort(arr);\n    }\n\n    public static void InsertSort(int[] arr) {\n        int insertValue = 0;\n        int inserIndex  = 0;\n\n        for (int i = 1; i < arr.length; i++) {\n            insertValue = arr[i];\n            inserIndex = i-1;\n\n            while (inserIndex >= 0 && insertValue < arr[inserIndex]) {\n                arr[inserIndex+1] = arr[inserIndex];\n                inserIndex --;\n            }\n\n            if (inserIndex+1 != i) {\n                arr[inserIndex+1] = insertValue;\n            }\n\n            System.out.println(Arrays.toString(arr));\n        }\n    }\n}\n\n```\n","slug":"algorithm_插值查找","published":1,"updated":"2021-11-03T15:24:59.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w0000z0w8n13dr1zw4","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序思路：</span><br><span class=\"line\">1）把n个待排序的元素看成一个有序列表和一个无序列表</span><br><span class=\"line\">2）开始时有序列表只有1个元素，无序列表有n-1个元素</span><br><span class=\"line\">3）排序时每次从无序表中取出第一个元素，依次与有序表中的元素进行比较，并插入到适当的位置</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InsertSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;13, 3, 303, 105&#125;;</span><br><span class=\"line\">        InsertSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void InsertSort(int[] arr) &#123;</span><br><span class=\"line\">        int insertValue = 0;</span><br><span class=\"line\">        int inserIndex  = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            insertValue = arr[i];</span><br><span class=\"line\">            inserIndex = i-1;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (inserIndex &gt;= 0 &amp;&amp; insertValue &lt; arr[inserIndex]) &#123;</span><br><span class=\"line\">                arr[inserIndex+1] = arr[inserIndex];</span><br><span class=\"line\">                inserIndex --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inserIndex+1 != i) &#123;</span><br><span class=\"line\">                arr[inserIndex+1] = insertValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序思路：</span><br><span class=\"line\">1）把n个待排序的元素看成一个有序列表和一个无序列表</span><br><span class=\"line\">2）开始时有序列表只有1个元素，无序列表有n-1个元素</span><br><span class=\"line\">3）排序时每次从无序表中取出第一个元素，依次与有序表中的元素进行比较，并插入到适当的位置</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InsertSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;13, 3, 303, 105&#125;;</span><br><span class=\"line\">        InsertSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void InsertSort(int[] arr) &#123;</span><br><span class=\"line\">        int insertValue = 0;</span><br><span class=\"line\">        int inserIndex  = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            insertValue = arr[i];</span><br><span class=\"line\">            inserIndex = i-1;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (inserIndex &gt;= 0 &amp;&amp; insertValue &lt; arr[inserIndex]) &#123;</span><br><span class=\"line\">                arr[inserIndex+1] = arr[inserIndex];</span><br><span class=\"line\">                inserIndex --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inserIndex+1 != i) &#123;</span><br><span class=\"line\">                arr[inserIndex+1] = insertValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java语言实现归并排序","date":"2020-04-14T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n归并排序：\npublic class MergeSort {\n    public static void main(String[] args) {\n        int[] a = {8, 45, 43, 67, 23, 5, 3, 88, 55};\n        System.out.println(\"排序前\" + Arrays.toString(a));\n        int[] ret = sort(a, 0, a.length-1);\n        System.out.println(\"排序后\" + Arrays.toString(ret));\n    }\n\n    public static int[] sort(int[] a, int low, int high) {\n        int mid = (low + high)/2;\n        if (low < high) {\n            sort(a, low, mid);\n            sort(a, mid+1, high);\n            merge(a, low, mid, high);\n        }\n        return a;\n    }\n\n    public static void merge(int[] a, int low, int mid, int high) {\n        int[] temp = new int[high-low+1];\n        int i = low;\n        int j = mid+1;\n        int k = 0;\n        // 把较小的数先移到新数组中\n        while (i<=mid && j<=high) {\n            if (a[i] < a[j]) {\n                temp[k++] = a[i++];\n            } else {\n                temp[k++] = a[j++];\n            }\n        }\n        // 把左边剩余的数移入数组\n        while (i<=mid) {\n            temp[k++] = a[i++];\n        }\n        // 把右边边剩余的数移入数组\n        while (j<=high) {\n            temp[k++] = a[j++];\n        }\n        // 把新数组中的数覆盖原数组\n        for (int x = 0; x < temp.length; x++) {\n            a[x+low] = temp[x];\n        }\n    }\n}\n\n```\n","source":"_posts/algorithm_归并排序.md","raw":"---\ntitle: Java语言实现归并排序\ndate: 2020-04-15\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n归并排序：\npublic class MergeSort {\n    public static void main(String[] args) {\n        int[] a = {8, 45, 43, 67, 23, 5, 3, 88, 55};\n        System.out.println(\"排序前\" + Arrays.toString(a));\n        int[] ret = sort(a, 0, a.length-1);\n        System.out.println(\"排序后\" + Arrays.toString(ret));\n    }\n\n    public static int[] sort(int[] a, int low, int high) {\n        int mid = (low + high)/2;\n        if (low < high) {\n            sort(a, low, mid);\n            sort(a, mid+1, high);\n            merge(a, low, mid, high);\n        }\n        return a;\n    }\n\n    public static void merge(int[] a, int low, int mid, int high) {\n        int[] temp = new int[high-low+1];\n        int i = low;\n        int j = mid+1;\n        int k = 0;\n        // 把较小的数先移到新数组中\n        while (i<=mid && j<=high) {\n            if (a[i] < a[j]) {\n                temp[k++] = a[i++];\n            } else {\n                temp[k++] = a[j++];\n            }\n        }\n        // 把左边剩余的数移入数组\n        while (i<=mid) {\n            temp[k++] = a[i++];\n        }\n        // 把右边边剩余的数移入数组\n        while (j<=high) {\n            temp[k++] = a[j++];\n        }\n        // 把新数组中的数覆盖原数组\n        for (int x = 0; x < temp.length; x++) {\n            a[x+low] = temp[x];\n        }\n    }\n}\n\n```\n","slug":"algorithm_归并排序","published":1,"updated":"2021-11-03T15:25:59.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w100130w8n5xk4eyc7","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">归并排序：</span><br><span class=\"line\">public class MergeSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] a = &#123;8, 45, 43, 67, 23, 5, 3, 88, 55&#125;;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"排序前\"</span> + Arrays.toString(a));</span><br><span class=\"line\">        int[] ret = sort(a, 0, a.length-1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"排序后\"</span> + Arrays.toString(ret));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int[] sort(int[] a, int low, int high) &#123;</span><br><span class=\"line\">        int mid = (low + high)/2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">            sort(a, low, mid);</span><br><span class=\"line\">            sort(a, mid+1, high);</span><br><span class=\"line\">            merge(a, low, mid, high);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void merge(int[] a, int low, int mid, int high) &#123;</span><br><span class=\"line\">        int[] temp = new int[high-low+1];</span><br><span class=\"line\">        int i = low;</span><br><span class=\"line\">        int j = mid+1;</span><br><span class=\"line\">        int k = 0;</span><br><span class=\"line\">        // 把较小的数先移到新数组中</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid &amp;&amp; j&lt;=high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &lt; a[j]) &#123;</span><br><span class=\"line\">                temp[k++] = a[i++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp[k++] = a[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 把左边剩余的数移入数组</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid) &#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 把右边边剩余的数移入数组</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=high) &#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 把新数组中的数覆盖原数组</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int x = 0; x &lt; temp.length; x++) &#123;</span><br><span class=\"line\">            a[x+low] = temp[x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">归并排序：</span><br><span class=\"line\">public class MergeSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] a = &#123;8, 45, 43, 67, 23, 5, 3, 88, 55&#125;;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"排序前\"</span> + Arrays.toString(a));</span><br><span class=\"line\">        int[] ret = sort(a, 0, a.length-1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"排序后\"</span> + Arrays.toString(ret));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static int[] sort(int[] a, int low, int high) &#123;</span><br><span class=\"line\">        int mid = (low + high)/2;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">            sort(a, low, mid);</span><br><span class=\"line\">            sort(a, mid+1, high);</span><br><span class=\"line\">            merge(a, low, mid, high);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void merge(int[] a, int low, int mid, int high) &#123;</span><br><span class=\"line\">        int[] temp = new int[high-low+1];</span><br><span class=\"line\">        int i = low;</span><br><span class=\"line\">        int j = mid+1;</span><br><span class=\"line\">        int k = 0;</span><br><span class=\"line\">        // 把较小的数先移到新数组中</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid &amp;&amp; j&lt;=high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i] &lt; a[j]) &#123;</span><br><span class=\"line\">                temp[k++] = a[i++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp[k++] = a[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 把左边剩余的数移入数组</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i&lt;=mid) &#123;</span><br><span class=\"line\">            temp[k++] = a[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 把右边边剩余的数移入数组</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j&lt;=high) &#123;</span><br><span class=\"line\">            temp[k++] = a[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 把新数组中的数覆盖原数组</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int x = 0; x &lt; temp.length; x++) &#123;</span><br><span class=\"line\">            a[x+low] = temp[x];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"插入排序（易理解）","date":"2020-04-03T16:00:00.000Z","_content":"\n``` bash\n插入排序思路：\n1）把n个待排序的元素看成一个有序列表和一个无序列表\n2）开始时有序列表只有1个元素，无序列表有n-1个元素\n3）排序时每次从无序表中取出第一个元素，依次与有序表中的元素进行比较，并插入到适当的位置\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n\n``` bash\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {13, 3, 303, 105};\n        InsertSort(arr);\n    }\n\n    public static void InsertSort(int[] arr) {\n        int insertValue = 0;\n        int inserIndex  = 0;\n\n        for (int i = 1; i < arr.length; i++) {\n            insertValue = arr[i];\n            inserIndex = i-1;\n\n            while (inserIndex >= 0 && insertValue < arr[inserIndex]) {\n                arr[inserIndex+1] = arr[inserIndex];\n                inserIndex --;\n            }\n\n            if (inserIndex+1 != i) {\n                arr[inserIndex+1] = insertValue;\n            }\n\n            System.out.println(Arrays.toString(arr));\n        }\n    }\n}\n\n```\n","source":"_posts/algorithm_插入排序二.md","raw":"---\ntitle: 插入排序（易理解）\ndate: 2020-04-04\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n插入排序思路：\n1）把n个待排序的元素看成一个有序列表和一个无序列表\n2）开始时有序列表只有1个元素，无序列表有n-1个元素\n3）排序时每次从无序表中取出第一个元素，依次与有序表中的元素进行比较，并插入到适当的位置\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n\n``` bash\npublic class InsertSort {\n    public static void main(String[] args) {\n        int[] arr = {13, 3, 303, 105};\n        InsertSort(arr);\n    }\n\n    public static void InsertSort(int[] arr) {\n        int insertValue = 0;\n        int inserIndex  = 0;\n\n        for (int i = 1; i < arr.length; i++) {\n            insertValue = arr[i];\n            inserIndex = i-1;\n\n            while (inserIndex >= 0 && insertValue < arr[inserIndex]) {\n                arr[inserIndex+1] = arr[inserIndex];\n                inserIndex --;\n            }\n\n            if (inserIndex+1 != i) {\n                arr[inserIndex+1] = insertValue;\n            }\n\n            System.out.println(Arrays.toString(arr));\n        }\n    }\n}\n\n```\n","slug":"algorithm_插入排序二","published":1,"updated":"2021-11-03T15:24:53.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w200160w8n4bvf2wyx","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序思路：</span><br><span class=\"line\">1）把n个待排序的元素看成一个有序列表和一个无序列表</span><br><span class=\"line\">2）开始时有序列表只有1个元素，无序列表有n-1个元素</span><br><span class=\"line\">3）排序时每次从无序表中取出第一个元素，依次与有序表中的元素进行比较，并插入到适当的位置</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InsertSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;13, 3, 303, 105&#125;;</span><br><span class=\"line\">        InsertSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void InsertSort(int[] arr) &#123;</span><br><span class=\"line\">        int insertValue = 0;</span><br><span class=\"line\">        int inserIndex  = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            insertValue = arr[i];</span><br><span class=\"line\">            inserIndex = i-1;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (inserIndex &gt;= 0 &amp;&amp; insertValue &lt; arr[inserIndex]) &#123;</span><br><span class=\"line\">                arr[inserIndex+1] = arr[inserIndex];</span><br><span class=\"line\">                inserIndex --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inserIndex+1 != i) &#123;</span><br><span class=\"line\">                arr[inserIndex+1] = insertValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序思路：</span><br><span class=\"line\">1）把n个待排序的元素看成一个有序列表和一个无序列表</span><br><span class=\"line\">2）开始时有序列表只有1个元素，无序列表有n-1个元素</span><br><span class=\"line\">3）排序时每次从无序表中取出第一个元素，依次与有序表中的元素进行比较，并插入到适当的位置</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class InsertSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;13, 3, 303, 105&#125;;</span><br><span class=\"line\">        InsertSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void InsertSort(int[] arr) &#123;</span><br><span class=\"line\">        int insertValue = 0;</span><br><span class=\"line\">        int inserIndex  = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 1; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            insertValue = arr[i];</span><br><span class=\"line\">            inserIndex = i-1;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (inserIndex &gt;= 0 &amp;&amp; insertValue &lt; arr[inserIndex]) &#123;</span><br><span class=\"line\">                arr[inserIndex+1] = arr[inserIndex];</span><br><span class=\"line\">                inserIndex --;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (inserIndex+1 != i) &#123;</span><br><span class=\"line\">                arr[inserIndex+1] = insertValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"环形队列用数组来实现","date":"2020-03-24T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class CirleArrayQueueDemo {\n    public static void main(String[] args) {\n        CirleArrayQueue queue = new CirleArrayQueue(4);\n        char key = ' '; // 获取用户的输入\n        Scanner scanner = new Scanner(System.in);\n        boolean loop = true;\n        while(loop) {\n            System.out.println(\"s(show)：显示队列\");\n            System.out.println(\"e(exit)：退出队列\");\n            System.out.println(\"a(add)：添加数据到队列\");\n            System.out.println(\"g(get)：从队列取出数据\");\n            System.out.println(\"h(head)：查看队列头的数据\");\n\n            key = scanner.next().charAt(0);\n            switch (key) {\n                case 's':\n                    queue.showQueue();\n                    break;\n                case 'a':\n                    System.out.println(\"输出一个数：\");\n                    int value = scanner.nextInt();\n                    queue.addQueue(value);\n                    break;\n                case 'g':\n                    try {\n                        int res = queue.getQueue();\n                        System.out.printf(\"取出的数为：%d\\n\", res);\n                    } catch (Exception e) {\n                        System.out.println(e.getMessage());\n                    }\n                    break;\n                case 'e':\n                    System.out.println(\"退出队列：\");\n                    scanner.close();\n                    loop = false;\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        System.out.println(\"程序已退出\");\n    }\n}\n\nclass CirleArrayQueue {\n    private int maxSize;\n    private int front;  // 指向队列头部下标;\n    private int rear;   // 指向队列尾部下标后面一个位置\n    private int[] arr;\n\n    public CirleArrayQueue(int arrMaxSize) {\n        maxSize = arrMaxSize;\n        arr     = new int[maxSize];\n        rear    = 0;\n        front   = 0;\n    }\n\n    public boolean isFull() {\n        return (rear + 1)%maxSize == front;\n    }\n\n    public boolean isEmpty() {\n        return rear == front;\n    }\n\n    public void addQueue(int n) {\n        if (isFull()) {\n            System.out.println(\"队列已满\");\n            return;\n        }\n        arr[rear] = n;\n        rear = (rear+1)%maxSize;\n    }\n\n    public int getQueue() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"队列已空\");\n        }\n        int temp = arr[front];\n        front++;\n        return temp;\n    }\n\n    public void showQueue() {\n        if (isEmpty()) {\n            System.out.println(\"队列已空\");\n            return;\n        }\n        for (int i = front; i < front+size(); i++) {\n            System.out.printf(\"arr[%d] = %d\\n\", i%maxSize, arr[i%maxSize]);\n        }\n\n    }\n\n    public int size() {\n        return (rear + maxSize - front) % maxSize;\n    }\n}\n\n```\n","source":"_posts/algorithm_数组模拟环形队列.md","raw":"---\ntitle: 环形队列用数组来实现\ndate: 2020-03-25\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class CirleArrayQueueDemo {\n    public static void main(String[] args) {\n        CirleArrayQueue queue = new CirleArrayQueue(4);\n        char key = ' '; // 获取用户的输入\n        Scanner scanner = new Scanner(System.in);\n        boolean loop = true;\n        while(loop) {\n            System.out.println(\"s(show)：显示队列\");\n            System.out.println(\"e(exit)：退出队列\");\n            System.out.println(\"a(add)：添加数据到队列\");\n            System.out.println(\"g(get)：从队列取出数据\");\n            System.out.println(\"h(head)：查看队列头的数据\");\n\n            key = scanner.next().charAt(0);\n            switch (key) {\n                case 's':\n                    queue.showQueue();\n                    break;\n                case 'a':\n                    System.out.println(\"输出一个数：\");\n                    int value = scanner.nextInt();\n                    queue.addQueue(value);\n                    break;\n                case 'g':\n                    try {\n                        int res = queue.getQueue();\n                        System.out.printf(\"取出的数为：%d\\n\", res);\n                    } catch (Exception e) {\n                        System.out.println(e.getMessage());\n                    }\n                    break;\n                case 'e':\n                    System.out.println(\"退出队列：\");\n                    scanner.close();\n                    loop = false;\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        System.out.println(\"程序已退出\");\n    }\n}\n\nclass CirleArrayQueue {\n    private int maxSize;\n    private int front;  // 指向队列头部下标;\n    private int rear;   // 指向队列尾部下标后面一个位置\n    private int[] arr;\n\n    public CirleArrayQueue(int arrMaxSize) {\n        maxSize = arrMaxSize;\n        arr     = new int[maxSize];\n        rear    = 0;\n        front   = 0;\n    }\n\n    public boolean isFull() {\n        return (rear + 1)%maxSize == front;\n    }\n\n    public boolean isEmpty() {\n        return rear == front;\n    }\n\n    public void addQueue(int n) {\n        if (isFull()) {\n            System.out.println(\"队列已满\");\n            return;\n        }\n        arr[rear] = n;\n        rear = (rear+1)%maxSize;\n    }\n\n    public int getQueue() {\n        if (isEmpty()) {\n            throw new RuntimeException(\"队列已空\");\n        }\n        int temp = arr[front];\n        front++;\n        return temp;\n    }\n\n    public void showQueue() {\n        if (isEmpty()) {\n            System.out.println(\"队列已空\");\n            return;\n        }\n        for (int i = front; i < front+size(); i++) {\n            System.out.printf(\"arr[%d] = %d\\n\", i%maxSize, arr[i%maxSize]);\n        }\n\n    }\n\n    public int size() {\n        return (rear + maxSize - front) % maxSize;\n    }\n}\n\n```\n","slug":"algorithm_数组模拟环形队列","published":1,"updated":"2021-11-03T15:26:35.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w3001a0w8n4tg1gs0s","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CirleArrayQueueDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CirleArrayQueue queue = new CirleArrayQueue(4);</span><br><span class=\"line\">        char key = <span class=\"string\">' '</span>; // 获取用户的输入</span><br><span class=\"line\">        Scanner scanner = new Scanner(System.in);</span><br><span class=\"line\">        boolean loop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(loop) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"s(show)：显示队列\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"e(exit)：退出队列\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"a(add)：添加数据到队列\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"g(get)：从队列取出数据\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"h(head)：查看队列头的数据\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            key = scanner.next().charAt(0);</span><br><span class=\"line\">            switch (key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</span><br><span class=\"line\">                    queue.showQueue();</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"输出一个数：\"</span>);</span><br><span class=\"line\">                    int value = scanner.nextInt();</span><br><span class=\"line\">                    queue.addQueue(value);</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'g'</span>:</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        int res = queue.getQueue();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"取出的数为：%d\\n\"</span>, res);</span><br><span class=\"line\">                    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                        System.out.println(e.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"退出队列：\"</span>);</span><br><span class=\"line\">                    scanner.close();</span><br><span class=\"line\">                    loop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                default:</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"程序已退出\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class CirleArrayQueue &#123;</span><br><span class=\"line\">    private int maxSize;</span><br><span class=\"line\">    private int front;  // 指向队列头部下标;</span><br><span class=\"line\">    private int rear;   // 指向队列尾部下标后面一个位置</span><br><span class=\"line\">    private int[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CirleArrayQueue(int arrMaxSize) &#123;</span><br><span class=\"line\">        maxSize = arrMaxSize;</span><br><span class=\"line\">        arr     = new int[maxSize];</span><br><span class=\"line\">        rear    = 0;</span><br><span class=\"line\">        front   = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean <span class=\"function\"><span class=\"title\">isFull</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (rear + 1)%maxSize == front;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean <span class=\"function\"><span class=\"title\">isEmpty</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> rear == front;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addQueue(int n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"队列已满\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[rear] = n;</span><br><span class=\"line\">        rear = (rear+1)%maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">getQueue</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            throw new RuntimeException(<span class=\"string\">\"队列已空\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int temp = arr[front];</span><br><span class=\"line\">        front++;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">showQueue</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"队列已空\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = front; i &lt; front+size(); i++) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"arr[%d] = %d\\n\"</span>, i%maxSize, arr[i%maxSize]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">size</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (rear + maxSize - front) % maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CirleArrayQueueDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CirleArrayQueue queue = new CirleArrayQueue(4);</span><br><span class=\"line\">        char key = <span class=\"string\">' '</span>; // 获取用户的输入</span><br><span class=\"line\">        Scanner scanner = new Scanner(System.in);</span><br><span class=\"line\">        boolean loop = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(loop) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"s(show)：显示队列\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"e(exit)：退出队列\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"a(add)：添加数据到队列\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"g(get)：从队列取出数据\"</span>);</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"h(head)：查看队列头的数据\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            key = scanner.next().charAt(0);</span><br><span class=\"line\">            switch (key) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'s'</span>:</span><br><span class=\"line\">                    queue.showQueue();</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'a'</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"输出一个数：\"</span>);</span><br><span class=\"line\">                    int value = scanner.nextInt();</span><br><span class=\"line\">                    queue.addQueue(value);</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'g'</span>:</span><br><span class=\"line\">                    try &#123;</span><br><span class=\"line\">                        int res = queue.getQueue();</span><br><span class=\"line\">                        System.out.printf(<span class=\"string\">\"取出的数为：%d\\n\"</span>, res);</span><br><span class=\"line\">                    &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                        System.out.println(e.getMessage());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">'e'</span>:</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"退出队列：\"</span>);</span><br><span class=\"line\">                    scanner.close();</span><br><span class=\"line\">                    loop = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">                default:</span><br><span class=\"line\">                    <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"程序已退出\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class CirleArrayQueue &#123;</span><br><span class=\"line\">    private int maxSize;</span><br><span class=\"line\">    private int front;  // 指向队列头部下标;</span><br><span class=\"line\">    private int rear;   // 指向队列尾部下标后面一个位置</span><br><span class=\"line\">    private int[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\">    public CirleArrayQueue(int arrMaxSize) &#123;</span><br><span class=\"line\">        maxSize = arrMaxSize;</span><br><span class=\"line\">        arr     = new int[maxSize];</span><br><span class=\"line\">        rear    = 0;</span><br><span class=\"line\">        front   = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean <span class=\"function\"><span class=\"title\">isFull</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (rear + 1)%maxSize == front;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public boolean <span class=\"function\"><span class=\"title\">isEmpty</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> rear == front;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addQueue(int n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isFull()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"队列已满\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[rear] = n;</span><br><span class=\"line\">        rear = (rear+1)%maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">getQueue</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            throw new RuntimeException(<span class=\"string\">\"队列已空\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int temp = arr[front];</span><br><span class=\"line\">        front++;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">showQueue</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isEmpty()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"队列已空\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = front; i &lt; front+size(); i++) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"arr[%d] = %d\\n\"</span>, i%maxSize, arr[i%maxSize]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">size</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> (rear + maxSize - front) % maxSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"桶排序","date":"2020-04-16T16:00:00.000Z","_content":"\n``` bash\n/**\n * 桶排序思路：\n *\n * 1.找出待排序数组中的最大值max、最小值min\n * 2.我们使用 动态数组ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max-min)/arr.length + 1\n * 3.遍历数组 arr，计算每个元素 arr[i] 放的桶（根据商相等取得相近元素放入一个桶中）\n * 4.每个桶各自排序\n * 5.遍历桶数组，把排序好的元素放进输出数组\n */\n```\n\n<!--more-->\n\n``` bash\npublic class BucketSort {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 6, 9};\n        bucketSort(arr);\n    }\n\n    public static void bucketSort(int[] arr) {\n        // 找出最大值和最小值\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < arr.length; i++) {\n            max = Math.max(arr[i], max);\n            min = Math.min(arr[i], min);\n        }\n\n        // 创建桶的初始值\n        int buckedNum = (max - min)/arr.length + 1;\n        ArrayList<ArrayList<Integer>> buckedArr = new ArrayList<>(buckedNum);\n        for (int i = 0; i < buckedNum; i++) {\n            buckedArr.add(new ArrayList<>());\n        }\n\n        // 数组元素放入不同的桶中\n        for (int i = 0; i < arr.length; i++) {\n            int num = (arr[i] - min) / arr.length;\n            buckedArr.get(num).add(arr[i]);\n        }\n\n        // 每个桶内元素自排序后，依次放入到新数组中\n        int index = 0;\n        int[] sortedArr = new int[arr.length];\n        for (int i = 0; i < buckedNum; i++) {\n            Collections.sort(buckedArr.get(i));\n\n            for (int j = 0; j < buckedArr.get(i).size(); j++) {\n                sortedArr[index++] = buckedArr.get(i).get(j);\n            }\n        }\n\n        System.out.println(Arrays.toString(sortedArr));\n    }\n}\n\n```\n","source":"_posts/algorithm_桶排序.md","raw":"---\ntitle: 桶排序\ndate: 2020-04-17\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n/**\n * 桶排序思路：\n *\n * 1.找出待排序数组中的最大值max、最小值min\n * 2.我们使用 动态数组ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max-min)/arr.length + 1\n * 3.遍历数组 arr，计算每个元素 arr[i] 放的桶（根据商相等取得相近元素放入一个桶中）\n * 4.每个桶各自排序\n * 5.遍历桶数组，把排序好的元素放进输出数组\n */\n```\n\n<!--more-->\n\n``` bash\npublic class BucketSort {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 6, 9};\n        bucketSort(arr);\n    }\n\n    public static void bucketSort(int[] arr) {\n        // 找出最大值和最小值\n        int max = 0;\n        int min = 0;\n        for (int i = 0; i < arr.length; i++) {\n            max = Math.max(arr[i], max);\n            min = Math.min(arr[i], min);\n        }\n\n        // 创建桶的初始值\n        int buckedNum = (max - min)/arr.length + 1;\n        ArrayList<ArrayList<Integer>> buckedArr = new ArrayList<>(buckedNum);\n        for (int i = 0; i < buckedNum; i++) {\n            buckedArr.add(new ArrayList<>());\n        }\n\n        // 数组元素放入不同的桶中\n        for (int i = 0; i < arr.length; i++) {\n            int num = (arr[i] - min) / arr.length;\n            buckedArr.get(num).add(arr[i]);\n        }\n\n        // 每个桶内元素自排序后，依次放入到新数组中\n        int index = 0;\n        int[] sortedArr = new int[arr.length];\n        for (int i = 0; i < buckedNum; i++) {\n            Collections.sort(buckedArr.get(i));\n\n            for (int j = 0; j < buckedArr.get(i).size(); j++) {\n                sortedArr[index++] = buckedArr.get(i).get(j);\n            }\n        }\n\n        System.out.println(Arrays.toString(sortedArr));\n    }\n}\n\n```\n","slug":"algorithm_桶排序","published":1,"updated":"2021-11-03T15:26:46.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w4001d0w8nbrio8a8w","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 桶排序思路：</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 1.找出待排序数组中的最大值max、最小值min</span><br><span class=\"line\"> * 2.我们使用 动态数组ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max-min)/arr.length + 1</span><br><span class=\"line\"> * 3.遍历数组 arr，计算每个元素 arr[i] 放的桶（根据商相等取得相近元素放入一个桶中）</span><br><span class=\"line\"> * 4.每个桶各自排序</span><br><span class=\"line\"> * 5.遍历桶数组，把排序好的元素放进输出数组</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BucketSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;1, 2, 6, 9&#125;;</span><br><span class=\"line\">        bucketSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void bucketSort(int[] arr) &#123;</span><br><span class=\"line\">        // 找出最大值和最小值</span><br><span class=\"line\">        int max = 0;</span><br><span class=\"line\">        int min = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            max = Math.max(arr[i], max);</span><br><span class=\"line\">            min = Math.min(arr[i], min);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 创建桶的初始值</span><br><span class=\"line\">        int buckedNum = (max - min)/arr.length + 1;</span><br><span class=\"line\">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; buckedArr = new ArrayList&lt;&gt;(buckedNum);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; buckedNum; i++) &#123;</span><br><span class=\"line\">            buckedArr.add(new ArrayList&lt;&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 数组元素放入不同的桶中</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            int num = (arr[i] - min) / arr.length;</span><br><span class=\"line\">            buckedArr.get(num).add(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 每个桶内元素自排序后，依次放入到新数组中</span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        int[] sortedArr = new int[arr.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; buckedNum; i++) &#123;</span><br><span class=\"line\">            Collections.sort(buckedArr.get(i));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; buckedArr.get(i).size(); j++) &#123;</span><br><span class=\"line\">                sortedArr[index++] = buckedArr.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Arrays.toString(sortedArr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 桶排序思路：</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 1.找出待排序数组中的最大值max、最小值min</span><br><span class=\"line\"> * 2.我们使用 动态数组ArrayList 作为桶，桶里放的元素也用 ArrayList 存储。桶的数量为(max-min)/arr.length + 1</span><br><span class=\"line\"> * 3.遍历数组 arr，计算每个元素 arr[i] 放的桶（根据商相等取得相近元素放入一个桶中）</span><br><span class=\"line\"> * 4.每个桶各自排序</span><br><span class=\"line\"> * 5.遍历桶数组，把排序好的元素放进输出数组</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class BucketSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;1, 2, 6, 9&#125;;</span><br><span class=\"line\">        bucketSort(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void bucketSort(int[] arr) &#123;</span><br><span class=\"line\">        // 找出最大值和最小值</span><br><span class=\"line\">        int max = 0;</span><br><span class=\"line\">        int min = 0;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            max = Math.max(arr[i], max);</span><br><span class=\"line\">            min = Math.min(arr[i], min);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 创建桶的初始值</span><br><span class=\"line\">        int buckedNum = (max - min)/arr.length + 1;</span><br><span class=\"line\">        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; buckedArr = new ArrayList&lt;&gt;(buckedNum);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; buckedNum; i++) &#123;</span><br><span class=\"line\">            buckedArr.add(new ArrayList&lt;&gt;());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 数组元素放入不同的桶中</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            int num = (arr[i] - min) / arr.length;</span><br><span class=\"line\">            buckedArr.get(num).add(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 每个桶内元素自排序后，依次放入到新数组中</span><br><span class=\"line\">        int index = 0;</span><br><span class=\"line\">        int[] sortedArr = new int[arr.length];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; buckedNum; i++) &#123;</span><br><span class=\"line\">            Collections.sort(buckedArr.get(i));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; buckedArr.get(i).size(); j++) &#123;</span><br><span class=\"line\">                sortedArr[index++] = buckedArr.get(i).get(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Arrays.toString(sortedArr));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java语言实现插入排序","date":"2020-03-19T16:00:00.000Z","_content":"\n### 为什么插入排序要比冒泡排序效率高？\n\n``` bash\n插入排序相比冒泡排序元素交换的次数是一样的，不过每一次元素交换时，插入排序只需要一次复制操作，\n而冒泡排序需要三次赋值操作，赋值操作上花费时间是插入排序的三倍。\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\n插入排序：\npublic static void insertSort(int[] arr) {\n    // 空数组 或 只有一个元素的数组，则什么都不做。\n    if (arr == null || arr.length == 0) return;\n    // 外层循环的 i 代表有序区的最后一个元素。\n    for (int i = 0; i < arr.length - 1; i++) {\n        // 待插入的元素暂存到value.\n        int value = arr[i + 1];\n        int j = i;\n        // j < 0 时退出循环，说明 j 是最小的元素的索引值。\n        // 或者 arr[j] <= value 时退出循环，说明 j 是比value小的元素的索引值。\n        for (; j >= 0 && arr[j] > value; j--) {\n            // 把元素往后挪。\n            arr[j + 1] = arr[j];\n        }\n        // 把待插入元素，放到正确位置。\n        arr[j + 1] = value;\n    }\n}\n\n冒泡排序：\npublic static void BubbleSort(int[] arr) {\n    int temp;\n    for(int i=0;i<arr.length-1;i++){//冒泡趟数\n        for(int j=0;j<arr.length-i-1;j++){\n            if(arr[j+1]<arr[j]){\n                temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n\n```\n","source":"_posts/algorithm_插入排序.md","raw":"---\ntitle: Java语言实现插入排序\ndate: 2020-03-20\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n### 为什么插入排序要比冒泡排序效率高？\n\n``` bash\n插入排序相比冒泡排序元素交换的次数是一样的，不过每一次元素交换时，插入排序只需要一次复制操作，\n而冒泡排序需要三次赋值操作，赋值操作上花费时间是插入排序的三倍。\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\n插入排序：\npublic static void insertSort(int[] arr) {\n    // 空数组 或 只有一个元素的数组，则什么都不做。\n    if (arr == null || arr.length == 0) return;\n    // 外层循环的 i 代表有序区的最后一个元素。\n    for (int i = 0; i < arr.length - 1; i++) {\n        // 待插入的元素暂存到value.\n        int value = arr[i + 1];\n        int j = i;\n        // j < 0 时退出循环，说明 j 是最小的元素的索引值。\n        // 或者 arr[j] <= value 时退出循环，说明 j 是比value小的元素的索引值。\n        for (; j >= 0 && arr[j] > value; j--) {\n            // 把元素往后挪。\n            arr[j + 1] = arr[j];\n        }\n        // 把待插入元素，放到正确位置。\n        arr[j + 1] = value;\n    }\n}\n\n冒泡排序：\npublic static void BubbleSort(int[] arr) {\n    int temp;\n    for(int i=0;i<arr.length-1;i++){//冒泡趟数\n        for(int j=0;j<arr.length-i-1;j++){\n            if(arr[j+1]<arr[j]){\n                temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n\n```\n","slug":"algorithm_插入排序","published":1,"updated":"2021-11-03T15:24:36.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w5001h0w8n6lx4557r","content":"<h3 id=\"为什么插入排序要比冒泡排序效率高？\"><a href=\"#为什么插入排序要比冒泡排序效率高？\" class=\"headerlink\" title=\"为什么插入排序要比冒泡排序效率高？\"></a>为什么插入排序要比冒泡排序效率高？</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序相比冒泡排序元素交换的次数是一样的，不过每一次元素交换时，插入排序只需要一次复制操作，</span><br><span class=\"line\">而冒泡排序需要三次赋值操作，赋值操作上花费时间是插入排序的三倍。</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序：</span><br><span class=\"line\">public static void insertSort(int[] arr) &#123;</span><br><span class=\"line\">    // 空数组 或 只有一个元素的数组，则什么都不做。</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr == null || arr.length == 0) <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    // 外层循环的 i 代表有序区的最后一个元素。</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class=\"line\">        // 待插入的元素暂存到value.</span><br><span class=\"line\">        int value = arr[i + 1];</span><br><span class=\"line\">        int j = i;</span><br><span class=\"line\">        // j &lt; 0 时退出循环，说明 j 是最小的元素的索引值。</span><br><span class=\"line\">        // 或者 arr[j] &lt;= value 时退出循环，说明 j 是比value小的元素的索引值。</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; j &gt;= 0 &amp;&amp; arr[j] &gt; value; j--) &#123;</span><br><span class=\"line\">            // 把元素往后挪。</span><br><span class=\"line\">            arr[j + 1] = arr[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 把待插入元素，放到正确位置。</span><br><span class=\"line\">        arr[j + 1] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">冒泡排序：</span><br><span class=\"line\">public static void BubbleSort(int[] arr) &#123;</span><br><span class=\"line\">    int temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=0;i&lt;arr.length-1;i++)&#123;//冒泡趟数</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j=0;j&lt;arr.length-i-1;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j+1]&lt;arr[j])&#123;</span><br><span class=\"line\">                temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j+1];</span><br><span class=\"line\">                arr[j+1] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"为什么插入排序要比冒泡排序效率高？\"><a href=\"#为什么插入排序要比冒泡排序效率高？\" class=\"headerlink\" title=\"为什么插入排序要比冒泡排序效率高？\"></a>为什么插入排序要比冒泡排序效率高？</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序相比冒泡排序元素交换的次数是一样的，不过每一次元素交换时，插入排序只需要一次复制操作，</span><br><span class=\"line\">而冒泡排序需要三次赋值操作，赋值操作上花费时间是插入排序的三倍。</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">插入排序：</span><br><span class=\"line\">public static void insertSort(int[] arr) &#123;</span><br><span class=\"line\">    // 空数组 或 只有一个元素的数组，则什么都不做。</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr == null || arr.length == 0) <span class=\"built_in\">return</span>;</span><br><span class=\"line\">    // 外层循环的 i 代表有序区的最后一个元素。</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length - 1; i++) &#123;</span><br><span class=\"line\">        // 待插入的元素暂存到value.</span><br><span class=\"line\">        int value = arr[i + 1];</span><br><span class=\"line\">        int j = i;</span><br><span class=\"line\">        // j &lt; 0 时退出循环，说明 j 是最小的元素的索引值。</span><br><span class=\"line\">        // 或者 arr[j] &lt;= value 时退出循环，说明 j 是比value小的元素的索引值。</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; j &gt;= 0 &amp;&amp; arr[j] &gt; value; j--) &#123;</span><br><span class=\"line\">            // 把元素往后挪。</span><br><span class=\"line\">            arr[j + 1] = arr[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 把待插入元素，放到正确位置。</span><br><span class=\"line\">        arr[j + 1] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">冒泡排序：</span><br><span class=\"line\">public static void BubbleSort(int[] arr) &#123;</span><br><span class=\"line\">    int temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(int i=0;i&lt;arr.length-1;i++)&#123;//冒泡趟数</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(int j=0;j&lt;arr.length-i-1;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[j+1]&lt;arr[j])&#123;</span><br><span class=\"line\">                temp = arr[j];</span><br><span class=\"line\">                arr[j] = arr[j+1];</span><br><span class=\"line\">                arr[j+1] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"环形链表解决约瑟夫问题","date":"2020-04-15T16:00:00.000Z","_content":"\n``` bash\n/**\n * 环形链表解决约瑟夫问题\n * 问题：\n *   小孩围成一圈\n *   n=5 有5个人\n *   k=1 从第1个人开始数数\n *   m=2 数2下\n *   数到的小孩出圈\n * 解决：\n *  a）创建一个辅助指针变量，指向环形链表最后一个节点\n *  b）小孩报数前，先让first和help移动k-1次\n *  c）小孩报数时，first和help同时移动m-1次\n *  d）这时将first指向的小孩节点出圈  first = first.next   helper.next = first\n */\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n\n``` bash\npublic class Josepfu {\n    public static void main(String[] args) {\n        CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();\n        circleSingleLinkedList.addBoy(5);\n        circleSingleLinkedList.showBoy();\n        System.out.println();\n        circleSingleLinkedList.countBoy(1, 2, 5);\n    }\n}\n\n// 环形单向链表\nclass CircleSingleLinkedList {\n    private Boy first = null;\n\n    public void addBoy(int num) {\n        if (num < 1) {\n            System.out.println(\"num值不正确\");\n            return;\n        }\n        Boy curBoy = null;  // 辅助指针\n        for (int i = 1; i <= num; i++) {\n            Boy boy = new Boy(i);\n            if (i == 1) {\n                first = boy;\n                first.setNext(first);\n                curBoy = first;\n            } else {\n                curBoy.setNext(boy);\n                boy.setNext(first);\n                curBoy = boy;\n            }\n        }\n    }\n\n    public void showBoy() {\n        if (first == null) {\n            System.out.println(\"没有小孩\");\n            return;\n        }\n        Boy curBoy = first;  // 指针变量\n        while(true) {\n            System.out.printf(\"小孩的编号 %d \\n\", curBoy.getNo());\n            if (curBoy.getNext() == first) {\n                break;\n            }\n            curBoy = curBoy.getNext();\n        }\n    }\n\n    /**\n     * 小孩出圈\n     * @param startNo 表示从第几个小孩开始数数\n     * @param countNum  表示数几下\n     * @param num 表示最初有多少个小孩在圈中\n     */\n    public void countBoy(int startNo, int countNum, int num) {\n        if (first == null || startNo < 1 || startNo > num) {\n            System.out.println(\"参数有误\");\n            return;\n        }\n        // 辅助指针，指向环形链表的最后一个节点\n        Boy helper = first;\n        while(true) {\n            if (helper.getNext() == first) {\n                break;\n            }\n            helper = helper.getNext();\n        }\n        // 小孩报数前，先让first和helper移动startNo-1次(从第startNo个小孩开始数)\n        for (int i = 0; i < startNo-1; i++) {\n            first = first.getNext();\n            helper = helper.getNext();\n        }\n        // 循环操作，直到圈中只有一个节点\n        while(true) {\n            if (helper == first) {\n                break;\n            }\n            // 让first和helper同时移动countNum-1次\n            for (int j = 0; j < countNum-1; j++) {\n                first = first.getNext();\n                helper = helper.getNext();\n            }\n            // 此时的first节点，就是要出圈的小孩的节点\n            System.out.printf(\"小孩%d出圈\\n\", first.getNo());\n            first = first.getNext();\n            helper.setNext(first);\n        }\n        System.out.println(\"最后的小孩编号是 \" + first.getNo());\n    }\n}\n\n// Boy类，表示节点\nclass Boy {\n    private int no;\n    private Boy next;\n    public Boy(int no) {\n        this.no = no;\n    }\n\n    public int getNo() {\n        return no;\n    }\n\n    public void setNo(int no) {\n        this.no = no;\n    }\n\n    public Boy getNext() {\n        return next;\n    }\n\n    public void setNext(Boy next) {\n        this.next = next;\n    }\n}\n\n```\n","source":"_posts/algorithm_环形链表解决约瑟夫问题.md","raw":"---\ntitle: 环形链表解决约瑟夫问题\ndate: 2020-04-16\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n/**\n * 环形链表解决约瑟夫问题\n * 问题：\n *   小孩围成一圈\n *   n=5 有5个人\n *   k=1 从第1个人开始数数\n *   m=2 数2下\n *   数到的小孩出圈\n * 解决：\n *  a）创建一个辅助指针变量，指向环形链表最后一个节点\n *  b）小孩报数前，先让first和help移动k-1次\n *  c）小孩报数时，first和help同时移动m-1次\n *  d）这时将first指向的小孩节点出圈  first = first.next   helper.next = first\n */\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n\n``` bash\npublic class Josepfu {\n    public static void main(String[] args) {\n        CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();\n        circleSingleLinkedList.addBoy(5);\n        circleSingleLinkedList.showBoy();\n        System.out.println();\n        circleSingleLinkedList.countBoy(1, 2, 5);\n    }\n}\n\n// 环形单向链表\nclass CircleSingleLinkedList {\n    private Boy first = null;\n\n    public void addBoy(int num) {\n        if (num < 1) {\n            System.out.println(\"num值不正确\");\n            return;\n        }\n        Boy curBoy = null;  // 辅助指针\n        for (int i = 1; i <= num; i++) {\n            Boy boy = new Boy(i);\n            if (i == 1) {\n                first = boy;\n                first.setNext(first);\n                curBoy = first;\n            } else {\n                curBoy.setNext(boy);\n                boy.setNext(first);\n                curBoy = boy;\n            }\n        }\n    }\n\n    public void showBoy() {\n        if (first == null) {\n            System.out.println(\"没有小孩\");\n            return;\n        }\n        Boy curBoy = first;  // 指针变量\n        while(true) {\n            System.out.printf(\"小孩的编号 %d \\n\", curBoy.getNo());\n            if (curBoy.getNext() == first) {\n                break;\n            }\n            curBoy = curBoy.getNext();\n        }\n    }\n\n    /**\n     * 小孩出圈\n     * @param startNo 表示从第几个小孩开始数数\n     * @param countNum  表示数几下\n     * @param num 表示最初有多少个小孩在圈中\n     */\n    public void countBoy(int startNo, int countNum, int num) {\n        if (first == null || startNo < 1 || startNo > num) {\n            System.out.println(\"参数有误\");\n            return;\n        }\n        // 辅助指针，指向环形链表的最后一个节点\n        Boy helper = first;\n        while(true) {\n            if (helper.getNext() == first) {\n                break;\n            }\n            helper = helper.getNext();\n        }\n        // 小孩报数前，先让first和helper移动startNo-1次(从第startNo个小孩开始数)\n        for (int i = 0; i < startNo-1; i++) {\n            first = first.getNext();\n            helper = helper.getNext();\n        }\n        // 循环操作，直到圈中只有一个节点\n        while(true) {\n            if (helper == first) {\n                break;\n            }\n            // 让first和helper同时移动countNum-1次\n            for (int j = 0; j < countNum-1; j++) {\n                first = first.getNext();\n                helper = helper.getNext();\n            }\n            // 此时的first节点，就是要出圈的小孩的节点\n            System.out.printf(\"小孩%d出圈\\n\", first.getNo());\n            first = first.getNext();\n            helper.setNext(first);\n        }\n        System.out.println(\"最后的小孩编号是 \" + first.getNo());\n    }\n}\n\n// Boy类，表示节点\nclass Boy {\n    private int no;\n    private Boy next;\n    public Boy(int no) {\n        this.no = no;\n    }\n\n    public int getNo() {\n        return no;\n    }\n\n    public void setNo(int no) {\n        this.no = no;\n    }\n\n    public Boy getNext() {\n        return next;\n    }\n\n    public void setNext(Boy next) {\n        this.next = next;\n    }\n}\n\n```\n","slug":"algorithm_环形链表解决约瑟夫问题","published":1,"updated":"2021-11-03T15:26:05.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w6001k0w8n9rqq10m8","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 环形链表解决约瑟夫问题</span><br><span class=\"line\"> * 问题：</span><br><span class=\"line\"> *   小孩围成一圈</span><br><span class=\"line\"> *   n=5 有5个人</span><br><span class=\"line\"> *   k=1 从第1个人开始数数</span><br><span class=\"line\"> *   m=2 数2下</span><br><span class=\"line\"> *   数到的小孩出圈</span><br><span class=\"line\"> * 解决：</span><br><span class=\"line\"> *  a）创建一个辅助指针变量，指向环形链表最后一个节点</span><br><span class=\"line\"> *  b）小孩报数前，先让first和<span class=\"built_in\">help</span>移动k-1次</span><br><span class=\"line\"> *  c）小孩报数时，first和<span class=\"built_in\">help</span>同时移动m-1次</span><br><span class=\"line\"> *  d）这时将first指向的小孩节点出圈  first = first.next   helper.next = first</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Josepfu &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();</span><br><span class=\"line\">        circleSingleLinkedList.addBoy(5);</span><br><span class=\"line\">        circleSingleLinkedList.showBoy();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        circleSingleLinkedList.countBoy(1, 2, 5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 环形单向链表</span><br><span class=\"line\">class CircleSingleLinkedList &#123;</span><br><span class=\"line\">    private Boy first = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addBoy(int num) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; 1) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"num值不正确\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Boy curBoy = null;  // 辅助指针</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 1; i &lt;= num; i++) &#123;</span><br><span class=\"line\">            Boy boy = new Boy(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == 1) &#123;</span><br><span class=\"line\">                first = boy;</span><br><span class=\"line\">                first.setNext(first);</span><br><span class=\"line\">                curBoy = first;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                curBoy.setNext(boy);</span><br><span class=\"line\">                boy.setNext(first);</span><br><span class=\"line\">                curBoy = boy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">showBoy</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == null) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"没有小孩\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Boy curBoy = first;  // 指针变量</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"小孩的编号 %d \\n\"</span>, curBoy.getNo());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curBoy.getNext() == first) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curBoy = curBoy.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 小孩出圈</span><br><span class=\"line\">     * @param startNo 表示从第几个小孩开始数数</span><br><span class=\"line\">     * @param countNum  表示数几下</span><br><span class=\"line\">     * @param num 表示最初有多少个小孩在圈中</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void countBoy(int startNo, int countNum, int num) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == null || startNo &lt; 1 || startNo &gt; num) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"参数有误\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 辅助指针，指向环形链表的最后一个节点</span><br><span class=\"line\">        Boy helper = first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper.getNext() == first) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 小孩报数前，先让first和helper移动startNo-1次(从第startNo个小孩开始数)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; startNo-1; i++) &#123;</span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 循环操作，直到圈中只有一个节点</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper == first) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 让first和helper同时移动countNum-1次</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; countNum-1; j++) &#123;</span><br><span class=\"line\">                first = first.getNext();</span><br><span class=\"line\">                helper = helper.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 此时的first节点，就是要出圈的小孩的节点</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"小孩%d出圈\\n\"</span>, first.getNo());</span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper.setNext(first);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"最后的小孩编号是 \"</span> + first.getNo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Boy类，表示节点</span><br><span class=\"line\">class Boy &#123;</span><br><span class=\"line\">    private int no;</span><br><span class=\"line\">    private Boy next;</span><br><span class=\"line\">    public Boy(int no) &#123;</span><br><span class=\"line\">        this.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">getNo</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNo(int no) &#123;</span><br><span class=\"line\">        this.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Boy <span class=\"function\"><span class=\"title\">getNext</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNext(Boy next) &#123;</span><br><span class=\"line\">        this.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 环形链表解决约瑟夫问题</span><br><span class=\"line\"> * 问题：</span><br><span class=\"line\"> *   小孩围成一圈</span><br><span class=\"line\"> *   n=5 有5个人</span><br><span class=\"line\"> *   k=1 从第1个人开始数数</span><br><span class=\"line\"> *   m=2 数2下</span><br><span class=\"line\"> *   数到的小孩出圈</span><br><span class=\"line\"> * 解决：</span><br><span class=\"line\"> *  a）创建一个辅助指针变量，指向环形链表最后一个节点</span><br><span class=\"line\"> *  b）小孩报数前，先让first和<span class=\"built_in\">help</span>移动k-1次</span><br><span class=\"line\"> *  c）小孩报数时，first和<span class=\"built_in\">help</span>同时移动m-1次</span><br><span class=\"line\"> *  d）这时将first指向的小孩节点出圈  first = first.next   helper.next = first</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Josepfu &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        CircleSingleLinkedList circleSingleLinkedList = new CircleSingleLinkedList();</span><br><span class=\"line\">        circleSingleLinkedList.addBoy(5);</span><br><span class=\"line\">        circleSingleLinkedList.showBoy();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        circleSingleLinkedList.countBoy(1, 2, 5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 环形单向链表</span><br><span class=\"line\">class CircleSingleLinkedList &#123;</span><br><span class=\"line\">    private Boy first = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addBoy(int num) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num &lt; 1) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"num值不正确\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Boy curBoy = null;  // 辅助指针</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 1; i &lt;= num; i++) &#123;</span><br><span class=\"line\">            Boy boy = new Boy(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == 1) &#123;</span><br><span class=\"line\">                first = boy;</span><br><span class=\"line\">                first.setNext(first);</span><br><span class=\"line\">                curBoy = first;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                curBoy.setNext(boy);</span><br><span class=\"line\">                boy.setNext(first);</span><br><span class=\"line\">                curBoy = boy;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">showBoy</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == null) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"没有小孩\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Boy curBoy = first;  // 指针变量</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"小孩的编号 %d \\n\"</span>, curBoy.getNo());</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curBoy.getNext() == first) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            curBoy = curBoy.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 小孩出圈</span><br><span class=\"line\">     * @param startNo 表示从第几个小孩开始数数</span><br><span class=\"line\">     * @param countNum  表示数几下</span><br><span class=\"line\">     * @param num 表示最初有多少个小孩在圈中</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public void countBoy(int startNo, int countNum, int num) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (first == null || startNo &lt; 1 || startNo &gt; num) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"参数有误\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 辅助指针，指向环形链表的最后一个节点</span><br><span class=\"line\">        Boy helper = first;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper.getNext() == first) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 小孩报数前，先让first和helper移动startNo-1次(从第startNo个小孩开始数)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; startNo-1; i++) &#123;</span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper = helper.getNext();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 循环操作，直到圈中只有一个节点</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (helper == first) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 让first和helper同时移动countNum-1次</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; countNum-1; j++) &#123;</span><br><span class=\"line\">                first = first.getNext();</span><br><span class=\"line\">                helper = helper.getNext();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // 此时的first节点，就是要出圈的小孩的节点</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"小孩%d出圈\\n\"</span>, first.getNo());</span><br><span class=\"line\">            first = first.getNext();</span><br><span class=\"line\">            helper.setNext(first);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"最后的小孩编号是 \"</span> + first.getNo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Boy类，表示节点</span><br><span class=\"line\">class Boy &#123;</span><br><span class=\"line\">    private int no;</span><br><span class=\"line\">    private Boy next;</span><br><span class=\"line\">    public Boy(int no) &#123;</span><br><span class=\"line\">        this.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int <span class=\"function\"><span class=\"title\">getNo</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNo(int no) &#123;</span><br><span class=\"line\">        this.no = no;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Boy <span class=\"function\"><span class=\"title\">getNext</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNext(Boy next) &#123;</span><br><span class=\"line\">        this.next = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"PHP实现计数排序","date":"2020-03-26T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n计数排序：\nfunction countingSort($arr)\n{\n    $maxValue = max($arr);\n\n    // 初始化数组\n    for ($i=0; $i < $maxValue+1; $i++) {\n        $bucket[$i] = 0;\n    }\n\n    // 写入临时数组\n    for ($i=0; $i < count($arr); $i++) {\n        $bucket[$arr[$i]]++;\n    }\n\n    // 覆盖原数组\n    $index = 0;\n    for ($i=0; $i < $maxValue+1; $i++) {\n        while($bucket[$i] > 0) {\n            $arr[$index++] = $i;\n            $bucket[$i]--;\n        }\n    }\n\n    return $arr;\n}\n\n```\n","source":"_posts/algorithm_计数排序二.md","raw":"---\ntitle: PHP实现计数排序\ndate: 2020-03-27\ncategories:\n- algorithm\ntags:\n- php\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n计数排序：\nfunction countingSort($arr)\n{\n    $maxValue = max($arr);\n\n    // 初始化数组\n    for ($i=0; $i < $maxValue+1; $i++) {\n        $bucket[$i] = 0;\n    }\n\n    // 写入临时数组\n    for ($i=0; $i < count($arr); $i++) {\n        $bucket[$arr[$i]]++;\n    }\n\n    // 覆盖原数组\n    $index = 0;\n    for ($i=0; $i < $maxValue+1; $i++) {\n        while($bucket[$i] > 0) {\n            $arr[$index++] = $i;\n            $bucket[$i]--;\n        }\n    }\n\n    return $arr;\n}\n\n```\n","slug":"algorithm_计数排序二","published":1,"updated":"2021-11-03T15:26:23.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w8001o0w8nfh631l6s","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计数排序：</span><br><span class=\"line\"><span class=\"keyword\">function</span> countingSort(<span class=\"variable\">$arr</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$maxValue</span> = max(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化数组</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=0; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$maxValue</span>+1; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$bucket</span>[<span class=\"variable\">$i</span>] = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 写入临时数组</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=0; <span class=\"variable\">$i</span> &lt; count(<span class=\"variable\">$arr</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$bucket</span>[<span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 覆盖原数组</span><br><span class=\"line\">    <span class=\"variable\">$index</span> = 0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=0; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$maxValue</span>+1; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"variable\">$bucket</span>[<span class=\"variable\">$i</span>] &gt; 0) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$arr</span>[<span class=\"variable\">$index</span>++] = <span class=\"variable\">$i</span>;</span><br><span class=\"line\">            <span class=\"variable\">$bucket</span>[<span class=\"variable\">$i</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计数排序：</span><br><span class=\"line\"><span class=\"keyword\">function</span> countingSort(<span class=\"variable\">$arr</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"variable\">$maxValue</span> = max(<span class=\"variable\">$arr</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 初始化数组</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=0; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$maxValue</span>+1; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$bucket</span>[<span class=\"variable\">$i</span>] = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 写入临时数组</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=0; <span class=\"variable\">$i</span> &lt; count(<span class=\"variable\">$arr</span>); <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"variable\">$bucket</span>[<span class=\"variable\">$arr</span>[<span class=\"variable\">$i</span>]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 覆盖原数组</span><br><span class=\"line\">    <span class=\"variable\">$index</span> = 0;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"variable\">$i</span>=0; <span class=\"variable\">$i</span> &lt; <span class=\"variable\">$maxValue</span>+1; <span class=\"variable\">$i</span>++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"variable\">$bucket</span>[<span class=\"variable\">$i</span>] &gt; 0) &#123;</span><br><span class=\"line\">            <span class=\"variable\">$arr</span>[<span class=\"variable\">$index</span>++] = <span class=\"variable\">$i</span>;</span><br><span class=\"line\">            <span class=\"variable\">$bucket</span>[<span class=\"variable\">$i</span>]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"variable\">$arr</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"贪心算法解决用最少的广播站覆盖所有地区","date":"2020-03-23T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class GreedyAlgorithm {\n    public static void main(String[] args) {\n        // 创建广播电台，放入到Map当中\n        HashMap<String, HashSet<String>> broadcasts = new HashMap<String, HashSet<String>>();\n        // 将各个电台放入到broadcasts\n        HashSet<String> hashSet1 = new HashSet<String>();\n        hashSet1.add(\"北京\");\n        hashSet1.add(\"上海\");\n        hashSet1.add(\"天津\");\n\n        HashSet<String> hashSet2 = new HashSet<String>();\n        hashSet2.add(\"广州\");\n        hashSet2.add(\"北京\");\n        hashSet2.add(\"深圳\");\n\n        HashSet<String> hashSet3 = new HashSet<String>();\n        hashSet3.add(\"成都\");\n        hashSet3.add(\"上海\");\n        hashSet3.add(\"杭州\");\n\n        HashSet<String> hashSet4 = new HashSet<String>();\n        hashSet4.add(\"上海\");\n        hashSet4.add(\"天津\");\n\n        HashSet<String> hashSet5 = new HashSet<String>();\n        hashSet5.add(\"杭州\");\n        hashSet5.add(\"大连\");\n\n        // 加入到Map里面\n        broadcasts.put(\"K1\", hashSet1);\n        broadcasts.put(\"K2\", hashSet2);\n        broadcasts.put(\"K3\", hashSet3);\n        broadcasts.put(\"K4\", hashSet4);\n        broadcasts.put(\"K5\", hashSet5);\n\n        // 存放所有的地区\n        HashSet<String> allAreas = new HashSet<String>();\n        for (String key : broadcasts.keySet()) {\n            allAreas.addAll(broadcasts.get(key));\n        }\n\n        // 存放选择的电台集合\n        ArrayList<String> selects = new ArrayList<String>();\n\n        // 临时集合，存放遍历过程中覆盖的区域和当前还没有覆盖的区域的交集\n        HashSet<String> tempSet = new HashSet<String>();\n\n        // 定义给maxKey，\n        String maxKey = null;\n        // 每一次遍历找到包含最多未覆盖地区的集合，找到后从所有地区中去掉。最关键点\n        while(allAreas.size() != 0) {\n            maxKey = null;\n\n            // 遍历broadcasts 找到包含最多未覆盖地区的集合，key赋值给maxKey\n            for (String key : broadcasts.keySet()) {\n                tempSet.clear();\n                HashSet<String> areas = broadcasts.get(key);\n                tempSet.addAll(areas);\n                // tempSet和allAreas 取交集，赋值给tempSet\n                tempSet.retainAll(allAreas);\n                if (tempSet.size() > 0 && (maxKey == null || tempSet.size() > broadcasts.get(maxKey).size() )) {\n                    maxKey = key;\n                }\n            }\n            // maxKey != null，将maxKey加入到selects中\n            if (maxKey != null) {\n                selects.add(maxKey);\n                // maxKey指向的广播电台覆盖的区域去掉\n                allAreas.removeAll(broadcasts.get(maxKey));\n            }\n        }\n\n        System.out.println(selects);\n    }\n}\n\n```\n","source":"_posts/algorithm_贪心算法实例一.md","raw":"---\ntitle: 贪心算法解决用最少的广播站覆盖所有地区\ndate: 2020-03-24\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class GreedyAlgorithm {\n    public static void main(String[] args) {\n        // 创建广播电台，放入到Map当中\n        HashMap<String, HashSet<String>> broadcasts = new HashMap<String, HashSet<String>>();\n        // 将各个电台放入到broadcasts\n        HashSet<String> hashSet1 = new HashSet<String>();\n        hashSet1.add(\"北京\");\n        hashSet1.add(\"上海\");\n        hashSet1.add(\"天津\");\n\n        HashSet<String> hashSet2 = new HashSet<String>();\n        hashSet2.add(\"广州\");\n        hashSet2.add(\"北京\");\n        hashSet2.add(\"深圳\");\n\n        HashSet<String> hashSet3 = new HashSet<String>();\n        hashSet3.add(\"成都\");\n        hashSet3.add(\"上海\");\n        hashSet3.add(\"杭州\");\n\n        HashSet<String> hashSet4 = new HashSet<String>();\n        hashSet4.add(\"上海\");\n        hashSet4.add(\"天津\");\n\n        HashSet<String> hashSet5 = new HashSet<String>();\n        hashSet5.add(\"杭州\");\n        hashSet5.add(\"大连\");\n\n        // 加入到Map里面\n        broadcasts.put(\"K1\", hashSet1);\n        broadcasts.put(\"K2\", hashSet2);\n        broadcasts.put(\"K3\", hashSet3);\n        broadcasts.put(\"K4\", hashSet4);\n        broadcasts.put(\"K5\", hashSet5);\n\n        // 存放所有的地区\n        HashSet<String> allAreas = new HashSet<String>();\n        for (String key : broadcasts.keySet()) {\n            allAreas.addAll(broadcasts.get(key));\n        }\n\n        // 存放选择的电台集合\n        ArrayList<String> selects = new ArrayList<String>();\n\n        // 临时集合，存放遍历过程中覆盖的区域和当前还没有覆盖的区域的交集\n        HashSet<String> tempSet = new HashSet<String>();\n\n        // 定义给maxKey，\n        String maxKey = null;\n        // 每一次遍历找到包含最多未覆盖地区的集合，找到后从所有地区中去掉。最关键点\n        while(allAreas.size() != 0) {\n            maxKey = null;\n\n            // 遍历broadcasts 找到包含最多未覆盖地区的集合，key赋值给maxKey\n            for (String key : broadcasts.keySet()) {\n                tempSet.clear();\n                HashSet<String> areas = broadcasts.get(key);\n                tempSet.addAll(areas);\n                // tempSet和allAreas 取交集，赋值给tempSet\n                tempSet.retainAll(allAreas);\n                if (tempSet.size() > 0 && (maxKey == null || tempSet.size() > broadcasts.get(maxKey).size() )) {\n                    maxKey = key;\n                }\n            }\n            // maxKey != null，将maxKey加入到selects中\n            if (maxKey != null) {\n                selects.add(maxKey);\n                // maxKey指向的广播电台覆盖的区域去掉\n                allAreas.removeAll(broadcasts.get(maxKey));\n            }\n        }\n\n        System.out.println(selects);\n    }\n}\n\n```\n","slug":"algorithm_贪心算法实例一","published":1,"updated":"2021-11-03T15:26:41.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549w9001r0w8ng20q61ik","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GreedyAlgorithm &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 创建广播电台，放入到Map当中</span><br><span class=\"line\">        HashMap&lt;String, HashSet&lt;String&gt;&gt; broadcasts = new HashMap&lt;String, HashSet&lt;String&gt;&gt;();</span><br><span class=\"line\">        // 将各个电台放入到broadcasts</span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet1 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet1.add(<span class=\"string\">\"北京\"</span>);</span><br><span class=\"line\">        hashSet1.add(<span class=\"string\">\"上海\"</span>);</span><br><span class=\"line\">        hashSet1.add(<span class=\"string\">\"天津\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet2 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet2.add(<span class=\"string\">\"广州\"</span>);</span><br><span class=\"line\">        hashSet2.add(<span class=\"string\">\"北京\"</span>);</span><br><span class=\"line\">        hashSet2.add(<span class=\"string\">\"深圳\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet3 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet3.add(<span class=\"string\">\"成都\"</span>);</span><br><span class=\"line\">        hashSet3.add(<span class=\"string\">\"上海\"</span>);</span><br><span class=\"line\">        hashSet3.add(<span class=\"string\">\"杭州\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet4 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet4.add(<span class=\"string\">\"上海\"</span>);</span><br><span class=\"line\">        hashSet4.add(<span class=\"string\">\"天津\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet5 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet5.add(<span class=\"string\">\"杭州\"</span>);</span><br><span class=\"line\">        hashSet5.add(<span class=\"string\">\"大连\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 加入到Map里面</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K1\"</span>, hashSet1);</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K2\"</span>, hashSet2);</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K3\"</span>, hashSet3);</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K4\"</span>, hashSet4);</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K5\"</span>, hashSet5);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 存放所有的地区</span><br><span class=\"line\">        HashSet&lt;String&gt; allAreas = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : broadcasts.keySet()) &#123;</span><br><span class=\"line\">            allAreas.addAll(broadcasts.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 存放选择的电台集合</span><br><span class=\"line\">        ArrayList&lt;String&gt; selects = new ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 临时集合，存放遍历过程中覆盖的区域和当前还没有覆盖的区域的交集</span><br><span class=\"line\">        HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 定义给maxKey，</span><br><span class=\"line\">        String maxKey = null;</span><br><span class=\"line\">        // 每一次遍历找到包含最多未覆盖地区的集合，找到后从所有地区中去掉。最关键点</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(allAreas.size() != 0) &#123;</span><br><span class=\"line\">            maxKey = null;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 遍历broadcasts 找到包含最多未覆盖地区的集合，key赋值给maxKey</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : broadcasts.keySet()) &#123;</span><br><span class=\"line\">                tempSet.clear();</span><br><span class=\"line\">                HashSet&lt;String&gt; areas = broadcasts.get(key);</span><br><span class=\"line\">                tempSet.addAll(areas);</span><br><span class=\"line\">                // tempSet和allAreas 取交集，赋值给tempSet</span><br><span class=\"line\">                tempSet.retainAll(allAreas);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tempSet.size() &gt; 0 &amp;&amp; (maxKey == null || tempSet.size() &gt; broadcasts.get(maxKey).size() )) &#123;</span><br><span class=\"line\">                    maxKey = key;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // maxKey != null，将maxKey加入到selects中</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxKey != null) &#123;</span><br><span class=\"line\">                selects.add(maxKey);</span><br><span class=\"line\">                // maxKey指向的广播电台覆盖的区域去掉</span><br><span class=\"line\">                allAreas.removeAll(broadcasts.get(maxKey));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(selects);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class GreedyAlgorithm &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 创建广播电台，放入到Map当中</span><br><span class=\"line\">        HashMap&lt;String, HashSet&lt;String&gt;&gt; broadcasts = new HashMap&lt;String, HashSet&lt;String&gt;&gt;();</span><br><span class=\"line\">        // 将各个电台放入到broadcasts</span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet1 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet1.add(<span class=\"string\">\"北京\"</span>);</span><br><span class=\"line\">        hashSet1.add(<span class=\"string\">\"上海\"</span>);</span><br><span class=\"line\">        hashSet1.add(<span class=\"string\">\"天津\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet2 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet2.add(<span class=\"string\">\"广州\"</span>);</span><br><span class=\"line\">        hashSet2.add(<span class=\"string\">\"北京\"</span>);</span><br><span class=\"line\">        hashSet2.add(<span class=\"string\">\"深圳\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet3 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet3.add(<span class=\"string\">\"成都\"</span>);</span><br><span class=\"line\">        hashSet3.add(<span class=\"string\">\"上海\"</span>);</span><br><span class=\"line\">        hashSet3.add(<span class=\"string\">\"杭州\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet4 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet4.add(<span class=\"string\">\"上海\"</span>);</span><br><span class=\"line\">        hashSet4.add(<span class=\"string\">\"天津\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        HashSet&lt;String&gt; hashSet5 = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        hashSet5.add(<span class=\"string\">\"杭州\"</span>);</span><br><span class=\"line\">        hashSet5.add(<span class=\"string\">\"大连\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 加入到Map里面</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K1\"</span>, hashSet1);</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K2\"</span>, hashSet2);</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K3\"</span>, hashSet3);</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K4\"</span>, hashSet4);</span><br><span class=\"line\">        broadcasts.put(<span class=\"string\">\"K5\"</span>, hashSet5);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 存放所有的地区</span><br><span class=\"line\">        HashSet&lt;String&gt; allAreas = new HashSet&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String key : broadcasts.keySet()) &#123;</span><br><span class=\"line\">            allAreas.addAll(broadcasts.get(key));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 存放选择的电台集合</span><br><span class=\"line\">        ArrayList&lt;String&gt; selects = new ArrayList&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 临时集合，存放遍历过程中覆盖的区域和当前还没有覆盖的区域的交集</span><br><span class=\"line\">        HashSet&lt;String&gt; tempSet = new HashSet&lt;String&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        // 定义给maxKey，</span><br><span class=\"line\">        String maxKey = null;</span><br><span class=\"line\">        // 每一次遍历找到包含最多未覆盖地区的集合，找到后从所有地区中去掉。最关键点</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(allAreas.size() != 0) &#123;</span><br><span class=\"line\">            maxKey = null;</span><br><span class=\"line\"></span><br><span class=\"line\">            // 遍历broadcasts 找到包含最多未覆盖地区的集合，key赋值给maxKey</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String key : broadcasts.keySet()) &#123;</span><br><span class=\"line\">                tempSet.clear();</span><br><span class=\"line\">                HashSet&lt;String&gt; areas = broadcasts.get(key);</span><br><span class=\"line\">                tempSet.addAll(areas);</span><br><span class=\"line\">                // tempSet和allAreas 取交集，赋值给tempSet</span><br><span class=\"line\">                tempSet.retainAll(allAreas);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (tempSet.size() &gt; 0 &amp;&amp; (maxKey == null || tempSet.size() &gt; broadcasts.get(maxKey).size() )) &#123;</span><br><span class=\"line\">                    maxKey = key;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            // maxKey != null，将maxKey加入到selects中</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (maxKey != null) &#123;</span><br><span class=\"line\">                selects.add(maxKey);</span><br><span class=\"line\">                // maxKey指向的广播电台覆盖的区域去掉</span><br><span class=\"line\">                allAreas.removeAll(broadcasts.get(maxKey));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(selects);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"LeetCode 897.递增顺序查找树","date":"2020-04-06T16:00:00.000Z","_content":"\n### 这里的重点是理解指针\n\n``` bash\n1.中序遍历把二叉树转为一个递增数组\n2.声明一个变量ans，指向0节点。变量cur也指向0节点\n3.指针变量cur的右节点指向1节点，然后当前指针cur右移一位\n4.循环下来，变量ans位置没变，他的右节点就是目标右子节点树状结构\n```\n\n<!--more-->\n\n``` bash\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode increasingBST(TreeNode root) {\n        List <Integer> list = new ArrayList<>();\n        inorder(root, list);\n        TreeNode ans = new TreeNode(0), cur = ans;\n        for (int v : list) {\n            cur.right = new TreeNode(v);\n            cur = cur.right;\n        }\n        return ans.right;\n    }\n\n    public void inorder(TreeNode root, List <Integer> list) {\n        if (root == null) {\n            return;\n        }\n        inorder(root.left, list);\n        list.add(root.val);\n        inorder(root.right, list);\n    }\n}\n\n```\n","source":"_posts/algorithm_递增顺序查找树.md","raw":"---\ntitle: LeetCode 897.递增顺序查找树\ndate: 2020-04-07\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n### 这里的重点是理解指针\n\n``` bash\n1.中序遍历把二叉树转为一个递增数组\n2.声明一个变量ans，指向0节点。变量cur也指向0节点\n3.指针变量cur的右节点指向1节点，然后当前指针cur右移一位\n4.循环下来，变量ans位置没变，他的右节点就是目标右子节点树状结构\n```\n\n<!--more-->\n\n``` bash\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode increasingBST(TreeNode root) {\n        List <Integer> list = new ArrayList<>();\n        inorder(root, list);\n        TreeNode ans = new TreeNode(0), cur = ans;\n        for (int v : list) {\n            cur.right = new TreeNode(v);\n            cur = cur.right;\n        }\n        return ans.right;\n    }\n\n    public void inorder(TreeNode root, List <Integer> list) {\n        if (root == null) {\n            return;\n        }\n        inorder(root.left, list);\n        list.add(root.val);\n        inorder(root.right, list);\n    }\n}\n\n```\n","slug":"algorithm_递增顺序查找树","published":1,"updated":"2021-11-03T15:25:16.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wa001u0w8n4ixgbe7j","content":"<h3 id=\"这里的重点是理解指针\"><a href=\"#这里的重点是理解指针\" class=\"headerlink\" title=\"这里的重点是理解指针\"></a>这里的重点是理解指针</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.中序遍历把二叉树转为一个递增数组</span><br><span class=\"line\">2.声明一个变量ans，指向0节点。变量cur也指向0节点</span><br><span class=\"line\">3.指针变量cur的右节点指向1节点，然后当前指针cur右移一位</span><br><span class=\"line\">4.循环下来，变量ans位置没变，他的右节点就是目标右子节点树状结构</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition <span class=\"keyword\">for</span> a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public TreeNode increasingBST(TreeNode root) &#123;</span><br><span class=\"line\">        List &lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        inorder(root, list);</span><br><span class=\"line\">        TreeNode ans = new TreeNode(0), cur = ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int v : list) &#123;</span><br><span class=\"line\">            cur.right = new TreeNode(v);</span><br><span class=\"line\">            cur = cur.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ans.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void inorder(TreeNode root, List &lt;Integer&gt; list) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == null) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inorder(root.left, list);</span><br><span class=\"line\">        list.add(root.val);</span><br><span class=\"line\">        inorder(root.right, list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"这里的重点是理解指针\"><a href=\"#这里的重点是理解指针\" class=\"headerlink\" title=\"这里的重点是理解指针\"></a>这里的重点是理解指针</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.中序遍历把二叉树转为一个递增数组</span><br><span class=\"line\">2.声明一个变量ans，指向0节点。变量cur也指向0节点</span><br><span class=\"line\">3.指针变量cur的右节点指向1节点，然后当前指针cur右移一位</span><br><span class=\"line\">4.循环下来，变量ans位置没变，他的右节点就是目标右子节点树状结构</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition <span class=\"keyword\">for</span> a binary tree node.</span><br><span class=\"line\"> * public class TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode left;</span><br><span class=\"line\"> *     TreeNode right;</span><br><span class=\"line\"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">    public TreeNode increasingBST(TreeNode root) &#123;</span><br><span class=\"line\">        List &lt;Integer&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        inorder(root, list);</span><br><span class=\"line\">        TreeNode ans = new TreeNode(0), cur = ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int v : list) &#123;</span><br><span class=\"line\">            cur.right = new TreeNode(v);</span><br><span class=\"line\">            cur = cur.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> ans.right;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void inorder(TreeNode root, List &lt;Integer&gt; list) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root == null) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inorder(root.left, list);</span><br><span class=\"line\">        list.add(root.val);</span><br><span class=\"line\">        inorder(root.right, list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"选择排序","date":"2020-04-17T16:00:00.000Z","_content":"\n``` bash\n 思路：\n 1）选择排序有数组大小-1轮排序\n 2）每一轮排序，又是一个循环，循环的规则：\n 2.1）先假定当前数是最小数\n 2.2）然后和后面的每个数进行比较，如果有更小的数，则重新确定最小数，并得到下标\n 2.3）当遍历到数组的最后，就得到本轮最小数和下标\n 2.4）交换\n\n 代码：\n 先写出最简单的第一次循环结果\n 然后第二次、第三次，寻找规律\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class SelectSort {\n    public static void main(String[] args) {\n        int[] arr = {5, 9, 1, 6};\n\n        for (int i = 0; i < arr.length-1; i++) {\n            int min = arr[i];\n            int minindex = i;\n\n            for (int j = i + 1; j < arr.length; j++) {\n                if (min > arr[j]) {\n                    min = arr[j];\n                    minindex = j;\n                }\n            }\n            if (arr[i] > min) {\n                arr[minindex]   = arr[i];\n                arr[i]          = min;\n            }\n\n            System.out.println(Arrays.toString(arr));\n        }\n\n    }\n}\n\n```\n","source":"_posts/algorithm_选择排序.md","raw":"---\ntitle: 选择排序\ndate: 2020-04-18\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n``` bash\n 思路：\n 1）选择排序有数组大小-1轮排序\n 2）每一轮排序，又是一个循环，循环的规则：\n 2.1）先假定当前数是最小数\n 2.2）然后和后面的每个数进行比较，如果有更小的数，则重新确定最小数，并得到下标\n 2.3）当遍历到数组的最后，就得到本轮最小数和下标\n 2.4）交换\n\n 代码：\n 先写出最简单的第一次循环结果\n 然后第二次、第三次，寻找规律\n\n粘贴代码如下：\n\n```\n\n<!--more-->\n\n``` bash\npublic class SelectSort {\n    public static void main(String[] args) {\n        int[] arr = {5, 9, 1, 6};\n\n        for (int i = 0; i < arr.length-1; i++) {\n            int min = arr[i];\n            int minindex = i;\n\n            for (int j = i + 1; j < arr.length; j++) {\n                if (min > arr[j]) {\n                    min = arr[j];\n                    minindex = j;\n                }\n            }\n            if (arr[i] > min) {\n                arr[minindex]   = arr[i];\n                arr[i]          = min;\n            }\n\n            System.out.println(Arrays.toString(arr));\n        }\n\n    }\n}\n\n```\n","slug":"algorithm_选择排序","published":1,"updated":"2021-11-03T15:27:06.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wb001x0w8nhm03c5lg","content":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 思路：</span><br><span class=\"line\"> 1）选择排序有数组大小-1轮排序</span><br><span class=\"line\"> 2）每一轮排序，又是一个循环，循环的规则：</span><br><span class=\"line\"> 2.1）先假定当前数是最小数</span><br><span class=\"line\"> 2.2）然后和后面的每个数进行比较，如果有更小的数，则重新确定最小数，并得到下标</span><br><span class=\"line\"> 2.3）当遍历到数组的最后，就得到本轮最小数和下标</span><br><span class=\"line\"> 2.4）交换</span><br><span class=\"line\"></span><br><span class=\"line\"> 代码：</span><br><span class=\"line\"> 先写出最简单的第一次循环结果</span><br><span class=\"line\"> 然后第二次、第三次，寻找规律</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SelectSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;5, 9, 1, 6&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length-1; i++) &#123;</span><br><span class=\"line\">            int min = arr[i];</span><br><span class=\"line\">            int minindex = i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (min &gt; arr[j]) &#123;</span><br><span class=\"line\">                    min = arr[j];</span><br><span class=\"line\">                    minindex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &gt; min) &#123;</span><br><span class=\"line\">                arr[minindex]   = arr[i];</span><br><span class=\"line\">                arr[i]          = min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 思路：</span><br><span class=\"line\"> 1）选择排序有数组大小-1轮排序</span><br><span class=\"line\"> 2）每一轮排序，又是一个循环，循环的规则：</span><br><span class=\"line\"> 2.1）先假定当前数是最小数</span><br><span class=\"line\"> 2.2）然后和后面的每个数进行比较，如果有更小的数，则重新确定最小数，并得到下标</span><br><span class=\"line\"> 2.3）当遍历到数组的最后，就得到本轮最小数和下标</span><br><span class=\"line\"> 2.4）交换</span><br><span class=\"line\"></span><br><span class=\"line\"> 代码：</span><br><span class=\"line\"> 先写出最简单的第一次循环结果</span><br><span class=\"line\"> 然后第二次、第三次，寻找规律</span><br><span class=\"line\"></span><br><span class=\"line\">粘贴代码如下：</span><br></pre></td></tr></table></figure>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SelectSort &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        int[] arr = &#123;5, 9, 1, 6&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; arr.length-1; i++) &#123;</span><br><span class=\"line\">            int min = arr[i];</span><br><span class=\"line\">            int minindex = i;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = i + 1; j &lt; arr.length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (min &gt; arr[j]) &#123;</span><br><span class=\"line\">                    min = arr[j];</span><br><span class=\"line\">                    minindex = j;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &gt; min) &#123;</span><br><span class=\"line\">                arr[minindex]   = arr[i];</span><br><span class=\"line\">                arr[i]          = min;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Arrays.toString(arr));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"递归回溯解决迷宫问题","date":"2020-04-05T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n\n``` bash\npublic class MiGong {\n    public static void main(String[] args) {\n        // 创建二维数组作为迷宫\n        int[][] map = new int[8][7];\n        for (int i = 0; i < 8; i++) {\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n        for (int i = 0; i < 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n        }\n        map[3][1] = 1;\n        map[3][2] = 1;\n\n        // 输出地图\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 7; j++) {\n                System.out.print(map[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n        // 递归回溯给小球找路\n        setWay(map, 1, 1);\n\n        // 输出地图，小球走过的路\n        System.out.println(\"小球走过的路\");\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 7; j++) {\n                System.out.print(map[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    /**\n     * 使用递归回溯来给小球找路\n     * 1.map 表示地图\n     * 2.i,j 表示从地图的哪个位置开始出发（1,1）\n     * 3.如果小球能找到 map[6][5]位置，说明通路找到\n     * 4.约定：当 map[i][j]为 0表示没有走过，1表示墙，2表示通路可以走，3表示该点已走过但是走不通\n     * 5.走迷宫时，需要确定一个策略（方法），下->右->上->左，如果该点走不通再回溯\n     *\n     * @param map 地图\n     * @param i   从哪个位置开始找\n     * @param j\n     * @return    如果找到通路返回true，否则返回false\n     * */\n    public static boolean setWay(int[][] map, int i, int j) {\n        if(map[6][5] == 2) {\n            return true;    // 通路已找到\n        } else {\n            if (map[i][j] == 0) {\n                map[i][j] = 2;\n                if (setWay(map, i+1, j)) {\n                    return true;\n                } else if (setWay(map, i, j+1)) {\n                    return true;\n                } else if (setWay(map, i-1, j)) {\n                    return true;\n                } else if (setWay(map, i, j-1)) {\n                    return true;\n                } else {\n                    map[i][j] = 3;\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n    }\n}\n\n```","source":"_posts/algorithm_递归回溯解决迷宫问题.md","raw":"---\ntitle: 递归回溯解决迷宫问题\ndate: 2020-04-06\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n\n``` bash\npublic class MiGong {\n    public static void main(String[] args) {\n        // 创建二维数组作为迷宫\n        int[][] map = new int[8][7];\n        for (int i = 0; i < 8; i++) {\n            map[i][0] = 1;\n            map[i][6] = 1;\n        }\n        for (int i = 0; i < 7; i++) {\n            map[0][i] = 1;\n            map[7][i] = 1;\n        }\n        map[3][1] = 1;\n        map[3][2] = 1;\n\n        // 输出地图\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 7; j++) {\n                System.out.print(map[i][j] + \" \");\n            }\n            System.out.println();\n        }\n\n        // 递归回溯给小球找路\n        setWay(map, 1, 1);\n\n        // 输出地图，小球走过的路\n        System.out.println(\"小球走过的路\");\n        for (int i = 0; i < 8; i++) {\n            for (int j = 0; j < 7; j++) {\n                System.out.print(map[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    /**\n     * 使用递归回溯来给小球找路\n     * 1.map 表示地图\n     * 2.i,j 表示从地图的哪个位置开始出发（1,1）\n     * 3.如果小球能找到 map[6][5]位置，说明通路找到\n     * 4.约定：当 map[i][j]为 0表示没有走过，1表示墙，2表示通路可以走，3表示该点已走过但是走不通\n     * 5.走迷宫时，需要确定一个策略（方法），下->右->上->左，如果该点走不通再回溯\n     *\n     * @param map 地图\n     * @param i   从哪个位置开始找\n     * @param j\n     * @return    如果找到通路返回true，否则返回false\n     * */\n    public static boolean setWay(int[][] map, int i, int j) {\n        if(map[6][5] == 2) {\n            return true;    // 通路已找到\n        } else {\n            if (map[i][j] == 0) {\n                map[i][j] = 2;\n                if (setWay(map, i+1, j)) {\n                    return true;\n                } else if (setWay(map, i, j+1)) {\n                    return true;\n                } else if (setWay(map, i-1, j)) {\n                    return true;\n                } else if (setWay(map, i, j-1)) {\n                    return true;\n                } else {\n                    map[i][j] = 3;\n                    return false;\n                }\n            } else {\n                return false;\n            }\n        }\n    }\n}\n\n```","slug":"algorithm_递归回溯解决迷宫问题","published":1,"updated":"2021-11-03T15:25:08.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wc00200w8nh8nd1on1","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MiGong &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 创建二维数组作为迷宫</span><br><span class=\"line\">        int[][] map = new int[8][7];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 8; i++) &#123;</span><br><span class=\"line\">            map[i][0] = 1;</span><br><span class=\"line\">            map[i][6] = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 7; i++) &#123;</span><br><span class=\"line\">            map[0][i] = 1;</span><br><span class=\"line\">            map[7][i] = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map[3][1] = 1;</span><br><span class=\"line\">        map[3][2] = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 输出地图</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 8; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; 7; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 递归回溯给小球找路</span><br><span class=\"line\">        setWay(map, 1, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 输出地图，小球走过的路</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"小球走过的路\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 8; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; 7; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用递归回溯来给小球找路</span><br><span class=\"line\">     * 1.map 表示地图</span><br><span class=\"line\">     * 2.i,j 表示从地图的哪个位置开始出发（1,1）</span><br><span class=\"line\">     * 3.如果小球能找到 map[6][5]位置，说明通路找到</span><br><span class=\"line\">     * 4.约定：当 map[i][j]为 0表示没有走过，1表示墙，2表示通路可以走，3表示该点已走过但是走不通</span><br><span class=\"line\">     * 5.走迷宫时，需要确定一个策略（方法），下-&gt;右-&gt;上-&gt;左，如果该点走不通再回溯</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param map 地图</span><br><span class=\"line\">     * @param i   从哪个位置开始找</span><br><span class=\"line\">     * @param j</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span>    如果找到通路返回<span class=\"literal\">true</span>，否则返回<span class=\"literal\">false</span></span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public static boolean setWay(int[][] map, int i, int j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map[6][5] == 2) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;    // 通路已找到</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map[i][j] == 0) &#123;</span><br><span class=\"line\">                map[i][j] = 2;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setWay(map, i+1, j)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j+1)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i-1, j)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j-1)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map[i][j] = 3;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MiGong &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        // 创建二维数组作为迷宫</span><br><span class=\"line\">        int[][] map = new int[8][7];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 8; i++) &#123;</span><br><span class=\"line\">            map[i][0] = 1;</span><br><span class=\"line\">            map[i][6] = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 7; i++) &#123;</span><br><span class=\"line\">            map[0][i] = 1;</span><br><span class=\"line\">            map[7][i] = 1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map[3][1] = 1;</span><br><span class=\"line\">        map[3][2] = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 输出地图</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 8; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; 7; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        // 递归回溯给小球找路</span><br><span class=\"line\">        setWay(map, 1, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">        // 输出地图，小球走过的路</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"小球走过的路\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (int i = 0; i &lt; 8; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (int j = 0; j &lt; 7; j++) &#123;</span><br><span class=\"line\">                System.out.print(map[i][j] + <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 使用递归回溯来给小球找路</span><br><span class=\"line\">     * 1.map 表示地图</span><br><span class=\"line\">     * 2.i,j 表示从地图的哪个位置开始出发（1,1）</span><br><span class=\"line\">     * 3.如果小球能找到 map[6][5]位置，说明通路找到</span><br><span class=\"line\">     * 4.约定：当 map[i][j]为 0表示没有走过，1表示墙，2表示通路可以走，3表示该点已走过但是走不通</span><br><span class=\"line\">     * 5.走迷宫时，需要确定一个策略（方法），下-&gt;右-&gt;上-&gt;左，如果该点走不通再回溯</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param map 地图</span><br><span class=\"line\">     * @param i   从哪个位置开始找</span><br><span class=\"line\">     * @param j</span><br><span class=\"line\">     * @<span class=\"built_in\">return</span>    如果找到通路返回<span class=\"literal\">true</span>，否则返回<span class=\"literal\">false</span></span><br><span class=\"line\">     * */</span><br><span class=\"line\">    public static boolean setWay(int[][] map, int i, int j) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map[6][5] == 2) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;    // 通路已找到</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map[i][j] == 0) &#123;</span><br><span class=\"line\">                map[i][j] = 2;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (setWay(map, i+1, j)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j+1)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i-1, j)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (setWay(map, i, j-1)) &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    map[i][j] = 3;</span><br><span class=\"line\">                    <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java语言实现计数排序","date":"2020-04-02T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n计数排序：\npublic static void countSort(int[] arr) {\n    int[] result = new int[arr.length];\n    int[] count = new int[6]; // 数组大小为原数组最大元素大小+1\n\n    for (int i=0; i<arr.length; i++) {\n        count[arr[i]]++;\n    }\n\n    for (int i = 0, j=0; i < count.length; i++) {\n        while (count[i]-- >0) result[j++] = i;\n    }\n}\n\n```\n","source":"_posts/algorithm_计数排序.md","raw":"---\ntitle: Java语言实现计数排序\ndate: 2020-04-03\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\n计数排序：\npublic static void countSort(int[] arr) {\n    int[] result = new int[arr.length];\n    int[] count = new int[6]; // 数组大小为原数组最大元素大小+1\n\n    for (int i=0; i<arr.length; i++) {\n        count[arr[i]]++;\n    }\n\n    for (int i = 0, j=0; i < count.length; i++) {\n        while (count[i]-- >0) result[j++] = i;\n    }\n}\n\n```\n","slug":"algorithm_计数排序","published":1,"updated":"2021-11-03T15:26:17.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wd00230w8n48vsc92m","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计数排序：</span><br><span class=\"line\">public static void countSort(int[] arr) &#123;</span><br><span class=\"line\">    int[] result = new int[arr.length];</span><br><span class=\"line\">    int[] count = new int[6]; // 数组大小为原数组最大元素大小+1</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i=0; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">        count[arr[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = 0, j=0; i &lt; count.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count[i]-- &gt;0) result[j++] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">计数排序：</span><br><span class=\"line\">public static void countSort(int[] arr) &#123;</span><br><span class=\"line\">    int[] result = new int[arr.length];</span><br><span class=\"line\">    int[] count = new int[6]; // 数组大小为原数组最大元素大小+1</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i=0; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">        count[arr[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (int i = 0, j=0; i &lt; count.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (count[i]-- &gt;0) result[j++] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"队列之单链表形式","date":"2020-04-11T16:00:00.000Z","_content":"\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class SingleLinkedListDemo {\n    public static void main(String[] args) {\n        HeroNode heroNode1 = new HeroNode(1, \"松江\", \"及时雨\");\n        HeroNode heroNode2 = new HeroNode(2, \"卢俊义\", \"玉麒麟\");\n        HeroNode heroNode3 = new HeroNode(3, \"无用\", \"智多星\");\n        HeroNode heroNode4 = new HeroNode(4, \"林冲\", \"豹子头\");\n\n        SingleLinkedList sllist = new SingleLinkedList();\n//        sllist.add(heroNode1);\n//        sllist.add(heroNode2);\n//        sllist.add(heroNode3);\n//        sllist.add(heroNode4);\n\n        sllist.addByOrder(heroNode1);\n        sllist.addByOrder(heroNode3);\n        sllist.addByOrder(heroNode2);\n        sllist.addByOrder(heroNode4);\n        sllist.addByOrder(heroNode3);\n\n        sllist.list();\n\n        sllist.update(new HeroNode(3, \"无用吗\", \"智多星\"));\n        sllist.list();\n    }\n}\nclass SingleLinkedList {\n    private HeroNode head = new HeroNode(0, \"\", \"\");\n\n    public void add(HeroNode heroNode) {\n        // 先找到最后一个节点\n        HeroNode temp = head;\n        while(true) {\n            if (temp.next == null) {\n                break;\n            }\n            temp = temp.next;\n        }\n        temp.next = heroNode;  // 这里需要商榷\n    }\n\n    public void addByOrder(HeroNode heroNode) {\n        HeroNode temp = head;\n        boolean flag = false;\n        while(true) {\n            if (temp.next == null) {\n                break;\n            }\n            if (temp.next.no > heroNode.no) {\n                break;\n            } else if(temp.next.no == heroNode.no) {\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        if (flag) {\n            System.out.printf(\"英雄已存在， 编号： %d\\n\", heroNode.no);\n            return;\n        } else {\n            heroNode.next = temp.next;\n            temp.next = heroNode;\n        }\n    }\n\n    public void update(HeroNode newHeroNode) {\n        if (head.next == null) {\n            System.out.println(\"队列为空\");\n            return;\n        }\n        HeroNode temp = head.next;\n        boolean flag = false;\n        while(true) {\n            if (temp == null) {\n                break;\n            }\n            if (temp.no == newHeroNode.no) {\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        if (flag) {\n            temp.name = newHeroNode.name;\n            temp.nickname = newHeroNode.nickname;\n        } else {\n            System.out.println(\"节点未找到\");\n        }\n    }\n\n    // 展示链表\n    public void list() {\n        if (head.next == null) {\n            System.out.println(\"链表为空\");\n            return;\n        }\n        HeroNode temp = head.next;\n        while(true) {\n            if (temp == null) {\n                break;\n            }\n            System.out.println(temp);\n            temp = temp.next;\n        }\n    }\n}\nclass HeroNode {\n    public int no;\n    public String name;\n    public String nickname;\n    public HeroNode next; // 指向下一个节点\n\n    public HeroNode(int no, String name, String nickname) {\n        this.no = no;\n        this.name = name;\n        this.nickname = nickname;\n    }\n\n    // 重写方法\n    public String toString() {\n        return \"HeroNode [no=\"+ no +\" name=\"+ name +\" nickname=\" + nickname +\"]\";\n    }\n}\n\n```\n","source":"_posts/algorithm_队列之单链表形式.md","raw":"---\ntitle: 队列之单链表形式\ndate: 2020-04-12\ncategories:\n- algorithm\ntags:\n- java\n- algorithm\n---\n\n粘贴代码如下：\n\n<!--more-->\n\n``` bash\npublic class SingleLinkedListDemo {\n    public static void main(String[] args) {\n        HeroNode heroNode1 = new HeroNode(1, \"松江\", \"及时雨\");\n        HeroNode heroNode2 = new HeroNode(2, \"卢俊义\", \"玉麒麟\");\n        HeroNode heroNode3 = new HeroNode(3, \"无用\", \"智多星\");\n        HeroNode heroNode4 = new HeroNode(4, \"林冲\", \"豹子头\");\n\n        SingleLinkedList sllist = new SingleLinkedList();\n//        sllist.add(heroNode1);\n//        sllist.add(heroNode2);\n//        sllist.add(heroNode3);\n//        sllist.add(heroNode4);\n\n        sllist.addByOrder(heroNode1);\n        sllist.addByOrder(heroNode3);\n        sllist.addByOrder(heroNode2);\n        sllist.addByOrder(heroNode4);\n        sllist.addByOrder(heroNode3);\n\n        sllist.list();\n\n        sllist.update(new HeroNode(3, \"无用吗\", \"智多星\"));\n        sllist.list();\n    }\n}\nclass SingleLinkedList {\n    private HeroNode head = new HeroNode(0, \"\", \"\");\n\n    public void add(HeroNode heroNode) {\n        // 先找到最后一个节点\n        HeroNode temp = head;\n        while(true) {\n            if (temp.next == null) {\n                break;\n            }\n            temp = temp.next;\n        }\n        temp.next = heroNode;  // 这里需要商榷\n    }\n\n    public void addByOrder(HeroNode heroNode) {\n        HeroNode temp = head;\n        boolean flag = false;\n        while(true) {\n            if (temp.next == null) {\n                break;\n            }\n            if (temp.next.no > heroNode.no) {\n                break;\n            } else if(temp.next.no == heroNode.no) {\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        if (flag) {\n            System.out.printf(\"英雄已存在， 编号： %d\\n\", heroNode.no);\n            return;\n        } else {\n            heroNode.next = temp.next;\n            temp.next = heroNode;\n        }\n    }\n\n    public void update(HeroNode newHeroNode) {\n        if (head.next == null) {\n            System.out.println(\"队列为空\");\n            return;\n        }\n        HeroNode temp = head.next;\n        boolean flag = false;\n        while(true) {\n            if (temp == null) {\n                break;\n            }\n            if (temp.no == newHeroNode.no) {\n                flag = true;\n                break;\n            }\n            temp = temp.next;\n        }\n        if (flag) {\n            temp.name = newHeroNode.name;\n            temp.nickname = newHeroNode.nickname;\n        } else {\n            System.out.println(\"节点未找到\");\n        }\n    }\n\n    // 展示链表\n    public void list() {\n        if (head.next == null) {\n            System.out.println(\"链表为空\");\n            return;\n        }\n        HeroNode temp = head.next;\n        while(true) {\n            if (temp == null) {\n                break;\n            }\n            System.out.println(temp);\n            temp = temp.next;\n        }\n    }\n}\nclass HeroNode {\n    public int no;\n    public String name;\n    public String nickname;\n    public HeroNode next; // 指向下一个节点\n\n    public HeroNode(int no, String name, String nickname) {\n        this.no = no;\n        this.name = name;\n        this.nickname = nickname;\n    }\n\n    // 重写方法\n    public String toString() {\n        return \"HeroNode [no=\"+ no +\" name=\"+ name +\" nickname=\" + nickname +\"]\";\n    }\n}\n\n```\n","slug":"algorithm_队列之单链表形式","published":1,"updated":"2021-11-03T15:25:41.121Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549we00260w8nc48rai15","content":"<p>粘贴代码如下：</p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleLinkedListDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        HeroNode heroNode1 = new HeroNode(1, <span class=\"string\">\"松江\"</span>, <span class=\"string\">\"及时雨\"</span>);</span><br><span class=\"line\">        HeroNode heroNode2 = new HeroNode(2, <span class=\"string\">\"卢俊义\"</span>, <span class=\"string\">\"玉麒麟\"</span>);</span><br><span class=\"line\">        HeroNode heroNode3 = new HeroNode(3, <span class=\"string\">\"无用\"</span>, <span class=\"string\">\"智多星\"</span>);</span><br><span class=\"line\">        HeroNode heroNode4 = new HeroNode(4, <span class=\"string\">\"林冲\"</span>, <span class=\"string\">\"豹子头\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        SingleLinkedList sllist = new SingleLinkedList();</span><br><span class=\"line\">//        sllist.add(heroNode1);</span><br><span class=\"line\">//        sllist.add(heroNode2);</span><br><span class=\"line\">//        sllist.add(heroNode3);</span><br><span class=\"line\">//        sllist.add(heroNode4);</span><br><span class=\"line\"></span><br><span class=\"line\">        sllist.addByOrder(heroNode1);</span><br><span class=\"line\">        sllist.addByOrder(heroNode3);</span><br><span class=\"line\">        sllist.addByOrder(heroNode2);</span><br><span class=\"line\">        sllist.addByOrder(heroNode4);</span><br><span class=\"line\">        sllist.addByOrder(heroNode3);</span><br><span class=\"line\"></span><br><span class=\"line\">        sllist.list();</span><br><span class=\"line\"></span><br><span class=\"line\">        sllist.update(new HeroNode(3, <span class=\"string\">\"无用吗\"</span>, <span class=\"string\">\"智多星\"</span>));</span><br><span class=\"line\">        sllist.list();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class SingleLinkedList &#123;</span><br><span class=\"line\">    private HeroNode head = new HeroNode(0, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    public void add(HeroNode heroNode) &#123;</span><br><span class=\"line\">        // 先找到最后一个节点</span><br><span class=\"line\">        HeroNode temp = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.next = heroNode;  // 这里需要商榷</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addByOrder(HeroNode heroNode) &#123;</span><br><span class=\"line\">        HeroNode temp = head;</span><br><span class=\"line\">        boolean flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next.no &gt; heroNode.no) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(temp.next.no == heroNode.no) &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"英雄已存在， 编号： %d\\n\"</span>, heroNode.no);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            heroNode.next = temp.next;</span><br><span class=\"line\">            temp.next = heroNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void update(HeroNode newHeroNode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == null) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"队列为空\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HeroNode temp = head.next;</span><br><span class=\"line\">        boolean flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.no == newHeroNode.no) &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            temp.name = newHeroNode.name;</span><br><span class=\"line\">            temp.nickname = newHeroNode.nickname;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"节点未找到\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 展示链表</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">list</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == null) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"链表为空\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HeroNode temp = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class HeroNode &#123;</span><br><span class=\"line\">    public int no;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    public String nickname;</span><br><span class=\"line\">    public HeroNode next; // 指向下一个节点</span><br><span class=\"line\"></span><br><span class=\"line\">    public HeroNode(int no, String name, String nickname) &#123;</span><br><span class=\"line\">        this.no = no;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.nickname = nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 重写方法</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"HeroNode [no=\"</span>+ no +<span class=\"string\">\" name=\"</span>+ name +<span class=\"string\">\" nickname=\"</span> + nickname +<span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>粘贴代码如下：</p>","more":"<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SingleLinkedListDemo &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        HeroNode heroNode1 = new HeroNode(1, <span class=\"string\">\"松江\"</span>, <span class=\"string\">\"及时雨\"</span>);</span><br><span class=\"line\">        HeroNode heroNode2 = new HeroNode(2, <span class=\"string\">\"卢俊义\"</span>, <span class=\"string\">\"玉麒麟\"</span>);</span><br><span class=\"line\">        HeroNode heroNode3 = new HeroNode(3, <span class=\"string\">\"无用\"</span>, <span class=\"string\">\"智多星\"</span>);</span><br><span class=\"line\">        HeroNode heroNode4 = new HeroNode(4, <span class=\"string\">\"林冲\"</span>, <span class=\"string\">\"豹子头\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        SingleLinkedList sllist = new SingleLinkedList();</span><br><span class=\"line\">//        sllist.add(heroNode1);</span><br><span class=\"line\">//        sllist.add(heroNode2);</span><br><span class=\"line\">//        sllist.add(heroNode3);</span><br><span class=\"line\">//        sllist.add(heroNode4);</span><br><span class=\"line\"></span><br><span class=\"line\">        sllist.addByOrder(heroNode1);</span><br><span class=\"line\">        sllist.addByOrder(heroNode3);</span><br><span class=\"line\">        sllist.addByOrder(heroNode2);</span><br><span class=\"line\">        sllist.addByOrder(heroNode4);</span><br><span class=\"line\">        sllist.addByOrder(heroNode3);</span><br><span class=\"line\"></span><br><span class=\"line\">        sllist.list();</span><br><span class=\"line\"></span><br><span class=\"line\">        sllist.update(new HeroNode(3, <span class=\"string\">\"无用吗\"</span>, <span class=\"string\">\"智多星\"</span>));</span><br><span class=\"line\">        sllist.list();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class SingleLinkedList &#123;</span><br><span class=\"line\">    private HeroNode head = new HeroNode(0, <span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    public void add(HeroNode heroNode) &#123;</span><br><span class=\"line\">        // 先找到最后一个节点</span><br><span class=\"line\">        HeroNode temp = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp.next = heroNode;  // 这里需要商榷</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addByOrder(HeroNode heroNode) &#123;</span><br><span class=\"line\">        HeroNode temp = head;</span><br><span class=\"line\">        boolean flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.next.no &gt; heroNode.no) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(temp.next.no == heroNode.no) &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            System.out.printf(<span class=\"string\">\"英雄已存在， 编号： %d\\n\"</span>, heroNode.no);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            heroNode.next = temp.next;</span><br><span class=\"line\">            temp.next = heroNode;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void update(HeroNode newHeroNode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == null) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"队列为空\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HeroNode temp = head.next;</span><br><span class=\"line\">        boolean flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.no == newHeroNode.no) &#123;</span><br><span class=\"line\">                flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">            temp.name = newHeroNode.name;</span><br><span class=\"line\">            temp.nickname = newHeroNode.nickname;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"节点未找到\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 展示链表</span><br><span class=\"line\">    public void <span class=\"function\"><span class=\"title\">list</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.next == null) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"链表为空\"</span>);</span><br><span class=\"line\">            <span class=\"built_in\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        HeroNode temp = head.next;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp == null) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(temp);</span><br><span class=\"line\">            temp = temp.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class HeroNode &#123;</span><br><span class=\"line\">    public int no;</span><br><span class=\"line\">    public String name;</span><br><span class=\"line\">    public String nickname;</span><br><span class=\"line\">    public HeroNode next; // 指向下一个节点</span><br><span class=\"line\"></span><br><span class=\"line\">    public HeroNode(int no, String name, String nickname) &#123;</span><br><span class=\"line\">        this.no = no;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">        this.nickname = nickname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 重写方法</span><br><span class=\"line\">    public String <span class=\"function\"><span class=\"title\">toString</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> <span class=\"string\">\"HeroNode [no=\"</span>+ no +<span class=\"string\">\" name=\"</span>+ name +<span class=\"string\">\" nickname=\"</span> + nickname +<span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CentOS配置静态IP","date":"2021-12-28T16:00:00.000Z","_content":"\n📶 CentOS配置静态IP的流程整理如下：\n\n<!--more-->\n\n1. ip a 命令确定LAN1接口对应的网卡型号，很可能是 enp62s0f2(双核机型), eno1(单核机型)\n2. 配置默认网卡：vi /etc/sysconfig/network 添加如下配置：\n    GATEWAYDEV=enp62s0f2\n    GATEWAY=192.168.1.1\n3. 修改相应的配置文件 vi /etc/sysconfig/network-scripts/ifcfg-enp62s0f2(网卡名称)\n   不启用DHCP：BOOTPROTO=none\n   开机联网：ONBOOT=yes\n   本机静态IP：IPADDR=192.168.1.200 (内网随机一个)\n   掩码：PREIFIX=24\n4. 启用网卡: nmcli con up enp62s0f2(网卡名称)；\n5. 重启网络: service network restart;\n6. 测试是否能联网 ping 192.168.1.8， ping 223.5.5.5(外网测试，比如用阿里IP)\n7. 配置实际网关  vi /etc/sysconfig/network\n8. 按照实际参数修改 IPPADDR, PREFIX vi /etc/sysconfig/network-scripts/ifcfg-网卡名称；\n9. 重启网络: service network restart;\n10. 检验是否正确\n    cat /etc/sysconfig/network\n    cat /etc/sysconfig/network-scripts/ifcfg-网卡名称\n    ip a","source":"_posts/centOS_配置静态IP.md","raw":"---\ntitle: CentOS配置静态IP\ndate: 2021-12-29\ncategories:\n- CentOS\ntags:\n- CentOS\n- network\n---\n\n📶 CentOS配置静态IP的流程整理如下：\n\n<!--more-->\n\n1. ip a 命令确定LAN1接口对应的网卡型号，很可能是 enp62s0f2(双核机型), eno1(单核机型)\n2. 配置默认网卡：vi /etc/sysconfig/network 添加如下配置：\n    GATEWAYDEV=enp62s0f2\n    GATEWAY=192.168.1.1\n3. 修改相应的配置文件 vi /etc/sysconfig/network-scripts/ifcfg-enp62s0f2(网卡名称)\n   不启用DHCP：BOOTPROTO=none\n   开机联网：ONBOOT=yes\n   本机静态IP：IPADDR=192.168.1.200 (内网随机一个)\n   掩码：PREIFIX=24\n4. 启用网卡: nmcli con up enp62s0f2(网卡名称)；\n5. 重启网络: service network restart;\n6. 测试是否能联网 ping 192.168.1.8， ping 223.5.5.5(外网测试，比如用阿里IP)\n7. 配置实际网关  vi /etc/sysconfig/network\n8. 按照实际参数修改 IPPADDR, PREFIX vi /etc/sysconfig/network-scripts/ifcfg-网卡名称；\n9. 重启网络: service network restart;\n10. 检验是否正确\n    cat /etc/sysconfig/network\n    cat /etc/sysconfig/network-scripts/ifcfg-网卡名称\n    ip a","slug":"centOS_配置静态IP","published":1,"updated":"2021-12-29T15:45:02.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wf00290w8nfrge5tvv","content":"<p>📶 CentOS配置静态IP的流程整理如下：</p>\n<a id=\"more\"></a>\n\n<ol>\n<li>ip a 命令确定LAN1接口对应的网卡型号，很可能是 enp62s0f2(双核机型), eno1(单核机型)</li>\n<li>配置默认网卡：vi /etc/sysconfig/network 添加如下配置：<br> GATEWAYDEV=enp62s0f2<br> GATEWAY=192.168.1.1</li>\n<li>修改相应的配置文件 vi /etc/sysconfig/network-scripts/ifcfg-enp62s0f2(网卡名称)<br>不启用DHCP：BOOTPROTO=none<br>开机联网：ONBOOT=yes<br>本机静态IP：IPADDR=192.168.1.200 (内网随机一个)<br>掩码：PREIFIX=24</li>\n<li>启用网卡: nmcli con up enp62s0f2(网卡名称)；</li>\n<li>重启网络: service network restart;</li>\n<li>测试是否能联网 ping 192.168.1.8， ping 223.5.5.5(外网测试，比如用阿里IP)</li>\n<li>配置实际网关  vi /etc/sysconfig/network</li>\n<li>按照实际参数修改 IPPADDR, PREFIX vi /etc/sysconfig/network-scripts/ifcfg-网卡名称；</li>\n<li>重启网络: service network restart;</li>\n<li>检验是否正确<br>cat /etc/sysconfig/network<br>cat /etc/sysconfig/network-scripts/ifcfg-网卡名称<br>ip a</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>📶 CentOS配置静态IP的流程整理如下：</p>","more":"<ol>\n<li>ip a 命令确定LAN1接口对应的网卡型号，很可能是 enp62s0f2(双核机型), eno1(单核机型)</li>\n<li>配置默认网卡：vi /etc/sysconfig/network 添加如下配置：<br> GATEWAYDEV=enp62s0f2<br> GATEWAY=192.168.1.1</li>\n<li>修改相应的配置文件 vi /etc/sysconfig/network-scripts/ifcfg-enp62s0f2(网卡名称)<br>不启用DHCP：BOOTPROTO=none<br>开机联网：ONBOOT=yes<br>本机静态IP：IPADDR=192.168.1.200 (内网随机一个)<br>掩码：PREIFIX=24</li>\n<li>启用网卡: nmcli con up enp62s0f2(网卡名称)；</li>\n<li>重启网络: service network restart;</li>\n<li>测试是否能联网 ping 192.168.1.8， ping 223.5.5.5(外网测试，比如用阿里IP)</li>\n<li>配置实际网关  vi /etc/sysconfig/network</li>\n<li>按照实际参数修改 IPPADDR, PREFIX vi /etc/sysconfig/network-scripts/ifcfg-网卡名称；</li>\n<li>重启网络: service network restart;</li>\n<li>检验是否正确<br>cat /etc/sysconfig/network<br>cat /etc/sysconfig/network-scripts/ifcfg-网卡名称<br>ip a</li>\n</ol>"},{"title":"快捷键总结之vscode篇","date":"2022-01-01T16:00:00.000Z","_content":"\n🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，这是第三篇，针对vscode的快捷键。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>基本快捷键</font>\n- Command-X：剪切\n- Command-C：复制\n- Command-V：粘贴\n- Option-Up：向上移动行\n- Option-Down：向下移动行\n- Command-Enter：下一行插入\n- Command-Shift-Enter：上一行插入\n- Command-Shift-\\：跳转到匹配的括号\n- Command-Up：跳转至文件开头\n- Command-Down：跳转至文件结尾\n- Command-/：添加、移除行注释\n- Command-F：查找\n- Command-G：查找下一个\n- Command-Shift-G：查找上一个\n- Ctrl-G：跳转至某行\n\n> 计15个\n\n### <font color=#11d17b>## </font><font face=黑体>编辑器快捷键</font>\n- Command-P：跳转到某个文件\n- Ctrl-W：选择一个窗口\n- Command-N：新建文件\n- Command-O：打开文件\n- Command-S：保存文件\n- Command-Shift-S：另存为\n- Command-W：关闭\n- Ctrl-Tab：打开下一个\n- Ctrl-Shift-Tab：打开上一个\n- Command-+：放大\n- Command--：缩小\n- Command-B：显示、隐藏侧边栏\n- Command-\\：编辑器分屏\n- Command-1/2/3：切换到第一/二/三分组\n- fn-Ctrl-~：打开终端\n- Command-Shift-T：重新打开被关闭的编辑器(和浏览器一样)\n\n> 计15个\n\n### <font color=#11d17b>## </font><font face=黑体>多光标与选择快捷键</font>\n- Option-Click：插入多个光标\n- Command-Option-Up：向上插入光标\n- Command-Option-Down：向下插入光标\n- Command-U：撤销上一个光标操作\n- Option-Shift-I：在所选多行的行尾插入光标\n\n> 计5个\n","source":"_posts/keyboard_快捷键总结之vscode篇.md","raw":"---\ntitle: 快捷键总结之vscode篇\ndate: 2022-01-02\ncategories:\n- skill\ntags:\n- skill\n- keyboard\n- vscode\n---\n\n🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，这是第三篇，针对vscode的快捷键。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>基本快捷键</font>\n- Command-X：剪切\n- Command-C：复制\n- Command-V：粘贴\n- Option-Up：向上移动行\n- Option-Down：向下移动行\n- Command-Enter：下一行插入\n- Command-Shift-Enter：上一行插入\n- Command-Shift-\\：跳转到匹配的括号\n- Command-Up：跳转至文件开头\n- Command-Down：跳转至文件结尾\n- Command-/：添加、移除行注释\n- Command-F：查找\n- Command-G：查找下一个\n- Command-Shift-G：查找上一个\n- Ctrl-G：跳转至某行\n\n> 计15个\n\n### <font color=#11d17b>## </font><font face=黑体>编辑器快捷键</font>\n- Command-P：跳转到某个文件\n- Ctrl-W：选择一个窗口\n- Command-N：新建文件\n- Command-O：打开文件\n- Command-S：保存文件\n- Command-Shift-S：另存为\n- Command-W：关闭\n- Ctrl-Tab：打开下一个\n- Ctrl-Shift-Tab：打开上一个\n- Command-+：放大\n- Command--：缩小\n- Command-B：显示、隐藏侧边栏\n- Command-\\：编辑器分屏\n- Command-1/2/3：切换到第一/二/三分组\n- fn-Ctrl-~：打开终端\n- Command-Shift-T：重新打开被关闭的编辑器(和浏览器一样)\n\n> 计15个\n\n### <font color=#11d17b>## </font><font face=黑体>多光标与选择快捷键</font>\n- Option-Click：插入多个光标\n- Command-Option-Up：向上插入光标\n- Command-Option-Down：向下插入光标\n- Command-U：撤销上一个光标操作\n- Option-Shift-I：在所选多行的行尾插入光标\n\n> 计5个\n","slug":"keyboard_快捷键总结之vscode篇","published":1,"updated":"2022-01-04T13:30:40.321Z","_id":"ckxy549wf002c0w8nhfox60g5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，这是第三篇，针对vscode的快捷键。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"基本快捷键\"><a href=\"#基本快捷键\" class=\"headerlink\" title=\"## 基本快捷键\"></a><font color=#11d17b>## </font><font face=黑体>基本快捷键</font></h3><ul>\n<li>Command-X：剪切</li>\n<li>Command-C：复制</li>\n<li>Command-V：粘贴</li>\n<li>Option-Up：向上移动行</li>\n<li>Option-Down：向下移动行</li>\n<li>Command-Enter：下一行插入</li>\n<li>Command-Shift-Enter：上一行插入</li>\n<li>Command-Shift-\\：跳转到匹配的括号</li>\n<li>Command-Up：跳转至文件开头</li>\n<li>Command-Down：跳转至文件结尾</li>\n<li>Command-/：添加、移除行注释</li>\n<li>Command-F：查找</li>\n<li>Command-G：查找下一个</li>\n<li>Command-Shift-G：查找上一个</li>\n<li>Ctrl-G：跳转至某行</li>\n</ul>\n<blockquote>\n<p>计15个</p>\n</blockquote>\n<h3 id=\"编辑器快捷键\"><a href=\"#编辑器快捷键\" class=\"headerlink\" title=\"## 编辑器快捷键\"></a><font color=#11d17b>## </font><font face=黑体>编辑器快捷键</font></h3><ul>\n<li>Command-P：跳转到某个文件</li>\n<li>Ctrl-W：选择一个窗口</li>\n<li>Command-N：新建文件</li>\n<li>Command-O：打开文件</li>\n<li>Command-S：保存文件</li>\n<li>Command-Shift-S：另存为</li>\n<li>Command-W：关闭</li>\n<li>Ctrl-Tab：打开下一个</li>\n<li>Ctrl-Shift-Tab：打开上一个</li>\n<li>Command-+：放大</li>\n<li>Command–：缩小</li>\n<li>Command-B：显示、隐藏侧边栏</li>\n<li>Command-\\：编辑器分屏</li>\n<li>Command-1/2/3：切换到第一/二/三分组</li>\n<li>fn-Ctrl-~：打开终端</li>\n<li>Command-Shift-T：重新打开被关闭的编辑器(和浏览器一样)</li>\n</ul>\n<blockquote>\n<p>计15个</p>\n</blockquote>\n<h3 id=\"多光标与选择快捷键\"><a href=\"#多光标与选择快捷键\" class=\"headerlink\" title=\"## 多光标与选择快捷键\"></a><font color=#11d17b>## </font><font face=黑体>多光标与选择快捷键</font></h3><ul>\n<li>Option-Click：插入多个光标</li>\n<li>Command-Option-Up：向上插入光标</li>\n<li>Command-Option-Down：向下插入光标</li>\n<li>Command-U：撤销上一个光标操作</li>\n<li>Option-Shift-I：在所选多行的行尾插入光标</li>\n</ul>\n<blockquote>\n<p>计5个</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，这是第三篇，针对vscode的快捷键。</p>","more":"<h3 id=\"基本快捷键\"><a href=\"#基本快捷键\" class=\"headerlink\" title=\"## 基本快捷键\"></a><font color=#11d17b>## </font><font face=黑体>基本快捷键</font></h3><ul>\n<li>Command-X：剪切</li>\n<li>Command-C：复制</li>\n<li>Command-V：粘贴</li>\n<li>Option-Up：向上移动行</li>\n<li>Option-Down：向下移动行</li>\n<li>Command-Enter：下一行插入</li>\n<li>Command-Shift-Enter：上一行插入</li>\n<li>Command-Shift-\\：跳转到匹配的括号</li>\n<li>Command-Up：跳转至文件开头</li>\n<li>Command-Down：跳转至文件结尾</li>\n<li>Command-/：添加、移除行注释</li>\n<li>Command-F：查找</li>\n<li>Command-G：查找下一个</li>\n<li>Command-Shift-G：查找上一个</li>\n<li>Ctrl-G：跳转至某行</li>\n</ul>\n<blockquote>\n<p>计15个</p>\n</blockquote>\n<h3 id=\"编辑器快捷键\"><a href=\"#编辑器快捷键\" class=\"headerlink\" title=\"## 编辑器快捷键\"></a><font color=#11d17b>## </font><font face=黑体>编辑器快捷键</font></h3><ul>\n<li>Command-P：跳转到某个文件</li>\n<li>Ctrl-W：选择一个窗口</li>\n<li>Command-N：新建文件</li>\n<li>Command-O：打开文件</li>\n<li>Command-S：保存文件</li>\n<li>Command-Shift-S：另存为</li>\n<li>Command-W：关闭</li>\n<li>Ctrl-Tab：打开下一个</li>\n<li>Ctrl-Shift-Tab：打开上一个</li>\n<li>Command-+：放大</li>\n<li>Command–：缩小</li>\n<li>Command-B：显示、隐藏侧边栏</li>\n<li>Command-\\：编辑器分屏</li>\n<li>Command-1/2/3：切换到第一/二/三分组</li>\n<li>fn-Ctrl-~：打开终端</li>\n<li>Command-Shift-T：重新打开被关闭的编辑器(和浏览器一样)</li>\n</ul>\n<blockquote>\n<p>计15个</p>\n</blockquote>\n<h3 id=\"多光标与选择快捷键\"><a href=\"#多光标与选择快捷键\" class=\"headerlink\" title=\"## 多光标与选择快捷键\"></a><font color=#11d17b>## </font><font face=黑体>多光标与选择快捷键</font></h3><ul>\n<li>Option-Click：插入多个光标</li>\n<li>Command-Option-Up：向上插入光标</li>\n<li>Command-Option-Down：向下插入光标</li>\n<li>Command-U：撤销上一个光标操作</li>\n<li>Option-Shift-I：在所选多行的行尾插入光标</li>\n</ul>\n<blockquote>\n<p>计5个</p>\n</blockquote>"},{"title":"进程、线程和协程对比","date":"2021-11-10T16:00:00.000Z","_content":"\n🖥️ 计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度，资源的分配和管理，统领整个计算机硬件；应用程序则是具有某种功能的程序，程序是运行在操作系统上的。\n\n下面我们来简单对比一下有关应用程序的三个重要的概念：进程、线程和协程。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>进程</font>\n\n进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。\n\n### <font color=#11d17b>## </font><font face=黑体>线程</font>\n\n随着计算机的发展，进程之间的切换开销比较大，于是就有了线程。线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元。\n\n> 进程和线程对比：\n1. 进程是操作系统分配资源的最小单位，而线程是程序执行的最小单位\n2. 一个进程是由一个或者多个线程组成，线程是一个进程中代码的不同执行路线\n3. 进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某些进程内的线程在其他进程不可见\n4. 上下文切换：线程上下文切换比进程上下文切换要快得多\n\n> 线程和协程对比：\n1. 协程是轻量级的线程，由程序员自己来调度，因此减少了上下文切换，提高了效率\n2. 线程默认Stack大小是1M，而协程接近1K。因此可以在相同的内存中开启更多的协程\n\n> 参考文章：[点击这里](https://juejin.cn/post/6904821235801128967#heading-24)\n\n\n","source":"_posts/computer_进程线程协程对比.md","raw":"---\ntitle: 进程、线程和协程对比\ndate: 2021-11-11\ncategories:\n- computer\ntags:\n- computer\n---\n\n🖥️ 计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度，资源的分配和管理，统领整个计算机硬件；应用程序则是具有某种功能的程序，程序是运行在操作系统上的。\n\n下面我们来简单对比一下有关应用程序的三个重要的概念：进程、线程和协程。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>进程</font>\n\n进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。\n\n### <font color=#11d17b>## </font><font face=黑体>线程</font>\n\n随着计算机的发展，进程之间的切换开销比较大，于是就有了线程。线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元。\n\n> 进程和线程对比：\n1. 进程是操作系统分配资源的最小单位，而线程是程序执行的最小单位\n2. 一个进程是由一个或者多个线程组成，线程是一个进程中代码的不同执行路线\n3. 进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某些进程内的线程在其他进程不可见\n4. 上下文切换：线程上下文切换比进程上下文切换要快得多\n\n> 线程和协程对比：\n1. 协程是轻量级的线程，由程序员自己来调度，因此减少了上下文切换，提高了效率\n2. 线程默认Stack大小是1M，而协程接近1K。因此可以在相同的内存中开启更多的协程\n\n> 参考文章：[点击这里](https://juejin.cn/post/6904821235801128967#heading-24)\n\n\n","slug":"computer_进程线程协程对比","published":1,"updated":"2021-11-18T15:06:08.662Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wg002h0w8n61bhddz7","content":"<p>🖥️ 计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度，资源的分配和管理，统领整个计算机硬件；应用程序则是具有某种功能的程序，程序是运行在操作系统上的。</p>\n<p>下面我们来简单对比一下有关应用程序的三个重要的概念：进程、线程和协程。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"## 进程\"></a><font color=#11d17b>## </font><font face=黑体>进程</font></h3><p>进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"## 线程\"></a><font color=#11d17b>## </font><font face=黑体>线程</font></h3><p>随着计算机的发展，进程之间的切换开销比较大，于是就有了线程。线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元。</p>\n<blockquote>\n<p>进程和线程对比：</p>\n</blockquote>\n<ol>\n<li>进程是操作系统分配资源的最小单位，而线程是程序执行的最小单位</li>\n<li>一个进程是由一个或者多个线程组成，线程是一个进程中代码的不同执行路线</li>\n<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某些进程内的线程在其他进程不可见</li>\n<li>上下文切换：线程上下文切换比进程上下文切换要快得多</li>\n</ol>\n<blockquote>\n<p>线程和协程对比：</p>\n</blockquote>\n<ol>\n<li>协程是轻量级的线程，由程序员自己来调度，因此减少了上下文切换，提高了效率</li>\n<li>线程默认Stack大小是1M，而协程接近1K。因此可以在相同的内存中开启更多的协程</li>\n</ol>\n<blockquote>\n<p>参考文章：<a href=\"https://juejin.cn/post/6904821235801128967#heading-24\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>🖥️ 计算机的核心是CPU，它承担了所有的计算任务；而操作系统是计算机的管理者，它负责任务的调度，资源的分配和管理，统领整个计算机硬件；应用程序则是具有某种功能的程序，程序是运行在操作系统上的。</p>\n<p>下面我们来简单对比一下有关应用程序的三个重要的概念：进程、线程和协程。</p>","more":"<h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"## 进程\"></a><font color=#11d17b>## </font><font face=黑体>进程</font></h3><p>进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。</p>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"## 线程\"></a><font color=#11d17b>## </font><font face=黑体>线程</font></h3><p>随着计算机的发展，进程之间的切换开销比较大，于是就有了线程。线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元。</p>\n<blockquote>\n<p>进程和线程对比：</p>\n</blockquote>\n<ol>\n<li>进程是操作系统分配资源的最小单位，而线程是程序执行的最小单位</li>\n<li>一个进程是由一个或者多个线程组成，线程是一个进程中代码的不同执行路线</li>\n<li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间(包括代码段、数据集、堆等)及一些进程级的资源(如打开文件和信号)，某些进程内的线程在其他进程不可见</li>\n<li>上下文切换：线程上下文切换比进程上下文切换要快得多</li>\n</ol>\n<blockquote>\n<p>线程和协程对比：</p>\n</blockquote>\n<ol>\n<li>协程是轻量级的线程，由程序员自己来调度，因此减少了上下文切换，提高了效率</li>\n<li>线程默认Stack大小是1M，而协程接近1K。因此可以在相同的内存中开启更多的协程</li>\n</ol>\n<blockquote>\n<p>参考文章：<a href=\"https://juejin.cn/post/6904821235801128967#heading-24\" target=\"_blank\" rel=\"noopener\">点击这里</a></p>\n</blockquote>"},{"title":"TCP和UDP对比","date":"2021-11-10T16:00:00.000Z","_content":"\n🖥️ TCP（Transmission Control Protocol，传输控制协议）和UDP（User Data Protocol ,用户数据协议）都属于TCP/IP协议簇。两者经常用来进行比较，也是面试的高频题。\n\n下面我们来整理对比下：\n\n<!--more-->\n\n相同点：都属于tcp/ip协议的传输层。\n\n1. 连接性：TCP是面向连接的协议，在收发数据前必须和对方建立可靠的连接，建立连接的3次握手、断开连接的4次挥手，为数据传输打下可靠基础。UDP是一个面向无连接的协议，数据传输前，源端和终端不建立连接，发送端尽可能快的将数据扔到网络上，接收端从消息队列中读取消息段 (只要在应用程序获取的数据前面加上UDP头部，然后交给IP进行发送)。\n\n2. 可靠性：TCP提供可靠交付的服务，传输过程中采用许多方法保证在连接上提供可靠的传输服务，如编号与确认、流量控制、计时器等，确保数据无差错，不丢失，不重复且按序到达。UDP使用尽可能最大努力交付，但不保证可靠交付。\n\n3. 首部开销：TCP报文首部有20个字节，额外开销大。UDP报文首部只有8个字节，标题短，开销小。\n\n4. 传输方式：TCP协议面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用\n\n5. 连接对象个数：UDP支持一对一、一对多、多对一和多对多的交互通信。TCP只能一对一通信。\n\n6. 使用场景：TCP适合对传输效率要求低，但准确率要求高的应用场景，比如万维网(HTTP)、文件传输(FTP)、电子邮件(SMTP)等。UDP适用于对传输效率要求高，但准确率要求低的应用场景，比如域名转换(DNS)、远程文件服务器(NFS) IP电话、视频会议、直播等。\n","source":"_posts/computer_TCP和UDP对比.md","raw":"---\ntitle: TCP和UDP对比\ndate: 2021-11-11\ncategories:\n- computer\ntags:\n- computer\n- tcp\n- udp\n---\n\n🖥️ TCP（Transmission Control Protocol，传输控制协议）和UDP（User Data Protocol ,用户数据协议）都属于TCP/IP协议簇。两者经常用来进行比较，也是面试的高频题。\n\n下面我们来整理对比下：\n\n<!--more-->\n\n相同点：都属于tcp/ip协议的传输层。\n\n1. 连接性：TCP是面向连接的协议，在收发数据前必须和对方建立可靠的连接，建立连接的3次握手、断开连接的4次挥手，为数据传输打下可靠基础。UDP是一个面向无连接的协议，数据传输前，源端和终端不建立连接，发送端尽可能快的将数据扔到网络上，接收端从消息队列中读取消息段 (只要在应用程序获取的数据前面加上UDP头部，然后交给IP进行发送)。\n\n2. 可靠性：TCP提供可靠交付的服务，传输过程中采用许多方法保证在连接上提供可靠的传输服务，如编号与确认、流量控制、计时器等，确保数据无差错，不丢失，不重复且按序到达。UDP使用尽可能最大努力交付，但不保证可靠交付。\n\n3. 首部开销：TCP报文首部有20个字节，额外开销大。UDP报文首部只有8个字节，标题短，开销小。\n\n4. 传输方式：TCP协议面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用\n\n5. 连接对象个数：UDP支持一对一、一对多、多对一和多对多的交互通信。TCP只能一对一通信。\n\n6. 使用场景：TCP适合对传输效率要求低，但准确率要求高的应用场景，比如万维网(HTTP)、文件传输(FTP)、电子邮件(SMTP)等。UDP适用于对传输效率要求高，但准确率要求低的应用场景，比如域名转换(DNS)、远程文件服务器(NFS) IP电话、视频会议、直播等。\n","slug":"computer_TCP和UDP对比","published":1,"updated":"2021-11-30T00:54:59.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wh002k0w8nhbgt79dp","content":"<p>🖥️ TCP（Transmission Control Protocol，传输控制协议）和UDP（User Data Protocol ,用户数据协议）都属于TCP/IP协议簇。两者经常用来进行比较，也是面试的高频题。</p>\n<p>下面我们来整理对比下：</p>\n<a id=\"more\"></a>\n\n<p>相同点：都属于tcp/ip协议的传输层。</p>\n<ol>\n<li><p>连接性：TCP是面向连接的协议，在收发数据前必须和对方建立可靠的连接，建立连接的3次握手、断开连接的4次挥手，为数据传输打下可靠基础。UDP是一个面向无连接的协议，数据传输前，源端和终端不建立连接，发送端尽可能快的将数据扔到网络上，接收端从消息队列中读取消息段 (只要在应用程序获取的数据前面加上UDP头部，然后交给IP进行发送)。</p>\n</li>\n<li><p>可靠性：TCP提供可靠交付的服务，传输过程中采用许多方法保证在连接上提供可靠的传输服务，如编号与确认、流量控制、计时器等，确保数据无差错，不丢失，不重复且按序到达。UDP使用尽可能最大努力交付，但不保证可靠交付。</p>\n</li>\n<li><p>首部开销：TCP报文首部有20个字节，额外开销大。UDP报文首部只有8个字节，标题短，开销小。</p>\n</li>\n<li><p>传输方式：TCP协议面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用</p>\n</li>\n<li><p>连接对象个数：UDP支持一对一、一对多、多对一和多对多的交互通信。TCP只能一对一通信。</p>\n</li>\n<li><p>使用场景：TCP适合对传输效率要求低，但准确率要求高的应用场景，比如万维网(HTTP)、文件传输(FTP)、电子邮件(SMTP)等。UDP适用于对传输效率要求高，但准确率要求低的应用场景，比如域名转换(DNS)、远程文件服务器(NFS) IP电话、视频会议、直播等。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>🖥️ TCP（Transmission Control Protocol，传输控制协议）和UDP（User Data Protocol ,用户数据协议）都属于TCP/IP协议簇。两者经常用来进行比较，也是面试的高频题。</p>\n<p>下面我们来整理对比下：</p>","more":"<p>相同点：都属于tcp/ip协议的传输层。</p>\n<ol>\n<li><p>连接性：TCP是面向连接的协议，在收发数据前必须和对方建立可靠的连接，建立连接的3次握手、断开连接的4次挥手，为数据传输打下可靠基础。UDP是一个面向无连接的协议，数据传输前，源端和终端不建立连接，发送端尽可能快的将数据扔到网络上，接收端从消息队列中读取消息段 (只要在应用程序获取的数据前面加上UDP头部，然后交给IP进行发送)。</p>\n</li>\n<li><p>可靠性：TCP提供可靠交付的服务，传输过程中采用许多方法保证在连接上提供可靠的传输服务，如编号与确认、流量控制、计时器等，确保数据无差错，不丢失，不重复且按序到达。UDP使用尽可能最大努力交付，但不保证可靠交付。</p>\n</li>\n<li><p>首部开销：TCP报文首部有20个字节，额外开销大。UDP报文首部只有8个字节，标题短，开销小。</p>\n</li>\n<li><p>传输方式：TCP协议面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用</p>\n</li>\n<li><p>连接对象个数：UDP支持一对一、一对多、多对一和多对多的交互通信。TCP只能一对一通信。</p>\n</li>\n<li><p>使用场景：TCP适合对传输效率要求低，但准确率要求高的应用场景，比如万维网(HTTP)、文件传输(FTP)、电子邮件(SMTP)等。UDP适用于对传输效率要求高，但准确率要求低的应用场景，比如域名转换(DNS)、远程文件服务器(NFS) IP电话、视频会议、直播等。</p>\n</li>\n</ol>"},{"title":"快捷键总结之浏览器篇","date":"2021-12-28T16:00:00.000Z","_content":"\n🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，这是第二篇，针对Google浏览器的快捷键。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>标签页和窗口快捷键</font>\n- Command-N：打开新窗口\n- Command-Shift-W：关闭当前窗口\n- Command-T：打开新标签页\n- Command-W：关闭当前标签页\n- Command-Shift-T：重新打开上次关闭的标签页\n- Command-Shift-N：在隐身模式下打开新窗口\n- Command-1~8：跳转到指定的标签页\n- Command-9：跳转到最后一个标签页\n- Command-O：在 Chrome 浏览器中打开计算机中的文件\n- Command-Shift-点击链接：在新标签页中打开链接并切换到刚打开的标签页\n- Command-M：最小化窗口\n- Command-H：隐藏 Chrome 浏览器\n\n> 计10个\n\n### <font color=#11d17b>## </font><font face=黑体>网页快捷键</font>\n- Command-L：凸显地址栏\n- Command-S：保存当前网页\n- Command-R：重新载入当前网页\n- Command-Option-I：打开“开发人员工具”\n- F12：打开“开发人员工具”\n- Command-Y：在新标签页中显示浏览历史记录\n- Command-D：将当前网页保存为书签\n- Command-Shift-Delete：打开“清除浏览数据”对话框\n- 空格键：向下滚动网页\n\n> 计9个","source":"_posts/keyboard_快捷键总结之浏览器篇.md","raw":"---\ntitle: 快捷键总结之浏览器篇\ndate: 2021-12-29\ncategories:\n- skill\ntags:\n- skill\n- keyboard\n- Google\n---\n\n🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，这是第二篇，针对Google浏览器的快捷键。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>标签页和窗口快捷键</font>\n- Command-N：打开新窗口\n- Command-Shift-W：关闭当前窗口\n- Command-T：打开新标签页\n- Command-W：关闭当前标签页\n- Command-Shift-T：重新打开上次关闭的标签页\n- Command-Shift-N：在隐身模式下打开新窗口\n- Command-1~8：跳转到指定的标签页\n- Command-9：跳转到最后一个标签页\n- Command-O：在 Chrome 浏览器中打开计算机中的文件\n- Command-Shift-点击链接：在新标签页中打开链接并切换到刚打开的标签页\n- Command-M：最小化窗口\n- Command-H：隐藏 Chrome 浏览器\n\n> 计10个\n\n### <font color=#11d17b>## </font><font face=黑体>网页快捷键</font>\n- Command-L：凸显地址栏\n- Command-S：保存当前网页\n- Command-R：重新载入当前网页\n- Command-Option-I：打开“开发人员工具”\n- F12：打开“开发人员工具”\n- Command-Y：在新标签页中显示浏览历史记录\n- Command-D：将当前网页保存为书签\n- Command-Shift-Delete：打开“清除浏览数据”对话框\n- 空格键：向下滚动网页\n\n> 计9个","slug":"keyboard_快捷键总结之浏览器篇","published":1,"updated":"2022-01-03T04:18:57.360Z","_id":"ckxy549wi002n0w8nfycceynz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，这是第二篇，针对Google浏览器的快捷键。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"标签页和窗口快捷键\"><a href=\"#标签页和窗口快捷键\" class=\"headerlink\" title=\"## 标签页和窗口快捷键\"></a><font color=#11d17b>## </font><font face=黑体>标签页和窗口快捷键</font></h3><ul>\n<li>Command-N：打开新窗口</li>\n<li>Command-Shift-W：关闭当前窗口</li>\n<li>Command-T：打开新标签页</li>\n<li>Command-W：关闭当前标签页</li>\n<li>Command-Shift-T：重新打开上次关闭的标签页</li>\n<li>Command-Shift-N：在隐身模式下打开新窗口</li>\n<li>Command-1~8：跳转到指定的标签页</li>\n<li>Command-9：跳转到最后一个标签页</li>\n<li>Command-O：在 Chrome 浏览器中打开计算机中的文件</li>\n<li>Command-Shift-点击链接：在新标签页中打开链接并切换到刚打开的标签页</li>\n<li>Command-M：最小化窗口</li>\n<li>Command-H：隐藏 Chrome 浏览器</li>\n</ul>\n<blockquote>\n<p>计10个</p>\n</blockquote>\n<h3 id=\"网页快捷键\"><a href=\"#网页快捷键\" class=\"headerlink\" title=\"## 网页快捷键\"></a><font color=#11d17b>## </font><font face=黑体>网页快捷键</font></h3><ul>\n<li>Command-L：凸显地址栏</li>\n<li>Command-S：保存当前网页</li>\n<li>Command-R：重新载入当前网页</li>\n<li>Command-Option-I：打开“开发人员工具”</li>\n<li>F12：打开“开发人员工具”</li>\n<li>Command-Y：在新标签页中显示浏览历史记录</li>\n<li>Command-D：将当前网页保存为书签</li>\n<li>Command-Shift-Delete：打开“清除浏览数据”对话框</li>\n<li>空格键：向下滚动网页</li>\n</ul>\n<blockquote>\n<p>计9个</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，这是第二篇，针对Google浏览器的快捷键。</p>","more":"<h3 id=\"标签页和窗口快捷键\"><a href=\"#标签页和窗口快捷键\" class=\"headerlink\" title=\"## 标签页和窗口快捷键\"></a><font color=#11d17b>## </font><font face=黑体>标签页和窗口快捷键</font></h3><ul>\n<li>Command-N：打开新窗口</li>\n<li>Command-Shift-W：关闭当前窗口</li>\n<li>Command-T：打开新标签页</li>\n<li>Command-W：关闭当前标签页</li>\n<li>Command-Shift-T：重新打开上次关闭的标签页</li>\n<li>Command-Shift-N：在隐身模式下打开新窗口</li>\n<li>Command-1~8：跳转到指定的标签页</li>\n<li>Command-9：跳转到最后一个标签页</li>\n<li>Command-O：在 Chrome 浏览器中打开计算机中的文件</li>\n<li>Command-Shift-点击链接：在新标签页中打开链接并切换到刚打开的标签页</li>\n<li>Command-M：最小化窗口</li>\n<li>Command-H：隐藏 Chrome 浏览器</li>\n</ul>\n<blockquote>\n<p>计10个</p>\n</blockquote>\n<h3 id=\"网页快捷键\"><a href=\"#网页快捷键\" class=\"headerlink\" title=\"## 网页快捷键\"></a><font color=#11d17b>## </font><font face=黑体>网页快捷键</font></h3><ul>\n<li>Command-L：凸显地址栏</li>\n<li>Command-S：保存当前网页</li>\n<li>Command-R：重新载入当前网页</li>\n<li>Command-Option-I：打开“开发人员工具”</li>\n<li>F12：打开“开发人员工具”</li>\n<li>Command-Y：在新标签页中显示浏览历史记录</li>\n<li>Command-D：将当前网页保存为书签</li>\n<li>Command-Shift-Delete：打开“清除浏览数据”对话框</li>\n<li>空格键：向下滚动网页</li>\n</ul>\n<blockquote>\n<p>计9个</p>\n</blockquote>"},{"title":"快捷键总结之Mac常用篇","date":"2021-12-26T16:00:00.000Z","_content":"\n🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，下面仅针对Mac本，整理一些自己要掌握的快捷键，帮助自己不断提升办公效率。\n目标：脱离鼠标。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>剪切、拷贝、粘贴和其他常用快捷键</font>\n- Command-X：剪切\n- Command-C：拷贝\n- Command-V：粘贴\n- Command-Z：撤销上一个命令\n- Shift-Command-Z: 反向执行撤销命令\n- Command-A(all)：全选\n- Command-F(find)：查找\n- Command-Tab：切换App\n- Command-O(open)：打开\n- Command-P(print)：打印当前文稿\n- Command-S(store)：存储\n- Shift-Command-S：显示“存储为”对话框\n- Command-W(window)：关闭最前面的窗口\n- Shift-Command-W(window): 关闭应用的所有窗口\n- Option-Command-Esc：强制退出应用\n- Command-逗号 (,)：打开最前面的应用的偏好设置\n- Command-H(hide)：隐藏最前面的应用的窗口\n\n> 这个用Command-Tab可以替代了，不过当你摸鱼的时候，可以迅速隐藏当前窗口\n- Command-M(min)：将最前面的窗口最小化至“程序坞”\n\n> 使用频率很低的应用可以最小化，切换应用的时候不会打开它\n- Command-减号 (-)：缩小\n- Command-加号 (+)：放大\n\n> 计20个\n\n### <font color=#11d17b>## </font><font face=黑体>文稿快捷键</font>\n> 快速移动鼠标\n- Command–上箭头：将插入点移至文稿开头\n- Command–下箭头：将插入点移至文稿末尾\n- Command–左箭头：将插入点移至当前行的行首\n- Command–右箭头：将插入点移至当前行的行尾\n\n> 添加了Shift之后就有了选中功能：\n- Shift-Command–上箭头：选中插入点与文稿开头之间的文本\n- Shift-Command–下箭头：选中插入点与文稿末尾之间的文本\n- Shift-Command–左箭头：选中插入点与当前行行首之间的文本\n- Shift-Command–右箭头：选中插入点与当前行行尾之间的文本\n\n> 这里利用Shift的选中功能可以删除或者复制指定内容：\n- Shift–上箭头：将文本选择范围扩展到上一行相同水平位置的最近字符处\n- Shift–下箭头：将文本选择范围扩展到下一行相同水平位置的最近字符处\n- Shift–左箭头：将文本选择范围向左扩展一个字符\n- Shift–右箭头：将文本选择范围向右扩展一个字符\n\n> Option精确到以单词为单位去移动\n- Option–左箭头：将插入点移至上一字词的词首\n- Option–右箭头：将插入点移至下一字词的词尾\n- Option-Delete：删除插入点左边的字词(删除单词)\n\n> 计15个\n\n### <font color=#11d17b>## </font><font face=黑体>访达和系统快捷键</font>\n- Command-N(new)：打开一个新的“访达”窗口\n- Command-D(duplicate)：复制所选文件\n- Command-Delete：将所选项移到废纸篓\n- Shift-Command-Delete：清倒废纸篓\n- Control–下箭头：显示最前面的应用的所有窗口\n- return: 选中文件并return可以重命名\n\n> 访达只记住这几个就可以了，其他的用鼠标点击，减少记忆\n","source":"_posts/keyboard_快捷键总结之Mac常用篇.md","raw":"---\ntitle: 快捷键总结之Mac常用篇\ndate: 2021-12-27\ncategories:\n- skill\ntags:\n- skill\n- keyboard\n- Mac\n---\n\n🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，下面仅针对Mac本，整理一些自己要掌握的快捷键，帮助自己不断提升办公效率。\n目标：脱离鼠标。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>剪切、拷贝、粘贴和其他常用快捷键</font>\n- Command-X：剪切\n- Command-C：拷贝\n- Command-V：粘贴\n- Command-Z：撤销上一个命令\n- Shift-Command-Z: 反向执行撤销命令\n- Command-A(all)：全选\n- Command-F(find)：查找\n- Command-Tab：切换App\n- Command-O(open)：打开\n- Command-P(print)：打印当前文稿\n- Command-S(store)：存储\n- Shift-Command-S：显示“存储为”对话框\n- Command-W(window)：关闭最前面的窗口\n- Shift-Command-W(window): 关闭应用的所有窗口\n- Option-Command-Esc：强制退出应用\n- Command-逗号 (,)：打开最前面的应用的偏好设置\n- Command-H(hide)：隐藏最前面的应用的窗口\n\n> 这个用Command-Tab可以替代了，不过当你摸鱼的时候，可以迅速隐藏当前窗口\n- Command-M(min)：将最前面的窗口最小化至“程序坞”\n\n> 使用频率很低的应用可以最小化，切换应用的时候不会打开它\n- Command-减号 (-)：缩小\n- Command-加号 (+)：放大\n\n> 计20个\n\n### <font color=#11d17b>## </font><font face=黑体>文稿快捷键</font>\n> 快速移动鼠标\n- Command–上箭头：将插入点移至文稿开头\n- Command–下箭头：将插入点移至文稿末尾\n- Command–左箭头：将插入点移至当前行的行首\n- Command–右箭头：将插入点移至当前行的行尾\n\n> 添加了Shift之后就有了选中功能：\n- Shift-Command–上箭头：选中插入点与文稿开头之间的文本\n- Shift-Command–下箭头：选中插入点与文稿末尾之间的文本\n- Shift-Command–左箭头：选中插入点与当前行行首之间的文本\n- Shift-Command–右箭头：选中插入点与当前行行尾之间的文本\n\n> 这里利用Shift的选中功能可以删除或者复制指定内容：\n- Shift–上箭头：将文本选择范围扩展到上一行相同水平位置的最近字符处\n- Shift–下箭头：将文本选择范围扩展到下一行相同水平位置的最近字符处\n- Shift–左箭头：将文本选择范围向左扩展一个字符\n- Shift–右箭头：将文本选择范围向右扩展一个字符\n\n> Option精确到以单词为单位去移动\n- Option–左箭头：将插入点移至上一字词的词首\n- Option–右箭头：将插入点移至下一字词的词尾\n- Option-Delete：删除插入点左边的字词(删除单词)\n\n> 计15个\n\n### <font color=#11d17b>## </font><font face=黑体>访达和系统快捷键</font>\n- Command-N(new)：打开一个新的“访达”窗口\n- Command-D(duplicate)：复制所选文件\n- Command-Delete：将所选项移到废纸篓\n- Shift-Command-Delete：清倒废纸篓\n- Control–下箭头：显示最前面的应用的所有窗口\n- return: 选中文件并return可以重命名\n\n> 访达只记住这几个就可以了，其他的用鼠标点击，减少记忆\n","slug":"keyboard_快捷键总结之Mac常用篇","published":1,"updated":"2021-12-30T16:28:53.674Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wj002s0w8n7xtx4gev","content":"<p>🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，下面仅针对Mac本，整理一些自己要掌握的快捷键，帮助自己不断提升办公效率。<br>目标：脱离鼠标。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"剪切、拷贝、粘贴和其他常用快捷键\"><a href=\"#剪切、拷贝、粘贴和其他常用快捷键\" class=\"headerlink\" title=\"## 剪切、拷贝、粘贴和其他常用快捷键\"></a><font color=#11d17b>## </font><font face=黑体>剪切、拷贝、粘贴和其他常用快捷键</font></h3><ul>\n<li>Command-X：剪切</li>\n<li>Command-C：拷贝</li>\n<li>Command-V：粘贴</li>\n<li>Command-Z：撤销上一个命令</li>\n<li>Shift-Command-Z: 反向执行撤销命令</li>\n<li>Command-A(all)：全选</li>\n<li>Command-F(find)：查找</li>\n<li>Command-Tab：切换App</li>\n<li>Command-O(open)：打开</li>\n<li>Command-P(print)：打印当前文稿</li>\n<li>Command-S(store)：存储</li>\n<li>Shift-Command-S：显示“存储为”对话框</li>\n<li>Command-W(window)：关闭最前面的窗口</li>\n<li>Shift-Command-W(window): 关闭应用的所有窗口</li>\n<li>Option-Command-Esc：强制退出应用</li>\n<li>Command-逗号 (,)：打开最前面的应用的偏好设置</li>\n<li>Command-H(hide)：隐藏最前面的应用的窗口</li>\n</ul>\n<blockquote>\n<p>这个用Command-Tab可以替代了，不过当你摸鱼的时候，可以迅速隐藏当前窗口</p>\n</blockquote>\n<ul>\n<li>Command-M(min)：将最前面的窗口最小化至“程序坞”</li>\n</ul>\n<blockquote>\n<p>使用频率很低的应用可以最小化，切换应用的时候不会打开它</p>\n</blockquote>\n<ul>\n<li>Command-减号 (-)：缩小</li>\n<li>Command-加号 (+)：放大</li>\n</ul>\n<blockquote>\n<p>计20个</p>\n</blockquote>\n<h3 id=\"文稿快捷键\"><a href=\"#文稿快捷键\" class=\"headerlink\" title=\"## 文稿快捷键\"></a><font color=#11d17b>## </font><font face=黑体>文稿快捷键</font></h3><blockquote>\n<p>快速移动鼠标</p>\n</blockquote>\n<ul>\n<li>Command–上箭头：将插入点移至文稿开头</li>\n<li>Command–下箭头：将插入点移至文稿末尾</li>\n<li>Command–左箭头：将插入点移至当前行的行首</li>\n<li>Command–右箭头：将插入点移至当前行的行尾</li>\n</ul>\n<blockquote>\n<p>添加了Shift之后就有了选中功能：</p>\n</blockquote>\n<ul>\n<li>Shift-Command–上箭头：选中插入点与文稿开头之间的文本</li>\n<li>Shift-Command–下箭头：选中插入点与文稿末尾之间的文本</li>\n<li>Shift-Command–左箭头：选中插入点与当前行行首之间的文本</li>\n<li>Shift-Command–右箭头：选中插入点与当前行行尾之间的文本</li>\n</ul>\n<blockquote>\n<p>这里利用Shift的选中功能可以删除或者复制指定内容：</p>\n</blockquote>\n<ul>\n<li>Shift–上箭头：将文本选择范围扩展到上一行相同水平位置的最近字符处</li>\n<li>Shift–下箭头：将文本选择范围扩展到下一行相同水平位置的最近字符处</li>\n<li>Shift–左箭头：将文本选择范围向左扩展一个字符</li>\n<li>Shift–右箭头：将文本选择范围向右扩展一个字符</li>\n</ul>\n<blockquote>\n<p>Option精确到以单词为单位去移动</p>\n</blockquote>\n<ul>\n<li>Option–左箭头：将插入点移至上一字词的词首</li>\n<li>Option–右箭头：将插入点移至下一字词的词尾</li>\n<li>Option-Delete：删除插入点左边的字词(删除单词)</li>\n</ul>\n<blockquote>\n<p>计15个</p>\n</blockquote>\n<h3 id=\"访达和系统快捷键\"><a href=\"#访达和系统快捷键\" class=\"headerlink\" title=\"## 访达和系统快捷键\"></a><font color=#11d17b>## </font><font face=黑体>访达和系统快捷键</font></h3><ul>\n<li>Command-N(new)：打开一个新的“访达”窗口</li>\n<li>Command-D(duplicate)：复制所选文件</li>\n<li>Command-Delete：将所选项移到废纸篓</li>\n<li>Shift-Command-Delete：清倒废纸篓</li>\n<li>Control–下箭头：显示最前面的应用的所有窗口</li>\n<li>return: 选中文件并return可以重命名</li>\n</ul>\n<blockquote>\n<p>访达只记住这几个就可以了，其他的用鼠标点击，减少记忆</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>🎹 熟练使用键盘快捷键，是高效程序员必备的技能之一，下面仅针对Mac本，整理一些自己要掌握的快捷键，帮助自己不断提升办公效率。<br>目标：脱离鼠标。</p>","more":"<h3 id=\"剪切、拷贝、粘贴和其他常用快捷键\"><a href=\"#剪切、拷贝、粘贴和其他常用快捷键\" class=\"headerlink\" title=\"## 剪切、拷贝、粘贴和其他常用快捷键\"></a><font color=#11d17b>## </font><font face=黑体>剪切、拷贝、粘贴和其他常用快捷键</font></h3><ul>\n<li>Command-X：剪切</li>\n<li>Command-C：拷贝</li>\n<li>Command-V：粘贴</li>\n<li>Command-Z：撤销上一个命令</li>\n<li>Shift-Command-Z: 反向执行撤销命令</li>\n<li>Command-A(all)：全选</li>\n<li>Command-F(find)：查找</li>\n<li>Command-Tab：切换App</li>\n<li>Command-O(open)：打开</li>\n<li>Command-P(print)：打印当前文稿</li>\n<li>Command-S(store)：存储</li>\n<li>Shift-Command-S：显示“存储为”对话框</li>\n<li>Command-W(window)：关闭最前面的窗口</li>\n<li>Shift-Command-W(window): 关闭应用的所有窗口</li>\n<li>Option-Command-Esc：强制退出应用</li>\n<li>Command-逗号 (,)：打开最前面的应用的偏好设置</li>\n<li>Command-H(hide)：隐藏最前面的应用的窗口</li>\n</ul>\n<blockquote>\n<p>这个用Command-Tab可以替代了，不过当你摸鱼的时候，可以迅速隐藏当前窗口</p>\n</blockquote>\n<ul>\n<li>Command-M(min)：将最前面的窗口最小化至“程序坞”</li>\n</ul>\n<blockquote>\n<p>使用频率很低的应用可以最小化，切换应用的时候不会打开它</p>\n</blockquote>\n<ul>\n<li>Command-减号 (-)：缩小</li>\n<li>Command-加号 (+)：放大</li>\n</ul>\n<blockquote>\n<p>计20个</p>\n</blockquote>\n<h3 id=\"文稿快捷键\"><a href=\"#文稿快捷键\" class=\"headerlink\" title=\"## 文稿快捷键\"></a><font color=#11d17b>## </font><font face=黑体>文稿快捷键</font></h3><blockquote>\n<p>快速移动鼠标</p>\n</blockquote>\n<ul>\n<li>Command–上箭头：将插入点移至文稿开头</li>\n<li>Command–下箭头：将插入点移至文稿末尾</li>\n<li>Command–左箭头：将插入点移至当前行的行首</li>\n<li>Command–右箭头：将插入点移至当前行的行尾</li>\n</ul>\n<blockquote>\n<p>添加了Shift之后就有了选中功能：</p>\n</blockquote>\n<ul>\n<li>Shift-Command–上箭头：选中插入点与文稿开头之间的文本</li>\n<li>Shift-Command–下箭头：选中插入点与文稿末尾之间的文本</li>\n<li>Shift-Command–左箭头：选中插入点与当前行行首之间的文本</li>\n<li>Shift-Command–右箭头：选中插入点与当前行行尾之间的文本</li>\n</ul>\n<blockquote>\n<p>这里利用Shift的选中功能可以删除或者复制指定内容：</p>\n</blockquote>\n<ul>\n<li>Shift–上箭头：将文本选择范围扩展到上一行相同水平位置的最近字符处</li>\n<li>Shift–下箭头：将文本选择范围扩展到下一行相同水平位置的最近字符处</li>\n<li>Shift–左箭头：将文本选择范围向左扩展一个字符</li>\n<li>Shift–右箭头：将文本选择范围向右扩展一个字符</li>\n</ul>\n<blockquote>\n<p>Option精确到以单词为单位去移动</p>\n</blockquote>\n<ul>\n<li>Option–左箭头：将插入点移至上一字词的词首</li>\n<li>Option–右箭头：将插入点移至下一字词的词尾</li>\n<li>Option-Delete：删除插入点左边的字词(删除单词)</li>\n</ul>\n<blockquote>\n<p>计15个</p>\n</blockquote>\n<h3 id=\"访达和系统快捷键\"><a href=\"#访达和系统快捷键\" class=\"headerlink\" title=\"## 访达和系统快捷键\"></a><font color=#11d17b>## </font><font face=黑体>访达和系统快捷键</font></h3><ul>\n<li>Command-N(new)：打开一个新的“访达”窗口</li>\n<li>Command-D(duplicate)：复制所选文件</li>\n<li>Command-Delete：将所选项移到废纸篓</li>\n<li>Shift-Command-Delete：清倒废纸篓</li>\n<li>Control–下箭头：显示最前面的应用的所有窗口</li>\n<li>return: 选中文件并return可以重命名</li>\n</ul>\n<blockquote>\n<p>访达只记住这几个就可以了，其他的用鼠标点击，减少记忆</p>\n</blockquote>"},{"title":"缓存和数据库双写一致性问题","date":"2021-11-02T16:00:00.000Z","_content":"\n🎭 使用Redis缓存，就会遇到缓存和数据库双写一致性问题。\n\n根据是否接收写请求，我们可以把缓存分成读写缓存和只读缓存。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>读写缓存</font>\n\n读写缓存指读请求、写请求都会发到缓存处理。在使用读写缓存时，最新的数据是在Redis中，而Redis是内存数据库，一旦出现掉电或宕机，内存中的数据就会丢失。\n\n#### <font color=#11d17b>### </font><font face=黑体>一致性方案</font>\n\n写缓存时，也同步写数据库，缓存和数据库中的数据一致；在业务应用中采用事务机制，来保证缓存和数据库的更新具有原子性。\n\n### <font color=#11d17b>## </font><font face=黑体>只读缓存</font>\n\n只读缓存指读请求会先经过Redis，写操作不会经过Redis，但是会删除相应的数据。当再次读取数据时，会发生缓存缺失，然后从数据库中读取并写入缓存。\n\n#### <font color=#11d17b>### </font><font face=黑体>一致性方案</font>\n\n只读缓存比较复杂，用一张表进行总结：\n\n<img src=\"/images/只读缓存.png\" width=\"80%\" height=\"80%\">\n\n> 延迟双删：在线程 A 更新完数据库值以后，我们可以让它先 sleep 一小段时间，等线程 B、C 先从数据库读取数据，再把缺失的数据写入缓存，然后，线程 A 再进行删除。\n\n伪代码:\n\n``` java\nredis.delKey(X)\ndb.update(X)\nThread.sleep(N)\nredis.delKey(X)\n```\n\n#### <font color=#11d17b>### </font><font face=黑体>小结</font>\n\n对比可知，先更新数据库再删除缓存的方法较好。\n\n原因有二：\n- 如果先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力。\n- 延时双删中的等待时间不好估算。\n\n实际操作中，我们更新数据库时，先在 Redis 缓存客户端暂存并发读请求，等数据库更新完、缓存值删除后，再读取数据，就保证了数据的全部一致性。\n","source":"_posts/redis_缓存和数据库双写一致性问题.md","raw":"---\ntitle: 缓存和数据库双写一致性问题\ndate: 2021-11-03\ncategories:\n- redis\ntags:\n- redis\n- mysql\n---\n\n🎭 使用Redis缓存，就会遇到缓存和数据库双写一致性问题。\n\n根据是否接收写请求，我们可以把缓存分成读写缓存和只读缓存。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>读写缓存</font>\n\n读写缓存指读请求、写请求都会发到缓存处理。在使用读写缓存时，最新的数据是在Redis中，而Redis是内存数据库，一旦出现掉电或宕机，内存中的数据就会丢失。\n\n#### <font color=#11d17b>### </font><font face=黑体>一致性方案</font>\n\n写缓存时，也同步写数据库，缓存和数据库中的数据一致；在业务应用中采用事务机制，来保证缓存和数据库的更新具有原子性。\n\n### <font color=#11d17b>## </font><font face=黑体>只读缓存</font>\n\n只读缓存指读请求会先经过Redis，写操作不会经过Redis，但是会删除相应的数据。当再次读取数据时，会发生缓存缺失，然后从数据库中读取并写入缓存。\n\n#### <font color=#11d17b>### </font><font face=黑体>一致性方案</font>\n\n只读缓存比较复杂，用一张表进行总结：\n\n<img src=\"/images/只读缓存.png\" width=\"80%\" height=\"80%\">\n\n> 延迟双删：在线程 A 更新完数据库值以后，我们可以让它先 sleep 一小段时间，等线程 B、C 先从数据库读取数据，再把缺失的数据写入缓存，然后，线程 A 再进行删除。\n\n伪代码:\n\n``` java\nredis.delKey(X)\ndb.update(X)\nThread.sleep(N)\nredis.delKey(X)\n```\n\n#### <font color=#11d17b>### </font><font face=黑体>小结</font>\n\n对比可知，先更新数据库再删除缓存的方法较好。\n\n原因有二：\n- 如果先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力。\n- 延时双删中的等待时间不好估算。\n\n实际操作中，我们更新数据库时，先在 Redis 缓存客户端暂存并发读请求，等数据库更新完、缓存值删除后，再读取数据，就保证了数据的全部一致性。\n","slug":"redis_缓存和数据库双写一致性问题","published":1,"updated":"2021-11-11T13:22:47.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wk002v0w8nhu4i9yp3","content":"<p>🎭 使用Redis缓存，就会遇到缓存和数据库双写一致性问题。</p>\n<p>根据是否接收写请求，我们可以把缓存分成读写缓存和只读缓存。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"读写缓存\"><a href=\"#读写缓存\" class=\"headerlink\" title=\"## 读写缓存\"></a><font color=#11d17b>## </font><font face=黑体>读写缓存</font></h3><p>读写缓存指读请求、写请求都会发到缓存处理。在使用读写缓存时，最新的数据是在Redis中，而Redis是内存数据库，一旦出现掉电或宕机，内存中的数据就会丢失。</p>\n<h4 id=\"一致性方案\"><a href=\"#一致性方案\" class=\"headerlink\" title=\"### 一致性方案\"></a><font color=#11d17b>### </font><font face=黑体>一致性方案</font></h4><p>写缓存时，也同步写数据库，缓存和数据库中的数据一致；在业务应用中采用事务机制，来保证缓存和数据库的更新具有原子性。</p>\n<h3 id=\"只读缓存\"><a href=\"#只读缓存\" class=\"headerlink\" title=\"## 只读缓存\"></a><font color=#11d17b>## </font><font face=黑体>只读缓存</font></h3><p>只读缓存指读请求会先经过Redis，写操作不会经过Redis，但是会删除相应的数据。当再次读取数据时，会发生缓存缺失，然后从数据库中读取并写入缓存。</p>\n<h4 id=\"一致性方案-1\"><a href=\"#一致性方案-1\" class=\"headerlink\" title=\"### 一致性方案\"></a><font color=#11d17b>### </font><font face=黑体>一致性方案</font></h4><p>只读缓存比较复杂，用一张表进行总结：</p>\n<img src=\"/images/只读缓存.png\" width=\"80%\" height=\"80%\">\n\n<blockquote>\n<p>延迟双删：在线程 A 更新完数据库值以后，我们可以让它先 sleep 一小段时间，等线程 B、C 先从数据库读取数据，再把缺失的数据写入缓存，然后，线程 A 再进行删除。</p>\n</blockquote>\n<p>伪代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.delKey(X)</span><br><span class=\"line\">db.update(X)</span><br><span class=\"line\">Thread.sleep(N)</span><br><span class=\"line\">redis.delKey(X)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"### 小结\"></a><font color=#11d17b>### </font><font face=黑体>小结</font></h4><p>对比可知，先更新数据库再删除缓存的方法较好。</p>\n<p>原因有二：</p>\n<ul>\n<li>如果先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力。</li>\n<li>延时双删中的等待时间不好估算。</li>\n</ul>\n<p>实际操作中，我们更新数据库时，先在 Redis 缓存客户端暂存并发读请求，等数据库更新完、缓存值删除后，再读取数据，就保证了数据的全部一致性。</p>\n","site":{"data":{}},"excerpt":"<p>🎭 使用Redis缓存，就会遇到缓存和数据库双写一致性问题。</p>\n<p>根据是否接收写请求，我们可以把缓存分成读写缓存和只读缓存。</p>","more":"<h3 id=\"读写缓存\"><a href=\"#读写缓存\" class=\"headerlink\" title=\"## 读写缓存\"></a><font color=#11d17b>## </font><font face=黑体>读写缓存</font></h3><p>读写缓存指读请求、写请求都会发到缓存处理。在使用读写缓存时，最新的数据是在Redis中，而Redis是内存数据库，一旦出现掉电或宕机，内存中的数据就会丢失。</p>\n<h4 id=\"一致性方案\"><a href=\"#一致性方案\" class=\"headerlink\" title=\"### 一致性方案\"></a><font color=#11d17b>### </font><font face=黑体>一致性方案</font></h4><p>写缓存时，也同步写数据库，缓存和数据库中的数据一致；在业务应用中采用事务机制，来保证缓存和数据库的更新具有原子性。</p>\n<h3 id=\"只读缓存\"><a href=\"#只读缓存\" class=\"headerlink\" title=\"## 只读缓存\"></a><font color=#11d17b>## </font><font face=黑体>只读缓存</font></h3><p>只读缓存指读请求会先经过Redis，写操作不会经过Redis，但是会删除相应的数据。当再次读取数据时，会发生缓存缺失，然后从数据库中读取并写入缓存。</p>\n<h4 id=\"一致性方案-1\"><a href=\"#一致性方案-1\" class=\"headerlink\" title=\"### 一致性方案\"></a><font color=#11d17b>### </font><font face=黑体>一致性方案</font></h4><p>只读缓存比较复杂，用一张表进行总结：</p>\n<img src=\"/images/只读缓存.png\" width=\"80%\" height=\"80%\">\n\n<blockquote>\n<p>延迟双删：在线程 A 更新完数据库值以后，我们可以让它先 sleep 一小段时间，等线程 B、C 先从数据库读取数据，再把缺失的数据写入缓存，然后，线程 A 再进行删除。</p>\n</blockquote>\n<p>伪代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis.delKey(X)</span><br><span class=\"line\">db.update(X)</span><br><span class=\"line\">Thread.sleep(N)</span><br><span class=\"line\">redis.delKey(X)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"### 小结\"></a><font color=#11d17b>### </font><font face=黑体>小结</font></h4><p>对比可知，先更新数据库再删除缓存的方法较好。</p>\n<p>原因有二：</p>\n<ul>\n<li>如果先删除缓存值再更新数据库，有可能导致请求因缓存缺失而访问数据库，给数据库带来压力。</li>\n<li>延时双删中的等待时间不好估算。</li>\n</ul>\n<p>实际操作中，我们更新数据库时，先在 Redis 缓存客户端暂存并发读请求，等数据库更新完、缓存值删除后，再读取数据，就保证了数据的全部一致性。</p>"},{"title":"Redis缓存满了怎么办","date":"2021-11-13T16:00:00.000Z","_content":"\n🥡 在高并发场景，缓存被大量使用的情况下，不免会出现一种情况：缓存满了。\n下面我们谈一下这样的情况怎么处理。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>缓存容量</font>\n\n为了避免缓存过早被写满，我们需要根据应用数据访问特征和成本开销来综合考虑缓存容量的大小，一般会把缓存容量设置为总数据量的15%-30%。\n> 命令：CONFIG SET maxmemory 4gb (4gb是举个🌰)\n\n### <font color=#11d17b>## </font><font face=黑体>淘汰策略</font>\n\n缓存写满是不可避免的，Redis有自己的缓存淘汰策略，在4.0版本之前有6中淘汰策略：\n1. noeviction(默认策略): 若内存大小达到了maxmemory值，并不会淘汰数据，再有写请求时，Redis直接返回错误。\n2. allkeys-lru: 所有key都是使用LRU算法进行淘汰。\n3. volatile-lru: 所有设置了过期时间的key使用LRU算法进行淘汰。\n4. allkeys-random: 所有key使用随机淘汰的方式进行淘汰。\n5. volatile-random: 所有设置了过期时间的key使用随机淘汰的方式进行淘汰。\n6. volatile-ttl: 所有设置了过期时间的key根据过期时间进行淘汰，越早过期越早被淘汰。\n\n在4.0版本之后又增加了2种:\n\n7. allkeys-lfu: 所有key都是使用LFU算法进行淘汰。\n8. volatile-lfu: 所有设置了过期时间的key使用LFU算法进行淘汰。\n\n#### <font color=#11d17b>### </font><font face=黑体>LRU算法</font>\n\n我们先来讲讲LRU算法，LRU全称是 Least Recently Used, 即 按照最近最少使用的原则来筛选数据，最不常使用的数据会被筛选出来进行淘汰。\n\n底层原理：\nLRU用一个链表来维护数据，链表头部是MRU端，代表最最近常使用的数据；尾部是LRU端，代表最近不常用的数据。数据访问时根据移动链表来维护数据的最近常用性。\n\nLRU算法有两个问题：\n1. 用链表管理所有的缓存数据会带来额外的空间开销。\n2. 大量数据访问时，链表的移动操作很耗时，会降低Redis的缓存性能。\n\n在Redis中，对LRU算法做了简化:\n\nRedis默认会记录每个数据最近一次访问的时间戳(由对象来维护{lru:时间戳})，淘汰数据时第一次会随机筛选出N个数据，放到一个候选链表当中，把时间戳最小的淘汰。\n> N 用配置参数 maxmemory-samples 来设置\n\n当再次淘汰数据时，Redis会挑选时间戳小于候选链表中最小时间戳的数据放到候选链表中，然后把时间戳最小的淘汰出去。\n\n#### <font color=#11d17b>### </font><font face=黑体>LFU算法</font>\n\nRedis从4.0版本之后增加了LFU策略，是对LRU策略的进一步优化。全称 Least Frequently Used。\n\n核心思想:\n根据key最近被访问的频率进行淘汰。即，优先淘汰最近访问频率小的数据，如果频率相同，则淘汰最近最少使用的数据。\n\n底层原理：\n把lru策略中的lru字段(24bit)差分成两部分，前16bit为ldt值来表示数据访问的时间戳，后8bit为counter值，表示数据的访问次数。\n\n### <font color=#11d17b>## </font><font face=黑体>解决方案</font>\n1. 如果一部分是热点数据，一部分是冷门数据这样的缓存分布情况，建议使用allkeys-lru或者allkeys-lfu策略。\n2. 如果业务应用中数据访问频率相差不大，建议用allkeys-random策略。\n3. 如果业务中有置顶的需求，可以使用volatile-lru或者volatile-lfu策略，同时不给这些置顶数据设置过期时间。","source":"_posts/redis_缓存满了怎么办.md","raw":"---\ntitle: Redis缓存满了怎么办\ndate: 2021-11-14\ncategories:\n- redis\ntags:\n- redis\n---\n\n🥡 在高并发场景，缓存被大量使用的情况下，不免会出现一种情况：缓存满了。\n下面我们谈一下这样的情况怎么处理。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>缓存容量</font>\n\n为了避免缓存过早被写满，我们需要根据应用数据访问特征和成本开销来综合考虑缓存容量的大小，一般会把缓存容量设置为总数据量的15%-30%。\n> 命令：CONFIG SET maxmemory 4gb (4gb是举个🌰)\n\n### <font color=#11d17b>## </font><font face=黑体>淘汰策略</font>\n\n缓存写满是不可避免的，Redis有自己的缓存淘汰策略，在4.0版本之前有6中淘汰策略：\n1. noeviction(默认策略): 若内存大小达到了maxmemory值，并不会淘汰数据，再有写请求时，Redis直接返回错误。\n2. allkeys-lru: 所有key都是使用LRU算法进行淘汰。\n3. volatile-lru: 所有设置了过期时间的key使用LRU算法进行淘汰。\n4. allkeys-random: 所有key使用随机淘汰的方式进行淘汰。\n5. volatile-random: 所有设置了过期时间的key使用随机淘汰的方式进行淘汰。\n6. volatile-ttl: 所有设置了过期时间的key根据过期时间进行淘汰，越早过期越早被淘汰。\n\n在4.0版本之后又增加了2种:\n\n7. allkeys-lfu: 所有key都是使用LFU算法进行淘汰。\n8. volatile-lfu: 所有设置了过期时间的key使用LFU算法进行淘汰。\n\n#### <font color=#11d17b>### </font><font face=黑体>LRU算法</font>\n\n我们先来讲讲LRU算法，LRU全称是 Least Recently Used, 即 按照最近最少使用的原则来筛选数据，最不常使用的数据会被筛选出来进行淘汰。\n\n底层原理：\nLRU用一个链表来维护数据，链表头部是MRU端，代表最最近常使用的数据；尾部是LRU端，代表最近不常用的数据。数据访问时根据移动链表来维护数据的最近常用性。\n\nLRU算法有两个问题：\n1. 用链表管理所有的缓存数据会带来额外的空间开销。\n2. 大量数据访问时，链表的移动操作很耗时，会降低Redis的缓存性能。\n\n在Redis中，对LRU算法做了简化:\n\nRedis默认会记录每个数据最近一次访问的时间戳(由对象来维护{lru:时间戳})，淘汰数据时第一次会随机筛选出N个数据，放到一个候选链表当中，把时间戳最小的淘汰。\n> N 用配置参数 maxmemory-samples 来设置\n\n当再次淘汰数据时，Redis会挑选时间戳小于候选链表中最小时间戳的数据放到候选链表中，然后把时间戳最小的淘汰出去。\n\n#### <font color=#11d17b>### </font><font face=黑体>LFU算法</font>\n\nRedis从4.0版本之后增加了LFU策略，是对LRU策略的进一步优化。全称 Least Frequently Used。\n\n核心思想:\n根据key最近被访问的频率进行淘汰。即，优先淘汰最近访问频率小的数据，如果频率相同，则淘汰最近最少使用的数据。\n\n底层原理：\n把lru策略中的lru字段(24bit)差分成两部分，前16bit为ldt值来表示数据访问的时间戳，后8bit为counter值，表示数据的访问次数。\n\n### <font color=#11d17b>## </font><font face=黑体>解决方案</font>\n1. 如果一部分是热点数据，一部分是冷门数据这样的缓存分布情况，建议使用allkeys-lru或者allkeys-lfu策略。\n2. 如果业务应用中数据访问频率相差不大，建议用allkeys-random策略。\n3. 如果业务中有置顶的需求，可以使用volatile-lru或者volatile-lfu策略，同时不给这些置顶数据设置过期时间。","slug":"redis_缓存满了怎么办","published":1,"updated":"2021-11-24T00:28:03.404Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wl00300w8nb0jsan1r","content":"<p>🥡 在高并发场景，缓存被大量使用的情况下，不免会出现一种情况：缓存满了。<br>下面我们谈一下这样的情况怎么处理。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"缓存容量\"><a href=\"#缓存容量\" class=\"headerlink\" title=\"## 缓存容量\"></a><font color=#11d17b>## </font><font face=黑体>缓存容量</font></h3><p>为了避免缓存过早被写满，我们需要根据应用数据访问特征和成本开销来综合考虑缓存容量的大小，一般会把缓存容量设置为总数据量的15%-30%。</p>\n<blockquote>\n<p>命令：CONFIG SET maxmemory 4gb (4gb是举个🌰)</p>\n</blockquote>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"## 淘汰策略\"></a><font color=#11d17b>## </font><font face=黑体>淘汰策略</font></h3><p>缓存写满是不可避免的，Redis有自己的缓存淘汰策略，在4.0版本之前有6中淘汰策略：</p>\n<ol>\n<li>noeviction(默认策略): 若内存大小达到了maxmemory值，并不会淘汰数据，再有写请求时，Redis直接返回错误。</li>\n<li>allkeys-lru: 所有key都是使用LRU算法进行淘汰。</li>\n<li>volatile-lru: 所有设置了过期时间的key使用LRU算法进行淘汰。</li>\n<li>allkeys-random: 所有key使用随机淘汰的方式进行淘汰。</li>\n<li>volatile-random: 所有设置了过期时间的key使用随机淘汰的方式进行淘汰。</li>\n<li>volatile-ttl: 所有设置了过期时间的key根据过期时间进行淘汰，越早过期越早被淘汰。</li>\n</ol>\n<p>在4.0版本之后又增加了2种:</p>\n<ol start=\"7\">\n<li>allkeys-lfu: 所有key都是使用LFU算法进行淘汰。</li>\n<li>volatile-lfu: 所有设置了过期时间的key使用LFU算法进行淘汰。</li>\n</ol>\n<h4 id=\"LRU算法\"><a href=\"#LRU算法\" class=\"headerlink\" title=\"### LRU算法\"></a><font color=#11d17b>### </font><font face=黑体>LRU算法</font></h4><p>我们先来讲讲LRU算法，LRU全称是 Least Recently Used, 即 按照最近最少使用的原则来筛选数据，最不常使用的数据会被筛选出来进行淘汰。</p>\n<p>底层原理：<br>LRU用一个链表来维护数据，链表头部是MRU端，代表最最近常使用的数据；尾部是LRU端，代表最近不常用的数据。数据访问时根据移动链表来维护数据的最近常用性。</p>\n<p>LRU算法有两个问题：</p>\n<ol>\n<li>用链表管理所有的缓存数据会带来额外的空间开销。</li>\n<li>大量数据访问时，链表的移动操作很耗时，会降低Redis的缓存性能。</li>\n</ol>\n<p>在Redis中，对LRU算法做了简化:</p>\n<p>Redis默认会记录每个数据最近一次访问的时间戳(由对象来维护{lru:时间戳})，淘汰数据时第一次会随机筛选出N个数据，放到一个候选链表当中，把时间戳最小的淘汰。</p>\n<blockquote>\n<p>N 用配置参数 maxmemory-samples 来设置</p>\n</blockquote>\n<p>当再次淘汰数据时，Redis会挑选时间戳小于候选链表中最小时间戳的数据放到候选链表中，然后把时间戳最小的淘汰出去。</p>\n<h4 id=\"LFU算法\"><a href=\"#LFU算法\" class=\"headerlink\" title=\"### LFU算法\"></a><font color=#11d17b>### </font><font face=黑体>LFU算法</font></h4><p>Redis从4.0版本之后增加了LFU策略，是对LRU策略的进一步优化。全称 Least Frequently Used。</p>\n<p>核心思想:<br>根据key最近被访问的频率进行淘汰。即，优先淘汰最近访问频率小的数据，如果频率相同，则淘汰最近最少使用的数据。</p>\n<p>底层原理：<br>把lru策略中的lru字段(24bit)差分成两部分，前16bit为ldt值来表示数据访问的时间戳，后8bit为counter值，表示数据的访问次数。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"## 解决方案\"></a><font color=#11d17b>## </font><font face=黑体>解决方案</font></h3><ol>\n<li>如果一部分是热点数据，一部分是冷门数据这样的缓存分布情况，建议使用allkeys-lru或者allkeys-lfu策略。</li>\n<li>如果业务应用中数据访问频率相差不大，建议用allkeys-random策略。</li>\n<li>如果业务中有置顶的需求，可以使用volatile-lru或者volatile-lfu策略，同时不给这些置顶数据设置过期时间。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>🥡 在高并发场景，缓存被大量使用的情况下，不免会出现一种情况：缓存满了。<br>下面我们谈一下这样的情况怎么处理。</p>","more":"<h3 id=\"缓存容量\"><a href=\"#缓存容量\" class=\"headerlink\" title=\"## 缓存容量\"></a><font color=#11d17b>## </font><font face=黑体>缓存容量</font></h3><p>为了避免缓存过早被写满，我们需要根据应用数据访问特征和成本开销来综合考虑缓存容量的大小，一般会把缓存容量设置为总数据量的15%-30%。</p>\n<blockquote>\n<p>命令：CONFIG SET maxmemory 4gb (4gb是举个🌰)</p>\n</blockquote>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"## 淘汰策略\"></a><font color=#11d17b>## </font><font face=黑体>淘汰策略</font></h3><p>缓存写满是不可避免的，Redis有自己的缓存淘汰策略，在4.0版本之前有6中淘汰策略：</p>\n<ol>\n<li>noeviction(默认策略): 若内存大小达到了maxmemory值，并不会淘汰数据，再有写请求时，Redis直接返回错误。</li>\n<li>allkeys-lru: 所有key都是使用LRU算法进行淘汰。</li>\n<li>volatile-lru: 所有设置了过期时间的key使用LRU算法进行淘汰。</li>\n<li>allkeys-random: 所有key使用随机淘汰的方式进行淘汰。</li>\n<li>volatile-random: 所有设置了过期时间的key使用随机淘汰的方式进行淘汰。</li>\n<li>volatile-ttl: 所有设置了过期时间的key根据过期时间进行淘汰，越早过期越早被淘汰。</li>\n</ol>\n<p>在4.0版本之后又增加了2种:</p>\n<ol start=\"7\">\n<li>allkeys-lfu: 所有key都是使用LFU算法进行淘汰。</li>\n<li>volatile-lfu: 所有设置了过期时间的key使用LFU算法进行淘汰。</li>\n</ol>\n<h4 id=\"LRU算法\"><a href=\"#LRU算法\" class=\"headerlink\" title=\"### LRU算法\"></a><font color=#11d17b>### </font><font face=黑体>LRU算法</font></h4><p>我们先来讲讲LRU算法，LRU全称是 Least Recently Used, 即 按照最近最少使用的原则来筛选数据，最不常使用的数据会被筛选出来进行淘汰。</p>\n<p>底层原理：<br>LRU用一个链表来维护数据，链表头部是MRU端，代表最最近常使用的数据；尾部是LRU端，代表最近不常用的数据。数据访问时根据移动链表来维护数据的最近常用性。</p>\n<p>LRU算法有两个问题：</p>\n<ol>\n<li>用链表管理所有的缓存数据会带来额外的空间开销。</li>\n<li>大量数据访问时，链表的移动操作很耗时，会降低Redis的缓存性能。</li>\n</ol>\n<p>在Redis中，对LRU算法做了简化:</p>\n<p>Redis默认会记录每个数据最近一次访问的时间戳(由对象来维护{lru:时间戳})，淘汰数据时第一次会随机筛选出N个数据，放到一个候选链表当中，把时间戳最小的淘汰。</p>\n<blockquote>\n<p>N 用配置参数 maxmemory-samples 来设置</p>\n</blockquote>\n<p>当再次淘汰数据时，Redis会挑选时间戳小于候选链表中最小时间戳的数据放到候选链表中，然后把时间戳最小的淘汰出去。</p>\n<h4 id=\"LFU算法\"><a href=\"#LFU算法\" class=\"headerlink\" title=\"### LFU算法\"></a><font color=#11d17b>### </font><font face=黑体>LFU算法</font></h4><p>Redis从4.0版本之后增加了LFU策略，是对LRU策略的进一步优化。全称 Least Frequently Used。</p>\n<p>核心思想:<br>根据key最近被访问的频率进行淘汰。即，优先淘汰最近访问频率小的数据，如果频率相同，则淘汰最近最少使用的数据。</p>\n<p>底层原理：<br>把lru策略中的lru字段(24bit)差分成两部分，前16bit为ldt值来表示数据访问的时间戳，后8bit为counter值，表示数据的访问次数。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"## 解决方案\"></a><font color=#11d17b>## </font><font face=黑体>解决方案</font></h3><ol>\n<li>如果一部分是热点数据，一部分是冷门数据这样的缓存分布情况，建议使用allkeys-lru或者allkeys-lfu策略。</li>\n<li>如果业务应用中数据访问频率相差不大，建议用allkeys-random策略。</li>\n<li>如果业务中有置顶的需求，可以使用volatile-lru或者volatile-lfu策略，同时不给这些置顶数据设置过期时间。</li>\n</ol>"},{"title":"缓存雪崩、击穿、穿透","date":"2021-11-01T16:00:00.000Z","_content":"\n💣 生产环境中经常面临缓存异常的三个问题，分别是缓存雪崩、缓存击穿和缓存穿透。问题一旦产生，大量请求积压到数据库层，甚至会产生宕机。\n\n<!--more-->\n\n下面我们分别谈一下：\n\n### <font color=#11d17b>## </font><font face=黑体>缓存雪崩</font>\n\n缓存雪崩是指大量的应用请求无法在Redis缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。关键点：大量key失效。\n\n通常有两个原因：\n\n#### <font color=#11d17b>### </font><font face=黑体>原因一</font>\n\n缓存中有大量的数据同时过期，导致大量请求无法得到处理。\n\n#### <font color=#11d17b>### </font><font face=黑体>解决方案</font>\n\n1. 避免给大量的数据设置相同的过期时间。如果业务层要求某些数据同时失效，可以设置失效时间时进行微调，比如失效时间上添加随机数。\n2. 服务降级，针对不同的数据采取不同的处理方式\n    - 访问非核心数据时，暂时停止访问缓存，直接返回预定义信息或错误信息。\n    - 访问核心数据时，仍然查询缓存，如果缓存失效则查询数据库。\n\n#### <font color=#11d17b>### </font><font face=黑体>原因二</font>\n\nRedis缓存实例发生故障宕机了，无法处理请求\n\n#### <font color=#11d17b>### </font><font face=黑体>解决方案</font>\n\n1. 在业务系统中实现服务熔断或请求限流机制。\n    - 服务熔断机制是指暂停对缓存系统和数据库的访问，直接return。\n    - 限流是指在前端限制每秒请求系统的次数。\n2. 事先预防。\n    - 通过主从节点的方式构建Redis缓存高可靠集群。如果Redis缓存的主节点宕机了，从节点可以切换为主节点，继续提供缓存服务。\n\n### <font color=#11d17b>## </font><font face=黑体>缓存击穿</font>\n\n缓存击穿是指，针对某个访问非常频繁的热点数据的请求，一旦这个key失效了，访问会堆积到数据库层，导致数据库压力激增。\n\n#### <font color=#11d17b>### </font><font face=黑体>解决方案</font>\n\n1. 对访问特别频繁的热点数据不设置过期时间。\n2. 使用互斥锁。\n    - 在缓存失效的时候，不是立即查询数据库，而是先使用Redis设置互斥锁(setnx设置一个mutex key)，当设置成功时，再查询数据库并设置缓存，否则就sleep之后再请求。\n\n    ```java\n    public static String getProductDescById(String id) {\n        String desc = redis.get(id);\n        // 缓存为空，过期了\n        if (desc == null) {\n            // 互斥锁，只有一个请求可以成功\n            if (redis.setnx(lock_id, 1, 60) == 1) {\n                try {\n                    // 从数据库取出数据\n                    desc = getFromDB(id);\n                    redis.set(id, desc, 60 * 60 * 24);\n                } catch (Exception ex) {\n                    LogHelper.error(ex);\n                } finally {\n                    // 确保最后删除，释放锁\n                    redis.del(lock_id);\n                    return desc;\n                }\n            } else {\n                // 否则睡眠1000ms，接着获取锁\n                Thread.sleep(1000);\n                return getProductDescById(id);\n            }\n        }\n    }\n    ```\n\n### <font color=#11d17b>## </font><font face=黑体>缓存穿透</font>\n\n缓存穿透是指要访问的数据既不在Redis缓存中，也不在数据库中，大量请求给缓存和数据库带来巨大压力。\n\n#### <font color=#11d17b>### </font><font face=黑体>原因一</font>\n\n业务层误操作，缓存中的数据和数据库中的数据被删除了。\n\n#### <font color=#11d17b>### </font><font face=黑体>原因二</font>\n\n恶意攻击，专门访问数据库中没有的数据。\n\n#### <font color=#11d17b>### </font><font face=黑体>解决方案</font>\n\n1. 缓存空值或协商好的缺省值。这样直接返回，就不用访问数据库了。\n2. 使用布隆过滤器快速判断数据是否存在，避免查询数据库。\n    - 原理是将数据的多个哈希值存放到一个足够大的bit数组中，查询时只要有一个哈希值不存在则返回，完成快速检测。\n3. 在请求入口的前端进行请求检测。\n    - 把请求参数不合理、请求参数是非法值、请求字段不存在等恶意请求直接过滤掉。\n\n\n\n\n\n","source":"_posts/redis_缓存雪崩.md","raw":"---\ntitle: 缓存雪崩、击穿、穿透\ndate: 2021-11-02\ncategories:\n- redis\ntags:\n- redis\n---\n\n💣 生产环境中经常面临缓存异常的三个问题，分别是缓存雪崩、缓存击穿和缓存穿透。问题一旦产生，大量请求积压到数据库层，甚至会产生宕机。\n\n<!--more-->\n\n下面我们分别谈一下：\n\n### <font color=#11d17b>## </font><font face=黑体>缓存雪崩</font>\n\n缓存雪崩是指大量的应用请求无法在Redis缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。关键点：大量key失效。\n\n通常有两个原因：\n\n#### <font color=#11d17b>### </font><font face=黑体>原因一</font>\n\n缓存中有大量的数据同时过期，导致大量请求无法得到处理。\n\n#### <font color=#11d17b>### </font><font face=黑体>解决方案</font>\n\n1. 避免给大量的数据设置相同的过期时间。如果业务层要求某些数据同时失效，可以设置失效时间时进行微调，比如失效时间上添加随机数。\n2. 服务降级，针对不同的数据采取不同的处理方式\n    - 访问非核心数据时，暂时停止访问缓存，直接返回预定义信息或错误信息。\n    - 访问核心数据时，仍然查询缓存，如果缓存失效则查询数据库。\n\n#### <font color=#11d17b>### </font><font face=黑体>原因二</font>\n\nRedis缓存实例发生故障宕机了，无法处理请求\n\n#### <font color=#11d17b>### </font><font face=黑体>解决方案</font>\n\n1. 在业务系统中实现服务熔断或请求限流机制。\n    - 服务熔断机制是指暂停对缓存系统和数据库的访问，直接return。\n    - 限流是指在前端限制每秒请求系统的次数。\n2. 事先预防。\n    - 通过主从节点的方式构建Redis缓存高可靠集群。如果Redis缓存的主节点宕机了，从节点可以切换为主节点，继续提供缓存服务。\n\n### <font color=#11d17b>## </font><font face=黑体>缓存击穿</font>\n\n缓存击穿是指，针对某个访问非常频繁的热点数据的请求，一旦这个key失效了，访问会堆积到数据库层，导致数据库压力激增。\n\n#### <font color=#11d17b>### </font><font face=黑体>解决方案</font>\n\n1. 对访问特别频繁的热点数据不设置过期时间。\n2. 使用互斥锁。\n    - 在缓存失效的时候，不是立即查询数据库，而是先使用Redis设置互斥锁(setnx设置一个mutex key)，当设置成功时，再查询数据库并设置缓存，否则就sleep之后再请求。\n\n    ```java\n    public static String getProductDescById(String id) {\n        String desc = redis.get(id);\n        // 缓存为空，过期了\n        if (desc == null) {\n            // 互斥锁，只有一个请求可以成功\n            if (redis.setnx(lock_id, 1, 60) == 1) {\n                try {\n                    // 从数据库取出数据\n                    desc = getFromDB(id);\n                    redis.set(id, desc, 60 * 60 * 24);\n                } catch (Exception ex) {\n                    LogHelper.error(ex);\n                } finally {\n                    // 确保最后删除，释放锁\n                    redis.del(lock_id);\n                    return desc;\n                }\n            } else {\n                // 否则睡眠1000ms，接着获取锁\n                Thread.sleep(1000);\n                return getProductDescById(id);\n            }\n        }\n    }\n    ```\n\n### <font color=#11d17b>## </font><font face=黑体>缓存穿透</font>\n\n缓存穿透是指要访问的数据既不在Redis缓存中，也不在数据库中，大量请求给缓存和数据库带来巨大压力。\n\n#### <font color=#11d17b>### </font><font face=黑体>原因一</font>\n\n业务层误操作，缓存中的数据和数据库中的数据被删除了。\n\n#### <font color=#11d17b>### </font><font face=黑体>原因二</font>\n\n恶意攻击，专门访问数据库中没有的数据。\n\n#### <font color=#11d17b>### </font><font face=黑体>解决方案</font>\n\n1. 缓存空值或协商好的缺省值。这样直接返回，就不用访问数据库了。\n2. 使用布隆过滤器快速判断数据是否存在，避免查询数据库。\n    - 原理是将数据的多个哈希值存放到一个足够大的bit数组中，查询时只要有一个哈希值不存在则返回，完成快速检测。\n3. 在请求入口的前端进行请求检测。\n    - 把请求参数不合理、请求参数是非法值、请求字段不存在等恶意请求直接过滤掉。\n\n\n\n\n\n","slug":"redis_缓存雪崩","published":1,"updated":"2021-11-03T15:27:23.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wl00320w8n98meg27f","content":"<p>💣 生产环境中经常面临缓存异常的三个问题，分别是缓存雪崩、缓存击穿和缓存穿透。问题一旦产生，大量请求积压到数据库层，甚至会产生宕机。</p>\n<a id=\"more\"></a>\n\n<p>下面我们分别谈一下：</p>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"## 缓存雪崩\"></a><font color=#11d17b>## </font><font face=黑体>缓存雪崩</font></h3><p>缓存雪崩是指大量的应用请求无法在Redis缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。关键点：大量key失效。</p>\n<p>通常有两个原因：</p>\n<h4 id=\"原因一\"><a href=\"#原因一\" class=\"headerlink\" title=\"### 原因一\"></a><font color=#11d17b>### </font><font face=黑体>原因一</font></h4><p>缓存中有大量的数据同时过期，导致大量请求无法得到处理。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"### 解决方案\"></a><font color=#11d17b>### </font><font face=黑体>解决方案</font></h4><ol>\n<li>避免给大量的数据设置相同的过期时间。如果业务层要求某些数据同时失效，可以设置失效时间时进行微调，比如失效时间上添加随机数。</li>\n<li>服务降级，针对不同的数据采取不同的处理方式<ul>\n<li>访问非核心数据时，暂时停止访问缓存，直接返回预定义信息或错误信息。</li>\n<li>访问核心数据时，仍然查询缓存，如果缓存失效则查询数据库。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"原因二\"><a href=\"#原因二\" class=\"headerlink\" title=\"### 原因二\"></a><font color=#11d17b>### </font><font face=黑体>原因二</font></h4><p>Redis缓存实例发生故障宕机了，无法处理请求</p>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"### 解决方案\"></a><font color=#11d17b>### </font><font face=黑体>解决方案</font></h4><ol>\n<li>在业务系统中实现服务熔断或请求限流机制。<ul>\n<li>服务熔断机制是指暂停对缓存系统和数据库的访问，直接return。</li>\n<li>限流是指在前端限制每秒请求系统的次数。</li>\n</ul>\n</li>\n<li>事先预防。<ul>\n<li>通过主从节点的方式构建Redis缓存高可靠集群。如果Redis缓存的主节点宕机了，从节点可以切换为主节点，继续提供缓存服务。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"## 缓存击穿\"></a><font color=#11d17b>## </font><font face=黑体>缓存击穿</font></h3><p>缓存击穿是指，针对某个访问非常频繁的热点数据的请求，一旦这个key失效了，访问会堆积到数据库层，导致数据库压力激增。</p>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"### 解决方案\"></a><font color=#11d17b>### </font><font face=黑体>解决方案</font></h4><ol>\n<li><p>对访问特别频繁的热点数据不设置过期时间。</p>\n</li>\n<li><p>使用互斥锁。</p>\n<ul>\n<li><p>在缓存失效的时候，不是立即查询数据库，而是先使用Redis设置互斥锁(setnx设置一个mutex key)，当设置成功时，再查询数据库并设置缓存，否则就sleep之后再请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getProductDescById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">    String desc = redis.get(id);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存为空，过期了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (desc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 互斥锁，只有一个请求可以成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (redis.setnx(lock_id, <span class=\"number\">1</span>, <span class=\"number\">60</span>) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 从数据库取出数据</span></span><br><span class=\"line\">                desc = getFromDB(id);</span><br><span class=\"line\">                redis.set(id, desc, <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                LogHelper.error(ex);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 确保最后删除，释放锁</span></span><br><span class=\"line\">                redis.del(lock_id);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> desc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 否则睡眠1000ms，接着获取锁</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getProductDescById(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"## 缓存穿透\"></a><font color=#11d17b>## </font><font face=黑体>缓存穿透</font></h3><p>缓存穿透是指要访问的数据既不在Redis缓存中，也不在数据库中，大量请求给缓存和数据库带来巨大压力。</p>\n<h4 id=\"原因一-1\"><a href=\"#原因一-1\" class=\"headerlink\" title=\"### 原因一\"></a><font color=#11d17b>### </font><font face=黑体>原因一</font></h4><p>业务层误操作，缓存中的数据和数据库中的数据被删除了。</p>\n<h4 id=\"原因二-1\"><a href=\"#原因二-1\" class=\"headerlink\" title=\"### 原因二\"></a><font color=#11d17b>### </font><font face=黑体>原因二</font></h4><p>恶意攻击，专门访问数据库中没有的数据。</p>\n<h4 id=\"解决方案-3\"><a href=\"#解决方案-3\" class=\"headerlink\" title=\"### 解决方案\"></a><font color=#11d17b>### </font><font face=黑体>解决方案</font></h4><ol>\n<li>缓存空值或协商好的缺省值。这样直接返回，就不用访问数据库了。</li>\n<li>使用布隆过滤器快速判断数据是否存在，避免查询数据库。<ul>\n<li>原理是将数据的多个哈希值存放到一个足够大的bit数组中，查询时只要有一个哈希值不存在则返回，完成快速检测。</li>\n</ul>\n</li>\n<li>在请求入口的前端进行请求检测。<ul>\n<li>把请求参数不合理、请求参数是非法值、请求字段不存在等恶意请求直接过滤掉。</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>💣 生产环境中经常面临缓存异常的三个问题，分别是缓存雪崩、缓存击穿和缓存穿透。问题一旦产生，大量请求积压到数据库层，甚至会产生宕机。</p>","more":"<p>下面我们分别谈一下：</p>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"## 缓存雪崩\"></a><font color=#11d17b>## </font><font face=黑体>缓存雪崩</font></h3><p>缓存雪崩是指大量的应用请求无法在Redis缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。关键点：大量key失效。</p>\n<p>通常有两个原因：</p>\n<h4 id=\"原因一\"><a href=\"#原因一\" class=\"headerlink\" title=\"### 原因一\"></a><font color=#11d17b>### </font><font face=黑体>原因一</font></h4><p>缓存中有大量的数据同时过期，导致大量请求无法得到处理。</p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"### 解决方案\"></a><font color=#11d17b>### </font><font face=黑体>解决方案</font></h4><ol>\n<li>避免给大量的数据设置相同的过期时间。如果业务层要求某些数据同时失效，可以设置失效时间时进行微调，比如失效时间上添加随机数。</li>\n<li>服务降级，针对不同的数据采取不同的处理方式<ul>\n<li>访问非核心数据时，暂时停止访问缓存，直接返回预定义信息或错误信息。</li>\n<li>访问核心数据时，仍然查询缓存，如果缓存失效则查询数据库。</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"原因二\"><a href=\"#原因二\" class=\"headerlink\" title=\"### 原因二\"></a><font color=#11d17b>### </font><font face=黑体>原因二</font></h4><p>Redis缓存实例发生故障宕机了，无法处理请求</p>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"### 解决方案\"></a><font color=#11d17b>### </font><font face=黑体>解决方案</font></h4><ol>\n<li>在业务系统中实现服务熔断或请求限流机制。<ul>\n<li>服务熔断机制是指暂停对缓存系统和数据库的访问，直接return。</li>\n<li>限流是指在前端限制每秒请求系统的次数。</li>\n</ul>\n</li>\n<li>事先预防。<ul>\n<li>通过主从节点的方式构建Redis缓存高可靠集群。如果Redis缓存的主节点宕机了，从节点可以切换为主节点，继续提供缓存服务。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"## 缓存击穿\"></a><font color=#11d17b>## </font><font face=黑体>缓存击穿</font></h3><p>缓存击穿是指，针对某个访问非常频繁的热点数据的请求，一旦这个key失效了，访问会堆积到数据库层，导致数据库压力激增。</p>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"### 解决方案\"></a><font color=#11d17b>### </font><font face=黑体>解决方案</font></h4><ol>\n<li><p>对访问特别频繁的热点数据不设置过期时间。</p>\n</li>\n<li><p>使用互斥锁。</p>\n<ul>\n<li><p>在缓存失效的时候，不是立即查询数据库，而是先使用Redis设置互斥锁(setnx设置一个mutex key)，当设置成功时，再查询数据库并设置缓存，否则就sleep之后再请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">getProductDescById</span><span class=\"params\">(String id)</span> </span>&#123;</span><br><span class=\"line\">    String desc = redis.get(id);</span><br><span class=\"line\">    <span class=\"comment\">// 缓存为空，过期了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (desc == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 互斥锁，只有一个请求可以成功</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (redis.setnx(lock_id, <span class=\"number\">1</span>, <span class=\"number\">60</span>) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 从数据库取出数据</span></span><br><span class=\"line\">                desc = getFromDB(id);</span><br><span class=\"line\">                redis.set(id, desc, <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                LogHelper.error(ex);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 确保最后删除，释放锁</span></span><br><span class=\"line\">                redis.del(lock_id);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> desc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 否则睡眠1000ms，接着获取锁</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> getProductDescById(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"## 缓存穿透\"></a><font color=#11d17b>## </font><font face=黑体>缓存穿透</font></h3><p>缓存穿透是指要访问的数据既不在Redis缓存中，也不在数据库中，大量请求给缓存和数据库带来巨大压力。</p>\n<h4 id=\"原因一-1\"><a href=\"#原因一-1\" class=\"headerlink\" title=\"### 原因一\"></a><font color=#11d17b>### </font><font face=黑体>原因一</font></h4><p>业务层误操作，缓存中的数据和数据库中的数据被删除了。</p>\n<h4 id=\"原因二-1\"><a href=\"#原因二-1\" class=\"headerlink\" title=\"### 原因二\"></a><font color=#11d17b>### </font><font face=黑体>原因二</font></h4><p>恶意攻击，专门访问数据库中没有的数据。</p>\n<h4 id=\"解决方案-3\"><a href=\"#解决方案-3\" class=\"headerlink\" title=\"### 解决方案\"></a><font color=#11d17b>### </font><font face=黑体>解决方案</font></h4><ol>\n<li>缓存空值或协商好的缺省值。这样直接返回，就不用访问数据库了。</li>\n<li>使用布隆过滤器快速判断数据是否存在，避免查询数据库。<ul>\n<li>原理是将数据的多个哈希值存放到一个足够大的bit数组中，查询时只要有一个哈希值不存在则返回，完成快速检测。</li>\n</ul>\n</li>\n<li>在请求入口的前端进行请求检测。<ul>\n<li>把请求参数不合理、请求参数是非法值、请求字段不存在等恶意请求直接过滤掉。</li>\n</ul>\n</li>\n</ol>"},{"title":"Hexo遇到的坑","date":"2021-10-27T16:00:00.000Z","_content":"\n🍗 换电脑之后重新部署Hexo，遇到一些坑，整理一下\n\n<!--more-->\n\n1. Hexo在node高版本下，部署不成功。最后安装的node版本为 v12.0, OK了\n\n2. 很多不同的软件都不支持node的最新版本，这是大坑。今天才知道可以用 nvm 来管理不同版本的node，可以来回切换。\n\n3. 当hexo命令不被识别，需要重新安装：npm install hexo-cli -g\n如果还没效果，那就卸载node，然后重新安装node，然后hexo\n\n4. 博客代码部署上，使用的是Hexo的一键部署，hexo -d 把 public 目录推送到github上仓库1，覆盖静态文件。然后整个项目关联到github上仓库2.\n这样项目代码由仓库2维护，git pull/push. 博客静态文件由仓库1部署展示。\n\n5. Hexo主题themes/next 文件夹无法提交到GitHub:\n    - 原因：themes/next也是从仓库里拉取下来的 他关联到了作者的git仓库, 所以提交不上去\n    - 解决方法:\n    a) 从暂存区删除该文件夹: git rm --cache themes/next\n    b) 把 themes/next/.git文件夹重命名为themes/hexo-theme-icarus/.git.bak\n    c) git add .   git commit -m \"add themes\" 即可\n\n6. 具体建站，看[官网手册](https://hexo.io/zh-cn/docs/)\n\n","source":"_posts/web_Hexo.md","raw":"---\ntitle: Hexo遇到的坑\ndate: 2021-10-28\ncategories:\n- web\ntags:\n- hexo\n- nodejs\n---\n\n🍗 换电脑之后重新部署Hexo，遇到一些坑，整理一下\n\n<!--more-->\n\n1. Hexo在node高版本下，部署不成功。最后安装的node版本为 v12.0, OK了\n\n2. 很多不同的软件都不支持node的最新版本，这是大坑。今天才知道可以用 nvm 来管理不同版本的node，可以来回切换。\n\n3. 当hexo命令不被识别，需要重新安装：npm install hexo-cli -g\n如果还没效果，那就卸载node，然后重新安装node，然后hexo\n\n4. 博客代码部署上，使用的是Hexo的一键部署，hexo -d 把 public 目录推送到github上仓库1，覆盖静态文件。然后整个项目关联到github上仓库2.\n这样项目代码由仓库2维护，git pull/push. 博客静态文件由仓库1部署展示。\n\n5. Hexo主题themes/next 文件夹无法提交到GitHub:\n    - 原因：themes/next也是从仓库里拉取下来的 他关联到了作者的git仓库, 所以提交不上去\n    - 解决方法:\n    a) 从暂存区删除该文件夹: git rm --cache themes/next\n    b) 把 themes/next/.git文件夹重命名为themes/hexo-theme-icarus/.git.bak\n    c) git add .   git commit -m \"add themes\" 即可\n\n6. 具体建站，看[官网手册](https://hexo.io/zh-cn/docs/)\n\n","slug":"web_Hexo","published":1,"updated":"2021-11-03T15:28:25.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckxy549wm00370w8negfr8nda","content":"<p>🍗 换电脑之后重新部署Hexo，遇到一些坑，整理一下</p>\n<a id=\"more\"></a>\n\n<ol>\n<li><p>Hexo在node高版本下，部署不成功。最后安装的node版本为 v12.0, OK了</p>\n</li>\n<li><p>很多不同的软件都不支持node的最新版本，这是大坑。今天才知道可以用 nvm 来管理不同版本的node，可以来回切换。</p>\n</li>\n<li><p>当hexo命令不被识别，需要重新安装：npm install hexo-cli -g<br>如果还没效果，那就卸载node，然后重新安装node，然后hexo</p>\n</li>\n<li><p>博客代码部署上，使用的是Hexo的一键部署，hexo -d 把 public 目录推送到github上仓库1，覆盖静态文件。然后整个项目关联到github上仓库2.<br>这样项目代码由仓库2维护，git pull/push. 博客静态文件由仓库1部署展示。</p>\n</li>\n<li><p>Hexo主题themes/next 文件夹无法提交到GitHub:</p>\n<ul>\n<li>原因：themes/next也是从仓库里拉取下来的 他关联到了作者的git仓库, 所以提交不上去</li>\n<li>解决方法:<br>a) 从暂存区删除该文件夹: git rm –cache themes/next<br>b) 把 themes/next/.git文件夹重命名为themes/hexo-theme-icarus/.git.bak<br>c) git add .   git commit -m “add themes” 即可</li>\n</ul>\n</li>\n<li><p>具体建站，看<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官网手册</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>🍗 换电脑之后重新部署Hexo，遇到一些坑，整理一下</p>","more":"<ol>\n<li><p>Hexo在node高版本下，部署不成功。最后安装的node版本为 v12.0, OK了</p>\n</li>\n<li><p>很多不同的软件都不支持node的最新版本，这是大坑。今天才知道可以用 nvm 来管理不同版本的node，可以来回切换。</p>\n</li>\n<li><p>当hexo命令不被识别，需要重新安装：npm install hexo-cli -g<br>如果还没效果，那就卸载node，然后重新安装node，然后hexo</p>\n</li>\n<li><p>博客代码部署上，使用的是Hexo的一键部署，hexo -d 把 public 目录推送到github上仓库1，覆盖静态文件。然后整个项目关联到github上仓库2.<br>这样项目代码由仓库2维护，git pull/push. 博客静态文件由仓库1部署展示。</p>\n</li>\n<li><p>Hexo主题themes/next 文件夹无法提交到GitHub:</p>\n<ul>\n<li>原因：themes/next也是从仓库里拉取下来的 他关联到了作者的git仓库, 所以提交不上去</li>\n<li>解决方法:<br>a) 从暂存区删除该文件夹: git rm –cache themes/next<br>b) 把 themes/next/.git文件夹重命名为themes/hexo-theme-icarus/.git.bak<br>c) git add .   git commit -m “add themes” 即可</li>\n</ul>\n</li>\n<li><p>具体建站，看<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">官网手册</a></p>\n</li>\n</ol>"},{"title":"superset安装使用","date":"2022-01-05T16:00:00.000Z","_content":"\n📊 Apache Superset is a modern data exploration and visualization platform. 下面介绍一下项目选择方案上的考虑，和superset的安装使用。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>Data Visualization for Large Screen 选型</font>\n\n1.开源的对 superset、redash 和 Metabase 做了对比，最终选择了superset\n- superset\n优点： 1.可视化图标类型比较丰富  2. 项目活跃度比较高\n缺点： 文档不完善，需要一段时间才能掌握\n- redash\n优点：1.简单、实用、文档清晰  2.原码可读性好，适合二次开发\n缺点：图表样式不如superset丰富\n- Metabase 后端语言Clojure，跟我们不适配\n\n2.收费版的对 阿里云的dataV、山海鲸做了简单了解：\n- 项目是绑定设备的，每增加一个设备需要单独添加收费。\n- 基于开源项目能满足我们的需求，于是我们优先使用了开源项目。\n\n\n### <font color=#11d17b>## </font><font face=黑体>superset 安装使用流程</font>\n\n1.官方文档：https://superset.apache.org/docs/intro\n\n2.安装\n官方的 Docker image 仅包含基础的功能，\n因此我们使用了Docker Compose的方式在本地安装,\n文档：https://superset.apache.org/docs/installation/installing-superset-using-docker-compose\n\n3.连接数据库\nsuperset启动后，打开项目 http://localhost:8088/，菜单栏 Data -> Databases 添加数据库，注意HOST: host.docker.internal (Mac users) or IP地址 (Linux users)\n文档：https://superset.apache.org/docs/databases/db-connection-ui\n\n4.添加数据集\n菜单栏 Data -> Datasets 右上角 + DATASET 添加数据集\n\n5.制作图表\n菜单栏 Charts -> 右上角 + CHART\n\n6.让角色public免登陆访问\n参考文章：https://blog.csdn.net/DraGon_HooRay/article/details/120780148\na) 进入镜像安装vim: apt-get install vim\nb) 编辑配置文件 /app/superset/config.py\nPUBLIC_ROLE_LIKE: Optional[str] = \"Gamma\"\nsuperset init  // 初始化\nc) 将pubilc涉及add edit delete menu权限全部去掉，\n   菜单栏：Settings -> List Roles -> Public 编辑权限\n\n7.允许跨域请求iframe\n编辑配置文件 /app/superset/config.py\nWTF_CSRF_ENABLED = False\n重启docker-compose down  / up\n\n8.把图表的加载地址分享给前端，在编辑 Chart 页面找到<>按钮，复制代码给前端\n```html\n<iframe\n  width=\"600\"\n  height=\"400\"\n  seamless\n  frameBorder=\"0\"\n  scrolling=\"no\"\n  src=\"http://192.168.1.100:8088/superset/explore/?r=19&standalone=1&height=400\"\n>\n</iframe>\n```\n\n\n##### 后续研究\n\n1.如何使用SQL Lab\n2.如何更好的管理和使用Chart模板\n3.二开\n","source":"_posts/superset_安装使用.md","raw":"---\ntitle: superset安装使用\ndate: 2022-01-06\ncategories:\n- web\ntags:\n- superset\n- bi\n---\n\n📊 Apache Superset is a modern data exploration and visualization platform. 下面介绍一下项目选择方案上的考虑，和superset的安装使用。\n\n<!--more-->\n\n### <font color=#11d17b>## </font><font face=黑体>Data Visualization for Large Screen 选型</font>\n\n1.开源的对 superset、redash 和 Metabase 做了对比，最终选择了superset\n- superset\n优点： 1.可视化图标类型比较丰富  2. 项目活跃度比较高\n缺点： 文档不完善，需要一段时间才能掌握\n- redash\n优点：1.简单、实用、文档清晰  2.原码可读性好，适合二次开发\n缺点：图表样式不如superset丰富\n- Metabase 后端语言Clojure，跟我们不适配\n\n2.收费版的对 阿里云的dataV、山海鲸做了简单了解：\n- 项目是绑定设备的，每增加一个设备需要单独添加收费。\n- 基于开源项目能满足我们的需求，于是我们优先使用了开源项目。\n\n\n### <font color=#11d17b>## </font><font face=黑体>superset 安装使用流程</font>\n\n1.官方文档：https://superset.apache.org/docs/intro\n\n2.安装\n官方的 Docker image 仅包含基础的功能，\n因此我们使用了Docker Compose的方式在本地安装,\n文档：https://superset.apache.org/docs/installation/installing-superset-using-docker-compose\n\n3.连接数据库\nsuperset启动后，打开项目 http://localhost:8088/，菜单栏 Data -> Databases 添加数据库，注意HOST: host.docker.internal (Mac users) or IP地址 (Linux users)\n文档：https://superset.apache.org/docs/databases/db-connection-ui\n\n4.添加数据集\n菜单栏 Data -> Datasets 右上角 + DATASET 添加数据集\n\n5.制作图表\n菜单栏 Charts -> 右上角 + CHART\n\n6.让角色public免登陆访问\n参考文章：https://blog.csdn.net/DraGon_HooRay/article/details/120780148\na) 进入镜像安装vim: apt-get install vim\nb) 编辑配置文件 /app/superset/config.py\nPUBLIC_ROLE_LIKE: Optional[str] = \"Gamma\"\nsuperset init  // 初始化\nc) 将pubilc涉及add edit delete menu权限全部去掉，\n   菜单栏：Settings -> List Roles -> Public 编辑权限\n\n7.允许跨域请求iframe\n编辑配置文件 /app/superset/config.py\nWTF_CSRF_ENABLED = False\n重启docker-compose down  / up\n\n8.把图表的加载地址分享给前端，在编辑 Chart 页面找到<>按钮，复制代码给前端\n```html\n<iframe\n  width=\"600\"\n  height=\"400\"\n  seamless\n  frameBorder=\"0\"\n  scrolling=\"no\"\n  src=\"http://192.168.1.100:8088/superset/explore/?r=19&standalone=1&height=400\"\n>\n</iframe>\n```\n\n\n##### 后续研究\n\n1.如何使用SQL Lab\n2.如何更好的管理和使用Chart模板\n3.二开\n","slug":"superset_安装使用","published":1,"updated":"2022-01-06T14:25:05.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cky32b3s60000yos6730027cp","content":"<p>📊 Apache Superset is a modern data exploration and visualization platform. 下面介绍一下项目选择方案上的考虑，和superset的安装使用。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Data-Visualization-for-Large-Screen-选型\"><a href=\"#Data-Visualization-for-Large-Screen-选型\" class=\"headerlink\" title=\"## Data Visualization for Large Screen 选型\"></a><font color=#11d17b>## </font><font face=黑体>Data Visualization for Large Screen 选型</font></h3><p>1.开源的对 superset、redash 和 Metabase 做了对比，最终选择了superset</p>\n<ul>\n<li>superset<br>优点： 1.可视化图标类型比较丰富  2. 项目活跃度比较高<br>缺点： 文档不完善，需要一段时间才能掌握</li>\n<li>redash<br>优点：1.简单、实用、文档清晰  2.原码可读性好，适合二次开发<br>缺点：图表样式不如superset丰富</li>\n<li>Metabase 后端语言Clojure，跟我们不适配</li>\n</ul>\n<p>2.收费版的对 阿里云的dataV、山海鲸做了简单了解：</p>\n<ul>\n<li>项目是绑定设备的，每增加一个设备需要单独添加收费。</li>\n<li>基于开源项目能满足我们的需求，于是我们优先使用了开源项目。</li>\n</ul>\n<h3 id=\"superset-安装使用流程\"><a href=\"#superset-安装使用流程\" class=\"headerlink\" title=\"## superset 安装使用流程\"></a><font color=#11d17b>## </font><font face=黑体>superset 安装使用流程</font></h3><p>1.官方文档：<a href=\"https://superset.apache.org/docs/intro\" target=\"_blank\" rel=\"noopener\">https://superset.apache.org/docs/intro</a></p>\n<p>2.安装<br>官方的 Docker image 仅包含基础的功能，<br>因此我们使用了Docker Compose的方式在本地安装,<br>文档：<a href=\"https://superset.apache.org/docs/installation/installing-superset-using-docker-compose\" target=\"_blank\" rel=\"noopener\">https://superset.apache.org/docs/installation/installing-superset-using-docker-compose</a></p>\n<p>3.连接数据库<br>superset启动后，打开项目 <a href=\"http://localhost:8088/，菜单栏\" target=\"_blank\" rel=\"noopener\">http://localhost:8088/，菜单栏</a> Data -&gt; Databases 添加数据库，注意HOST: host.docker.internal (Mac users) or IP地址 (Linux users)<br>文档：<a href=\"https://superset.apache.org/docs/databases/db-connection-ui\" target=\"_blank\" rel=\"noopener\">https://superset.apache.org/docs/databases/db-connection-ui</a></p>\n<p>4.添加数据集<br>菜单栏 Data -&gt; Datasets 右上角 + DATASET 添加数据集</p>\n<p>5.制作图表<br>菜单栏 Charts -&gt; 右上角 + CHART</p>\n<p>6.让角色public免登陆访问<br>参考文章：<a href=\"https://blog.csdn.net/DraGon_HooRay/article/details/120780148\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/DraGon_HooRay/article/details/120780148</a><br>a) 进入镜像安装vim: apt-get install vim<br>b) 编辑配置文件 /app/superset/config.py<br>PUBLIC_ROLE_LIKE: Optional[str] = “Gamma”<br>superset init  // 初始化<br>c) 将pubilc涉及add edit delete menu权限全部去掉，<br>   菜单栏：Settings -&gt; List Roles -&gt; Public 编辑权限</p>\n<p>7.允许跨域请求iframe<br>编辑配置文件 /app/superset/config.py<br>WTF_CSRF_ENABLED = False<br>重启docker-compose down  / up</p>\n<p>8.把图表的加载地址分享给前端，在编辑 Chart 页面找到&lt;&gt;按钮，复制代码给前端</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">seamless</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">frameBorder</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">scrolling</span>=<span class=\"string\">\"no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"http://192.168.1.100:8088/superset/explore/?r=19&amp;standalone=1&amp;height=400\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"后续研究\"><a href=\"#后续研究\" class=\"headerlink\" title=\"后续研究\"></a>后续研究</h5><p>1.如何使用SQL Lab<br>2.如何更好的管理和使用Chart模板<br>3.二开</p>\n","site":{"data":{}},"excerpt":"<p>📊 Apache Superset is a modern data exploration and visualization platform. 下面介绍一下项目选择方案上的考虑，和superset的安装使用。</p>","more":"<h3 id=\"Data-Visualization-for-Large-Screen-选型\"><a href=\"#Data-Visualization-for-Large-Screen-选型\" class=\"headerlink\" title=\"## Data Visualization for Large Screen 选型\"></a><font color=#11d17b>## </font><font face=黑体>Data Visualization for Large Screen 选型</font></h3><p>1.开源的对 superset、redash 和 Metabase 做了对比，最终选择了superset</p>\n<ul>\n<li>superset<br>优点： 1.可视化图标类型比较丰富  2. 项目活跃度比较高<br>缺点： 文档不完善，需要一段时间才能掌握</li>\n<li>redash<br>优点：1.简单、实用、文档清晰  2.原码可读性好，适合二次开发<br>缺点：图表样式不如superset丰富</li>\n<li>Metabase 后端语言Clojure，跟我们不适配</li>\n</ul>\n<p>2.收费版的对 阿里云的dataV、山海鲸做了简单了解：</p>\n<ul>\n<li>项目是绑定设备的，每增加一个设备需要单独添加收费。</li>\n<li>基于开源项目能满足我们的需求，于是我们优先使用了开源项目。</li>\n</ul>\n<h3 id=\"superset-安装使用流程\"><a href=\"#superset-安装使用流程\" class=\"headerlink\" title=\"## superset 安装使用流程\"></a><font color=#11d17b>## </font><font face=黑体>superset 安装使用流程</font></h3><p>1.官方文档：<a href=\"https://superset.apache.org/docs/intro\" target=\"_blank\" rel=\"noopener\">https://superset.apache.org/docs/intro</a></p>\n<p>2.安装<br>官方的 Docker image 仅包含基础的功能，<br>因此我们使用了Docker Compose的方式在本地安装,<br>文档：<a href=\"https://superset.apache.org/docs/installation/installing-superset-using-docker-compose\" target=\"_blank\" rel=\"noopener\">https://superset.apache.org/docs/installation/installing-superset-using-docker-compose</a></p>\n<p>3.连接数据库<br>superset启动后，打开项目 <a href=\"http://localhost:8088/，菜单栏\" target=\"_blank\" rel=\"noopener\">http://localhost:8088/，菜单栏</a> Data -&gt; Databases 添加数据库，注意HOST: host.docker.internal (Mac users) or IP地址 (Linux users)<br>文档：<a href=\"https://superset.apache.org/docs/databases/db-connection-ui\" target=\"_blank\" rel=\"noopener\">https://superset.apache.org/docs/databases/db-connection-ui</a></p>\n<p>4.添加数据集<br>菜单栏 Data -&gt; Datasets 右上角 + DATASET 添加数据集</p>\n<p>5.制作图表<br>菜单栏 Charts -&gt; 右上角 + CHART</p>\n<p>6.让角色public免登陆访问<br>参考文章：<a href=\"https://blog.csdn.net/DraGon_HooRay/article/details/120780148\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/DraGon_HooRay/article/details/120780148</a><br>a) 进入镜像安装vim: apt-get install vim<br>b) 编辑配置文件 /app/superset/config.py<br>PUBLIC_ROLE_LIKE: Optional[str] = “Gamma”<br>superset init  // 初始化<br>c) 将pubilc涉及add edit delete menu权限全部去掉，<br>   菜单栏：Settings -&gt; List Roles -&gt; Public 编辑权限</p>\n<p>7.允许跨域请求iframe<br>编辑配置文件 /app/superset/config.py<br>WTF_CSRF_ENABLED = False<br>重启docker-compose down  / up</p>\n<p>8.把图表的加载地址分享给前端，在编辑 Chart 页面找到&lt;&gt;按钮，复制代码给前端</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">width</span>=<span class=\"string\">\"600\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">height</span>=<span class=\"string\">\"400\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">seamless</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">frameBorder</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">scrolling</span>=<span class=\"string\">\"no\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">src</span>=<span class=\"string\">\"http://192.168.1.100:8088/superset/explore/?r=19&amp;standalone=1&amp;height=400\"</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"后续研究\"><a href=\"#后续研究\" class=\"headerlink\" title=\"后续研究\"></a>后续研究</h5><p>1.如何使用SQL Lab<br>2.如何更好的管理和使用Chart模板<br>3.二开</p>"},{"title":"Error Log Of 2021-12","date":"2022-01-10T16:00:00.000Z","_content":"\n🔺 简单整理2021年12月份遇到的报错日志及解决方法如下：\n\n<!--more-->\n\n\n##### 2021.12.30\n\n命令：\n初始化 MySQL 表中基础数据：\n\n    docker-compose exec fpm php yii init/data\n\n报错：\n```\nException 'yii\\db\\Exception' with message 'SQLSTATE[HY000]:\nGeneral error: 1366 Incorrect string value: '\\xE4\\xBB\\xA5\\xE5\\xA4\\xAA...' for column 'name_cn' at row 1\nThe SQL being executed was: INSERT INTO `currency` (`symbol`, `name_cn`, `name_en`) VALUES ('eth', '以太坊', 'Ethereum')'\n```\n\n处理方式：\n修改框架数据库字符集 utf8->utf8mb4\n\n##### 2021.12.31\nwidows下命令：\n```\nwinpty docker run --rm -it -v \"C:\\phpstudy_pro\\WWW\\chainadmin\":/work\n--network chainadmin_project python:3.9-slim-bullseye sh -c 'cd /work\n&& pip install -r ./process_data/requirements.txt\n&& python ./process_data/generate_mining_stats.py --mysql-host mysql --user root --passwd root --parse-date all'\n```\n\n报错：\n```\nERROR: Could not install packages due to an OSError: HTTPSConnectionPool(host='files.pythonhosted.org', port=443):\nMax retries exceeded with url: /packages/a7/f6/84070ab117e6b080a87aac0ac9e4d269a66c6f6076ad81509bd0aac828d8/autopep8-1.5.7-py2.py3-none-any.whl\n(Caused by ConnectTimeoutError(<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7fd2819e9160>,\n'Connection to files.pythonhosted.org timed out. (connect timeout=15)'))\n```\n\n处理方式：\n```\nwinpty docker run --rm -it -v \"C:\\phpstudy_pro\\WWW\\chainadmin\":/work\n--network chainadmin_project python:3.9-slim-bullseye sh -c\n'cd /work && pip install -r ./process_data/requirements.txt --index-url=https://mirrors.aliyun.com/pypi/simple/\n&& python ./process_data/generate_mining_stats.py --mysql-host mysql --user root --passwd root --parse-date all'\n```\n\n小结：\n切换了国内源\n\n命令：\n\n    php yii migrate\n\n报错：\n```\nException 'yii\\db\\Exception' with message 'SQLSTATE[HY000] [2002]\nphp_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known'\nin /Users/baozhigang/work/chainadmin/vendor/yiisoft/yii2/db/Connection.php:649\n```\n\n处理方式：\n进入fpm终端执行\n","source":"_posts/errorlog_202112.md","raw":"---\ntitle: Error Log Of 2021-12\ndate: 2022-1-11\ncategories:\n- error\ntags:\n- error\n---\n\n🔺 简单整理2021年12月份遇到的报错日志及解决方法如下：\n\n<!--more-->\n\n\n##### 2021.12.30\n\n命令：\n初始化 MySQL 表中基础数据：\n\n    docker-compose exec fpm php yii init/data\n\n报错：\n```\nException 'yii\\db\\Exception' with message 'SQLSTATE[HY000]:\nGeneral error: 1366 Incorrect string value: '\\xE4\\xBB\\xA5\\xE5\\xA4\\xAA...' for column 'name_cn' at row 1\nThe SQL being executed was: INSERT INTO `currency` (`symbol`, `name_cn`, `name_en`) VALUES ('eth', '以太坊', 'Ethereum')'\n```\n\n处理方式：\n修改框架数据库字符集 utf8->utf8mb4\n\n##### 2021.12.31\nwidows下命令：\n```\nwinpty docker run --rm -it -v \"C:\\phpstudy_pro\\WWW\\chainadmin\":/work\n--network chainadmin_project python:3.9-slim-bullseye sh -c 'cd /work\n&& pip install -r ./process_data/requirements.txt\n&& python ./process_data/generate_mining_stats.py --mysql-host mysql --user root --passwd root --parse-date all'\n```\n\n报错：\n```\nERROR: Could not install packages due to an OSError: HTTPSConnectionPool(host='files.pythonhosted.org', port=443):\nMax retries exceeded with url: /packages/a7/f6/84070ab117e6b080a87aac0ac9e4d269a66c6f6076ad81509bd0aac828d8/autopep8-1.5.7-py2.py3-none-any.whl\n(Caused by ConnectTimeoutError(<pip._vendor.urllib3.connection.HTTPSConnection object at 0x7fd2819e9160>,\n'Connection to files.pythonhosted.org timed out. (connect timeout=15)'))\n```\n\n处理方式：\n```\nwinpty docker run --rm -it -v \"C:\\phpstudy_pro\\WWW\\chainadmin\":/work\n--network chainadmin_project python:3.9-slim-bullseye sh -c\n'cd /work && pip install -r ./process_data/requirements.txt --index-url=https://mirrors.aliyun.com/pypi/simple/\n&& python ./process_data/generate_mining_stats.py --mysql-host mysql --user root --passwd root --parse-date all'\n```\n\n小结：\n切换了国内源\n\n命令：\n\n    php yii migrate\n\n报错：\n```\nException 'yii\\db\\Exception' with message 'SQLSTATE[HY000] [2002]\nphp_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known'\nin /Users/baozhigang/work/chainadmin/vendor/yiisoft/yii2/db/Connection.php:649\n```\n\n处理方式：\n进入fpm终端执行\n","slug":"errorlog_202112","published":1,"updated":"2022-01-11T14:46:29.463Z","_id":"ckya85gf70000uzs6hthvhgkl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>🔺 简单整理2021年12月份遇到的报错日志及解决方法如下：</p>\n<a id=\"more\"></a>\n\n\n<h5 id=\"2021-12-30\"><a href=\"#2021-12-30\" class=\"headerlink\" title=\"2021.12.30\"></a>2021.12.30</h5><p>命令：<br>初始化 MySQL 表中基础数据：</p>\n<pre><code>docker-compose exec fpm php yii init/data</code></pre><p>报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception &#39;yii\\db\\Exception&#39; with message &#39;SQLSTATE[HY000]:</span><br><span class=\"line\">General error: 1366 Incorrect string value: &#39;\\xE4\\xBB\\xA5\\xE5\\xA4\\xAA...&#39; for column &#39;name_cn&#39; at row 1</span><br><span class=\"line\">The SQL being executed was: INSERT INTO &#96;currency&#96; (&#96;symbol&#96;, &#96;name_cn&#96;, &#96;name_en&#96;) VALUES (&#39;eth&#39;, &#39;以太坊&#39;, &#39;Ethereum&#39;)&#39;</span><br></pre></td></tr></table></figure>\n\n<p>处理方式：<br>修改框架数据库字符集 utf8-&gt;utf8mb4</p>\n<h5 id=\"2021-12-31\"><a href=\"#2021-12-31\" class=\"headerlink\" title=\"2021.12.31\"></a>2021.12.31</h5><p>widows下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winpty docker run --rm -it -v &quot;C:\\phpstudy_pro\\WWW\\chainadmin&quot;:&#x2F;work</span><br><span class=\"line\">--network chainadmin_project python:3.9-slim-bullseye sh -c &#39;cd &#x2F;work</span><br><span class=\"line\">&amp;&amp; pip install -r .&#x2F;process_data&#x2F;requirements.txt</span><br><span class=\"line\">&amp;&amp; python .&#x2F;process_data&#x2F;generate_mining_stats.py --mysql-host mysql --user root --passwd root --parse-date all&#39;</span><br></pre></td></tr></table></figure>\n\n<p>报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Could not install packages due to an OSError: HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443):</span><br><span class=\"line\">Max retries exceeded with url: &#x2F;packages&#x2F;a7&#x2F;f6&#x2F;84070ab117e6b080a87aac0ac9e4d269a66c6f6076ad81509bd0aac828d8&#x2F;autopep8-1.5.7-py2.py3-none-any.whl</span><br><span class=\"line\">(Caused by ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.HTTPSConnection object at 0x7fd2819e9160&gt;,</span><br><span class=\"line\">&#39;Connection to files.pythonhosted.org timed out. (connect timeout&#x3D;15)&#39;))</span><br></pre></td></tr></table></figure>\n\n<p>处理方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winpty docker run --rm -it -v &quot;C:\\phpstudy_pro\\WWW\\chainadmin&quot;:&#x2F;work</span><br><span class=\"line\">--network chainadmin_project python:3.9-slim-bullseye sh -c</span><br><span class=\"line\">&#39;cd &#x2F;work &amp;&amp; pip install -r .&#x2F;process_data&#x2F;requirements.txt --index-url&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class=\"line\">&amp;&amp; python .&#x2F;process_data&#x2F;generate_mining_stats.py --mysql-host mysql --user root --passwd root --parse-date all&#39;</span><br></pre></td></tr></table></figure>\n\n<p>小结：<br>切换了国内源</p>\n<p>命令：</p>\n<pre><code>php yii migrate</code></pre><p>报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception &#39;yii\\db\\Exception&#39; with message &#39;SQLSTATE[HY000] [2002]</span><br><span class=\"line\">php_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known&#39;</span><br><span class=\"line\">in &#x2F;Users&#x2F;baozhigang&#x2F;work&#x2F;chainadmin&#x2F;vendor&#x2F;yiisoft&#x2F;yii2&#x2F;db&#x2F;Connection.php:649</span><br></pre></td></tr></table></figure>\n\n<p>处理方式：<br>进入fpm终端执行</p>\n","site":{"data":{}},"excerpt":"<p>🔺 简单整理2021年12月份遇到的报错日志及解决方法如下：</p>","more":"<h5 id=\"2021-12-30\"><a href=\"#2021-12-30\" class=\"headerlink\" title=\"2021.12.30\"></a>2021.12.30</h5><p>命令：<br>初始化 MySQL 表中基础数据：</p>\n<pre><code>docker-compose exec fpm php yii init/data</code></pre><p>报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception &#39;yii\\db\\Exception&#39; with message &#39;SQLSTATE[HY000]:</span><br><span class=\"line\">General error: 1366 Incorrect string value: &#39;\\xE4\\xBB\\xA5\\xE5\\xA4\\xAA...&#39; for column &#39;name_cn&#39; at row 1</span><br><span class=\"line\">The SQL being executed was: INSERT INTO &#96;currency&#96; (&#96;symbol&#96;, &#96;name_cn&#96;, &#96;name_en&#96;) VALUES (&#39;eth&#39;, &#39;以太坊&#39;, &#39;Ethereum&#39;)&#39;</span><br></pre></td></tr></table></figure>\n\n<p>处理方式：<br>修改框架数据库字符集 utf8-&gt;utf8mb4</p>\n<h5 id=\"2021-12-31\"><a href=\"#2021-12-31\" class=\"headerlink\" title=\"2021.12.31\"></a>2021.12.31</h5><p>widows下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winpty docker run --rm -it -v &quot;C:\\phpstudy_pro\\WWW\\chainadmin&quot;:&#x2F;work</span><br><span class=\"line\">--network chainadmin_project python:3.9-slim-bullseye sh -c &#39;cd &#x2F;work</span><br><span class=\"line\">&amp;&amp; pip install -r .&#x2F;process_data&#x2F;requirements.txt</span><br><span class=\"line\">&amp;&amp; python .&#x2F;process_data&#x2F;generate_mining_stats.py --mysql-host mysql --user root --passwd root --parse-date all&#39;</span><br></pre></td></tr></table></figure>\n\n<p>报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: Could not install packages due to an OSError: HTTPSConnectionPool(host&#x3D;&#39;files.pythonhosted.org&#39;, port&#x3D;443):</span><br><span class=\"line\">Max retries exceeded with url: &#x2F;packages&#x2F;a7&#x2F;f6&#x2F;84070ab117e6b080a87aac0ac9e4d269a66c6f6076ad81509bd0aac828d8&#x2F;autopep8-1.5.7-py2.py3-none-any.whl</span><br><span class=\"line\">(Caused by ConnectTimeoutError(&lt;pip._vendor.urllib3.connection.HTTPSConnection object at 0x7fd2819e9160&gt;,</span><br><span class=\"line\">&#39;Connection to files.pythonhosted.org timed out. (connect timeout&#x3D;15)&#39;))</span><br></pre></td></tr></table></figure>\n\n<p>处理方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">winpty docker run --rm -it -v &quot;C:\\phpstudy_pro\\WWW\\chainadmin&quot;:&#x2F;work</span><br><span class=\"line\">--network chainadmin_project python:3.9-slim-bullseye sh -c</span><br><span class=\"line\">&#39;cd &#x2F;work &amp;&amp; pip install -r .&#x2F;process_data&#x2F;requirements.txt --index-url&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class=\"line\">&amp;&amp; python .&#x2F;process_data&#x2F;generate_mining_stats.py --mysql-host mysql --user root --passwd root --parse-date all&#39;</span><br></pre></td></tr></table></figure>\n\n<p>小结：<br>切换了国内源</p>\n<p>命令：</p>\n<pre><code>php yii migrate</code></pre><p>报错：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception &#39;yii\\db\\Exception&#39; with message &#39;SQLSTATE[HY000] [2002]</span><br><span class=\"line\">php_network_getaddresses: getaddrinfo failed: nodename nor servname provided, or not known&#39;</span><br><span class=\"line\">in &#x2F;Users&#x2F;baozhigang&#x2F;work&#x2F;chainadmin&#x2F;vendor&#x2F;yiisoft&#x2F;yii2&#x2F;db&#x2F;Connection.php:649</span><br></pre></td></tr></table></figure>\n\n<p>处理方式：<br>进入fpm终端执行</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckxy549vo00080w8n53lo5ppd","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549vt000e0w8nhca79d8u"},{"post_id":"ckxy549vc00000w8ne0ny9gwj","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549vu000j0w8naa7fb4rf"},{"post_id":"ckxy549vp00090w8n4obm4qbq","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549vw000m0w8ne9nz03pv"},{"post_id":"ckxy549vr000c0w8n0myoh69d","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549vx000q0w8ndsl8cp5s"},{"post_id":"ckxy549vj00020w8nhrgr8368","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549vy000t0w8nb2n26m4f"},{"post_id":"ckxy549vs000d0w8n26hthiqr","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w0000x0w8n2cmu041r"},{"post_id":"ckxy549vu000i0w8n71um5bl0","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w000100w8nf6cg5k8o"},{"post_id":"ckxy549vn00060w8nbkwvfmsn","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w100140w8ngh57h36g"},{"post_id":"ckxy549vv000l0w8n91065mvw","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w200170w8neb061gfq"},{"post_id":"ckxy549vw000p0w8ngrq5fte6","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w4001b0w8n9n86ev2n"},{"post_id":"ckxy549vy000s0w8n6t24h4vn","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w5001e0w8n4qc49tbd"},{"post_id":"ckxy549vz000w0w8nbzl766zl","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w5001i0w8ngyig6duq"},{"post_id":"ckxy549w0000z0w8n13dr1zw4","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w6001l0w8ndhg70nzu"},{"post_id":"ckxy549w100130w8n5xk4eyc7","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549w9001p0w8n5b8u5pjo"},{"post_id":"ckxy549w200160w8n4bvf2wyx","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wa001s0w8n1ggg7len"},{"post_id":"ckxy549w3001a0w8n4tg1gs0s","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wa001v0w8na9wb6oq2"},{"post_id":"ckxy549w4001d0w8nbrio8a8w","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wb001y0w8n7jkxg9i2"},{"post_id":"ckxy549w5001h0w8n6lx4557r","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wc00210w8n86o5dk53"},{"post_id":"ckxy549w6001k0w8n9rqq10m8","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549we00240w8n02uo9t9j"},{"post_id":"ckxy549w8001o0w8nfh631l6s","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549we00270w8nc31e0z73"},{"post_id":"ckxy549w9001r0w8ng20q61ik","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wf002a0w8n2c374wnj"},{"post_id":"ckxy549wa001u0w8n4ixgbe7j","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wg002d0w8n2o308fv0"},{"post_id":"ckxy549wb001x0w8nhm03c5lg","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wh002i0w8n3vzoei79"},{"post_id":"ckxy549wc00200w8nh8nd1on1","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wi002l0w8ndhrmfeqd"},{"post_id":"ckxy549wd00230w8n48vsc92m","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wj002q0w8n8sgvcgul"},{"post_id":"ckxy549we00260w8nc48rai15","category_id":"ckxy549vl00040w8n1yfd5ftw","_id":"ckxy549wk002t0w8n8pmefnus"},{"post_id":"ckxy549wf00290w8nfrge5tvv","category_id":"ckxy549wg002e0w8n8fg1azo2","_id":"ckxy549wk002w0w8n6a6bey7z"},{"post_id":"ckxy549wj002s0w8n7xtx4gev","category_id":"ckxy549wj002o0w8n9hv283qo","_id":"ckxy549wm00330w8ndbtpgkmc"},{"post_id":"ckxy549wf002c0w8nhfox60g5","category_id":"ckxy549wj002o0w8n9hv283qo","_id":"ckxy549wn00380w8ndc9d0f5h"},{"post_id":"ckxy549wg002h0w8n61bhddz7","category_id":"ckxy549wk002x0w8nbrq3dwd1","_id":"ckxy549wn003b0w8n5o0igmfr"},{"post_id":"ckxy549wh002k0w8nhbgt79dp","category_id":"ckxy549wk002x0w8nbrq3dwd1","_id":"ckxy549wo003g0w8nehqthqsr"},{"post_id":"ckxy549wi002n0w8nfycceynz","category_id":"ckxy549wj002o0w8n9hv283qo","_id":"ckxy549wp003k0w8n41ywfawm"},{"post_id":"ckxy549wk002v0w8nhu4i9yp3","category_id":"ckxy549wo003f0w8n34ah661g","_id":"ckxy549wq003q0w8neheg3x3u"},{"post_id":"ckxy549wl00300w8nb0jsan1r","category_id":"ckxy549wo003f0w8n34ah661g","_id":"ckxy549wr003v0w8n0n316knv"},{"post_id":"ckxy549wl00320w8n98meg27f","category_id":"ckxy549wo003f0w8n34ah661g","_id":"ckxy549wr003z0w8nc4rh0uct"},{"post_id":"ckxy549wm00370w8negfr8nda","category_id":"ckxy549wq003u0w8nedgeayny","_id":"ckxy549ws00440w8n9r8a78ib"},{"post_id":"cky32b3s60000yos6730027cp","category_id":"ckxy549wq003u0w8nedgeayny","_id":"cky32b3sn0002yos6dzlsemj9"},{"post_id":"ckya85gf70000uzs6hthvhgkl","category_id":"ckya85gfd0001uzs65oqbhefw","_id":"ckya85gfk0004uzs6ewkaelzf"}],"PostTag":[{"post_id":"ckxy549vr000c0w8n0myoh69d","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549vt000h0w8nh7wggtgp"},{"post_id":"ckxy549vr000c0w8n0myoh69d","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549vv000k0w8n2tckb5z6"},{"post_id":"ckxy549vc00000w8ne0ny9gwj","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549vw000o0w8nb5s6b1g1"},{"post_id":"ckxy549vc00000w8ne0ny9gwj","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549vy000r0w8nekcw7uvg"},{"post_id":"ckxy549vs000d0w8n26hthiqr","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549vz000v0w8n8g4w72ys"},{"post_id":"ckxy549vs000d0w8n26hthiqr","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549w0000y0w8n0vp1b8z0"},{"post_id":"ckxy549vu000i0w8n71um5bl0","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549w100120w8nhy9agqg0"},{"post_id":"ckxy549vu000i0w8n71um5bl0","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549w200150w8ndtxpe1gf"},{"post_id":"ckxy549vv000l0w8n91065mvw","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549w300190w8na4ftb35t"},{"post_id":"ckxy549vv000l0w8n91065mvw","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549w4001c0w8n5ig04jxb"},{"post_id":"ckxy549vw000p0w8ngrq5fte6","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549w5001g0w8nhzxif7dk"},{"post_id":"ckxy549vw000p0w8ngrq5fte6","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549w6001j0w8ndwz41ryy"},{"post_id":"ckxy549vj00020w8nhrgr8368","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549w8001n0w8n50e9hulp"},{"post_id":"ckxy549vj00020w8nhrgr8368","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549w9001q0w8nd9b3cobf"},{"post_id":"ckxy549vz000w0w8nbzl766zl","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wa001t0w8naobo3u1d"},{"post_id":"ckxy549vz000w0w8nbzl766zl","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wb001w0w8n1y30etg4"},{"post_id":"ckxy549w0000z0w8n13dr1zw4","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wb001z0w8ne4nn7jds"},{"post_id":"ckxy549w0000z0w8n13dr1zw4","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wc00220w8n8q7a8g9k"},{"post_id":"ckxy549w100130w8n5xk4eyc7","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549we00250w8n30kkekmz"},{"post_id":"ckxy549w100130w8n5xk4eyc7","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wf00280w8n8sal9j2a"},{"post_id":"ckxy549vn00060w8nbkwvfmsn","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wf002b0w8n1u8iabgh"},{"post_id":"ckxy549vn00060w8nbkwvfmsn","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wg002g0w8n9mr92gll"},{"post_id":"ckxy549w200160w8n4bvf2wyx","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wh002j0w8nh6e4e4a5"},{"post_id":"ckxy549w200160w8n4bvf2wyx","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wi002m0w8ngpqt0bpf"},{"post_id":"ckxy549w3001a0w8n4tg1gs0s","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wj002r0w8n3bfv5d3c"},{"post_id":"ckxy549w3001a0w8n4tg1gs0s","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wk002u0w8n7bwa8ysa"},{"post_id":"ckxy549vo00080w8n53lo5ppd","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wl002z0w8n4gv8fdkk"},{"post_id":"ckxy549vo00080w8n53lo5ppd","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wl00310w8n255ha75u"},{"post_id":"ckxy549w4001d0w8nbrio8a8w","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wm00360w8nezz52tl6"},{"post_id":"ckxy549w4001d0w8nbrio8a8w","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wn00390w8n8kni32gt"},{"post_id":"ckxy549w5001h0w8n6lx4557r","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wo003d0w8n546797mw"},{"post_id":"ckxy549w5001h0w8n6lx4557r","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wo003e0w8n7uji3mg8"},{"post_id":"ckxy549vp00090w8n4obm4qbq","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wo003h0w8nehv11gge"},{"post_id":"ckxy549vp00090w8n4obm4qbq","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wp003j0w8nc70mhhlq"},{"post_id":"ckxy549w6001k0w8n9rqq10m8","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wp003m0w8nhvpsepmg"},{"post_id":"ckxy549w6001k0w8n9rqq10m8","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wq003o0w8n6n9r6u0l"},{"post_id":"ckxy549w8001o0w8nfh631l6s","tag_id":"ckxy549w6001m0w8n8szs5p6y","_id":"ckxy549wq003r0w8n7uhrgct6"},{"post_id":"ckxy549w8001o0w8nfh631l6s","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wq003t0w8ne0ej961x"},{"post_id":"ckxy549vy000s0w8n6t24h4vn","tag_id":"ckxy549w6001m0w8n8szs5p6y","_id":"ckxy549wr003w0w8n5i821zbt"},{"post_id":"ckxy549vy000s0w8n6t24h4vn","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wr003y0w8n00d42l81"},{"post_id":"ckxy549w9001r0w8ng20q61ik","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wr00400w8ngz2v3zem"},{"post_id":"ckxy549w9001r0w8ng20q61ik","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wr00420w8n1m1i72oc"},{"post_id":"ckxy549wa001u0w8n4ixgbe7j","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549ws00430w8n66qq68b7"},{"post_id":"ckxy549wa001u0w8n4ixgbe7j","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549ws00460w8n0z1e7jiy"},{"post_id":"ckxy549wb001x0w8nhm03c5lg","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549ws00470w8ngqd409f5"},{"post_id":"ckxy549wb001x0w8nhm03c5lg","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wt00490w8n47lxbx0f"},{"post_id":"ckxy549wc00200w8nh8nd1on1","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wt004a0w8n6kqf35d9"},{"post_id":"ckxy549wc00200w8nh8nd1on1","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wt004b0w8ncaz37cyu"},{"post_id":"ckxy549wd00230w8n48vsc92m","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wt004d0w8n9me6hv6i"},{"post_id":"ckxy549wd00230w8n48vsc92m","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wt004e0w8ndi1shp2o"},{"post_id":"ckxy549we00260w8nc48rai15","tag_id":"ckxy549vm00050w8nac6wgdo3","_id":"ckxy549wu004g0w8n0tpd28l5"},{"post_id":"ckxy549we00260w8nc48rai15","tag_id":"ckxy549vp000b0w8n73ot6ywo","_id":"ckxy549wu004h0w8n6357bgtt"},{"post_id":"ckxy549wf00290w8nfrge5tvv","tag_id":"ckxy549wg002f0w8n4qqv419z","_id":"ckxy549wu004j0w8nh6bo992x"},{"post_id":"ckxy549wf00290w8nfrge5tvv","tag_id":"ckxy549wj002p0w8n4dkg9rv5","_id":"ckxy549wu004k0w8nehe7deuo"},{"post_id":"ckxy549wf002c0w8nhfox60g5","tag_id":"ckxy549wk002y0w8n9dnzb86i","_id":"ckxy549wu004m0w8nfuwdhwly"},{"post_id":"ckxy549wf002c0w8nhfox60g5","tag_id":"ckxy549wm00350w8n9mv56uui","_id":"ckxy549wu004n0w8n791v25uj"},{"post_id":"ckxy549wf002c0w8nhfox60g5","tag_id":"ckxy549wo003c0w8n26g51coz","_id":"ckxy549wv004p0w8n0lf2h10n"},{"post_id":"ckxy549wg002h0w8n61bhddz7","tag_id":"ckxy549wo003i0w8n7yvsezq5","_id":"ckxy549wv004q0w8n2kua88bm"},{"post_id":"ckxy549wh002k0w8nhbgt79dp","tag_id":"ckxy549wo003i0w8n7yvsezq5","_id":"ckxy549wv004s0w8n4qe94dvs"},{"post_id":"ckxy549wh002k0w8nhbgt79dp","tag_id":"ckxy549wq003s0w8nhqjq6p82","_id":"ckxy549wv004t0w8ner0x6hp0"},{"post_id":"ckxy549wh002k0w8nhbgt79dp","tag_id":"ckxy549wr003x0w8n8i8qhpom","_id":"ckxy549wv004v0w8n0n4b0in9"},{"post_id":"ckxy549wi002n0w8nfycceynz","tag_id":"ckxy549wk002y0w8n9dnzb86i","_id":"ckxy549ww004w0w8n8ydi7r50"},{"post_id":"ckxy549wi002n0w8nfycceynz","tag_id":"ckxy549wm00350w8n9mv56uui","_id":"ckxy549ww004y0w8n03a9egpp"},{"post_id":"ckxy549wi002n0w8nfycceynz","tag_id":"ckxy549ws00480w8n1anw01ou","_id":"ckxy549wx004z0w8nh5w0dy7d"},{"post_id":"ckxy549wj002s0w8n7xtx4gev","tag_id":"ckxy549wk002y0w8n9dnzb86i","_id":"ckxy549wx00500w8nhdry3mob"},{"post_id":"ckxy549wj002s0w8n7xtx4gev","tag_id":"ckxy549wm00350w8n9mv56uui","_id":"ckxy549wx00520w8nhiq35spb"},{"post_id":"ckxy549wj002s0w8n7xtx4gev","tag_id":"ckxy549wu004i0w8n07zrdr23","_id":"ckxy549wx00530w8ncasb6gb2"},{"post_id":"ckxy549wk002v0w8nhu4i9yp3","tag_id":"ckxy549wu004l0w8n4wu58v2c","_id":"ckxy549wx00540w8n7x86hpfa"},{"post_id":"ckxy549wk002v0w8nhu4i9yp3","tag_id":"ckxy549wu004o0w8nhoqr6edz","_id":"ckxy549wx00550w8n10hrd4b8"},{"post_id":"ckxy549wl00300w8nb0jsan1r","tag_id":"ckxy549wu004l0w8n4wu58v2c","_id":"ckxy549wx00560w8n9sa5g98u"},{"post_id":"ckxy549wl00320w8n98meg27f","tag_id":"ckxy549wu004l0w8n4wu58v2c","_id":"ckxy549wx00570w8nd89afpjt"},{"post_id":"ckxy549wm00370w8negfr8nda","tag_id":"ckxy549ww004x0w8n34fvavte","_id":"ckxy549wx00580w8na8xhbdsb"},{"post_id":"ckxy549wm00370w8negfr8nda","tag_id":"ckxy549wx00510w8nebewgrq6","_id":"ckxy549wx00590w8naycn3njs"},{"post_id":"cky32b3s60000yos6730027cp","tag_id":"cky32b3sg0001yos6hg2p9e98","_id":"cky32b3so0004yos64n4rfsbx"},{"post_id":"cky32b3s60000yos6730027cp","tag_id":"cky32b3sn0003yos6fnr261nx","_id":"cky32b3so0005yos65seme78h"},{"post_id":"ckya85gf70000uzs6hthvhgkl","tag_id":"ckya85gfj0002uzs68jri0zks","_id":"ckya85gfk0003uzs67wml0mqz"}],"Tag":[{"name":"java","_id":"ckxy549vm00050w8nac6wgdo3"},{"name":"algorithm","_id":"ckxy549vp000b0w8n73ot6ywo"},{"name":"php","_id":"ckxy549w6001m0w8n8szs5p6y"},{"name":"CentOS","_id":"ckxy549wg002f0w8n4qqv419z"},{"name":"network","_id":"ckxy549wj002p0w8n4dkg9rv5"},{"name":"skill","_id":"ckxy549wk002y0w8n9dnzb86i"},{"name":"keyboard","_id":"ckxy549wm00350w8n9mv56uui"},{"name":"vscode","_id":"ckxy549wo003c0w8n26g51coz"},{"name":"computer","_id":"ckxy549wo003i0w8n7yvsezq5"},{"name":"tcp","_id":"ckxy549wq003s0w8nhqjq6p82"},{"name":"udp","_id":"ckxy549wr003x0w8n8i8qhpom"},{"name":"Google","_id":"ckxy549ws00480w8n1anw01ou"},{"name":"Mac","_id":"ckxy549wu004i0w8n07zrdr23"},{"name":"redis","_id":"ckxy549wu004l0w8n4wu58v2c"},{"name":"mysql","_id":"ckxy549wu004o0w8nhoqr6edz"},{"name":"hexo","_id":"ckxy549ww004x0w8n34fvavte"},{"name":"nodejs","_id":"ckxy549wx00510w8nebewgrq6"},{"name":"superset","_id":"cky32b3sg0001yos6hg2p9e98"},{"name":"bi","_id":"cky32b3sn0003yos6fnr261nx"},{"name":"error","_id":"ckya85gfj0002uzs68jri0zks"}]}}